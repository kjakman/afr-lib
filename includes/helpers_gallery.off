<?php

/** 
  Data for plugin 
*/

function gallery_get_json($collection_id, $site_id=247) {
  global $__SITE, $u_id;  
  $siteObj = $site_id == $__SITE->id ? $__SITE : get_object('site', $site_id);

  $jsonObj->container_id = $target;
  $jsonObj->plugin_id = $plugin_id;
  
      
  $output = '';
  $debug = '';   
  
  $strip = false;
  
  $events = find_objects('event', ['parent_type' => $obj_type, 'parent_id' => $obj_id, 'end_time' => ['>', now()]]);
  $jsonObj->events = $events;
  
  
  $collectionObj = get_object('media_collection', $collection_id);
  $jsonObj->curator_id = $collectionObj->user_id;
  $jsonObj->collection_name = $collectionObj->title;

  $collectionObj->description = safe_text($collectionObj->description);
  
  $jsonObj->collection = $collectionObj;
  $jsonObj->collection_id = $collectionObj->id;
  $jsonObj->collection_image = $collectionObj->image ? print_media($collectionObj->image, ['full' => 1, 'size' => 'big']) : '';

  $address_fields = ['address1' , 'address2' , 'city' , 'state' , 'zip' , 'country' , 'email_address', 'phone', 'mobile', 
                     'location_lat','location_long', 'location_bounds', 'address_formatted'];
  $user_fields = array_merge(['user_id', 'profile_id', 'display_name', 'description'], $address_fields);            

  
  $curator_id = $collectionObj->user_id;
  $curatorObj = $curator_id ? get_user($curator_id) : null;

  
  if($curatorObj) { // used for chat
    $jsonObj->curator_name = $curator_name = $curatorObj->display_name;
    $jsonObj->curator_email = $curator_email = $curatorObj->email_address;
    $jsonObj->curator_greeting = "Hello, I'm {$curator_name}!";
    $jsonObj->curator_image = $curator_image = user_photo($curatorObj, 'big', ['full' => 1]);

    $curator = [];
    foreach($user_fields as $f) $curator[$f] = $curatorObj->$f;
    $curator['image'] = $curator_image;
    
    $curator['description'] = safe_text($curator['description']);
    
    $jsonObj->curator = $curator;
  }
  
  if($u_id) { // used for chat
    $userObj = get_user($u_id);
    foreach($user_fields as $f) $user[$f] = $userObj->$f;    
  }
  
  
  $jsonObj->base_link = page_link(PAGE_GALLERY, $obj_type, $collectionObj->type);
  
  print_log("cid: $curator_id name: $curator_name email: $curator_email".dump($curatorObj,true), 'gallery', LOG_LEVEL_ALWAYS);

  $media_ids = [];
  $mapObjs = find_objects('media_collection_map', array('media_collection_id' => $collection_id, 'active' => 1), array('fields' => ['id', 'media_id'], 'sort' => 'rank'));
  foreach($mapObjs as $mapObj) {
    $mapArray[$mapObj->media_id] = $mapObj->id; 
  }
  
  //$media_ids = find_objects('media_collection_map', array('media_collection_id' => $collection_id, 'active' => 1), array('fields' => 'distinct media_id', 'sort' => 'rank'));
  $media_ids = array_keys($mapArray);
  
  $artwork_link = site_full_url($siteObj)."/artworks/";
  $obj_id_list = implode(',', $media_ids);
  $base_url = $_SERVER['HTTP_HOST'];  
  $protocol = "http";
  $fields = array(
    'id as media_id', 
    'src', 
    'path', 
    'name as title', 
    'comment',
    "concat ('$protocol', '://', '$base_url', path, 'full/', src) as href",
    "concat ('$protocol', '://', '$base_url', path, 'small/', src) as href_small",
    'original_currency' ,
    'original_price'    ,
    'original_height'   ,
    'original_width'    ,
    'original_url'      ,
    'original_count'    ,
    'original_available',
    'original_year'     ,
    'original_technique',
    'digital_price'     ,
    'digital_height'    ,
    'digital_width'     ,
    'height as h'    ,
    'width as w'     ,
    'artist_id');
  
  $items = find_objects('media', array('id' => $media_ids), array('sort' => "FIELD(id, $obj_id_list)", 'fields' => $fields));
  foreach($items as &$item) {
    $item->map_id = $map_id = $mapArray[$item->media_id];
    
    $slug = slugify($item->title);
    $item->link = "{$artwork_link}{$slug}~{$map_id}";

    $item->comment = safe_text($item->comment);
  }
  
  $artist_ids = find_objects('media', array('id' => $media_ids), array('fields' => "distinct (artist_id)"));
  
  $artist_names = $artists = [];
  foreach($artist_ids as $artist_id) {
    $artistObj = get_user($artist_id);
    $artist_names[$artist_id] = $artist_name = $artistObj->display_name;
    $artist_image = $artistObj->photo ? user_photo($artistObj, 'big', ['full' => 1]) : '';
    
    $artist = [];
    foreach($user_fields as $f) $artist[$f] = $artistObj->$f;
    $artist['image'] = $artist_image;
    $artist['description'] = safe_text($artist['description']);
    
    $artists[$artist_id] = $artist;
  }
  
  $jsonObj->artists = $artists;
  $jsonObj->artist_names = $artist_names;
  $jsonObj->target = $target;
  

  $shareObj = $share_id ? get_object('sharing', $share_id) : 0;
  $pluginOptions = $shareObj ? ['infobar_show' => $shareObj->infobar_show, 'infobar_control' => $shareObj->infobar_control, 'border_width' => $shareObj->border_width, 'border_radius' => $shareObj->border_radius, 'border_color' => $shareObj->border_color] : [];    
  
  $jsonObj->obj_type = $obj_type;
  $jsonObj->obj_id = $obj_id;
  $jsonObj->site_id = $site_id;
  if($jsonObj->user_id = $u_id) {
    $jsonObj->user = $user;
  }
  $jsonObj->user_name = $u_id ? user_display_name($u_id) : '';
        
  $jsonObj->options = $pluginOptions;
  
  $jsonObj->items = $items;
  
  if($collection_id) {
    $jsonObj->collection_id = $collection_id;
    $jsonObj->user_collection_id = 0;
    $jsonObj->follow = [];      
    $user_collection_id = 0;
    if($u_id) {
      $user_collection_id = gallery_find_user_collection($siteObj, $u_id, array('return' => 'id'));
      if($user_collection_id) { 
        $jsonObj->user_collection_id = $user_collection_id;
        $jsonObj->follow = $follow_ids = find_objects('media_collection_map', array('media_collection_id' => $user_collection_id, 'active' => 1), array('fields' => 'distinct (media_id)'));
      }
    }
  }
    
  return $jsonObj;
}


/** geocode galleries 
    todo: make automatic 
*/
/** unsused - automatic comment added on  */
function geocode_galleries() {  
  $userObjs = find_objects('user', ["user.site_id" => 247, "user_level" => 26]);
  foreach($userObjs as $userObj) {
    $user = get_user($userObj);
    $data = [];
    $country_name = get_country_name($user->country);
    if($user->address1 && $user->city && $user->country) {
      $address = implode(",", array_filter([$user->address1, $user->address2, trim("{$user->zip} {$user->city}"), $user->state, $country_name]));
      $data['address_formatted'] = $address;
      
      list($status, $acc, $lat, $lng, $bounds) = google_geocode($address);
      
      if($status==200) {
        $scope->http_code = "200"; //override error set in set_env.inc due to unknown slug
        $center = [$lat, $lng];
        $locObj = center2loc($center);
        $boundsObj = $bounds ? json_decode($bounds) : radius2bounds($locObj, DEFAULT_RADIUS);
        $bounds = any2bounds($boundsObj, true);
        
        $data['location_lat'] = $lat;
        $data['location_long'] = $lng;
        $data['location_bounds'] = json_encode($bounds);
        
        list($id, $errors) = update_object('user_profile', $data, $user->profile_id);
        echo("Updated $id with ".dump($data,true));
      }
    }
  }
}


/** new functions for template based layout */

/** hack for now to update maps with media data */
function update_media_collection_maps() {
  db_query("update media,gallery set media.artist_id=gallery.user_id where media.parent_type='gallery' and media.parent_id=gallery.id");
  db_query("update media_collection_map,media set media_collection_map.name=media.name,media_collection_map.artist_id=media.artist_id,media_collection_map.original_year=media.original_year,media_collection_map.original_technique=media.original_technique where media_collection_map.media_id = media.id");
  db_query("update media_collection_map,user_profile set media_collection_map.artist_name=user_profile.display_name where media_collection_map.artist_id = user_profile.user_id");
  db_query("update media_collection_map,user_profile set media_collection_map.curator_name=user_profile.display_name where media_collection_map.curator_id = user_profile.user_id");
  return "OK, updated gallery data";
}

// returns src of collection
function collection_title_image($collectionObjOrId, $options=NULL) {
  $collectionObj = any2obj('media_collection', $collectionObjOrId);
  if(!$collectionObj) return '';
  if($media_id = $collectionObj->title_image) return get_media_source($media_id, $options);
  $media_id = find_object('media_collection_map', array('media_collection_id' => $collectionObj->id, 'active' => 1), 'media_id', array('sort' => 'rank'));
  if($media_id) return get_media_source($media_id, $options);
  return '';  
}

// returns src of folder
/** unsused - automatic comment added on  */
function folder_title_image($folderObjOrId, $options=NULL) {
  $folderObj = any2obj('gallery', $folderObjOrId);
  if(!$folderObj) return '';
  if($media_id = $folderObj->title_image) return get_media_source($media_id, $options);
  $media_id = find_object('media', array('parent_type' => 'gallery', 'parent_id' => $folderObj->id, 'active' => 1), 'id', array('sort' => 'rank'));
  if($media_id) return get_media_source($media_id, $options);
  return '';  
}

/** gets media object from mapObj and merges the two */
function get_artwork($mapObj_or_id) {
  $mapObj = any2obj('media_collection_map', $mapObj_or_id);
  $artObj = get_object('media', $mapObj->media_id);
  $media_id = $artObj->id;
  $artObj->media_id = $media_id;
  $artObj->map_id = $artObj->id = $mapObj->id;
  $keys = array('media_collection_id', 'user_id', 'rank');
  foreach($keys as $fld) $artObj->$fld = $mapObj->$fld;
  return $artObj;

}

function gallery_find_user_collection($siteObj_or_id, $userObj_or_id, $options='') {
  $siteObj = any2obj('site', $siteObj_or_id);
  $site_id = $siteObj->id;
  $userObj = any2obj('user', $userObj_or_id);
  if(!$userObj) {
    print_log("Could not find user for obj/id:".dump($userObj_or_id, true), 'gallery', LOG_LEVEL_ALWAYS);
    print_log("Stack: ".caller_stack(), 'gallery', LOG_LEVEL_ALWAYS);
    return false;    
  }
  
  $user_id = $userObj->id;
  $return = $options['return'];
  $collection_type = $options['collection_type'] ?: MEDIA_COLLECTION_TYPE_COLLECTION;
  $myCollectionObj = find_object('media_collection', array('site_id' => $site_id, 'user_id' => $user_id, 'type' => $collection_type, 'active' => 1));

    
  if(!$myCollectionObj) {
    print_log("Could not find collection for user $user_id", 'gallery', LOG_LEVEL_ALWAYS);
    $my_collection_id = gallery_add_user_collection($siteObj, $userObj); // else add collection
    $myCollectionObj = get_object('media_collection', $my_collection_id);
  }
  return $return == 'id' ? $myCollectionObj->id : $myCollectionObj;
}

function gallery_add_user_collection($siteObj_or_id, $userObj_or_id, $options=array()) {
  $siteObj = any2obj('site', $siteObj_or_id);
  $site_id = $siteObj->id;
  $userObj = any2obj('user', $userObj_or_id);
  $user_id = $userObj->id;
  $collection_type = $options['collection_type'] ?: MEDIA_COLLECTION_TYPE_COLLECTION;
  $collection_title = $options['collection_titlre'] ?: phrase('my_collection', CAPITALIZE);

  $colData['active'] = 1;
  $colData['site_id'] = $site_id;
  $colData['user_id'] = $user_id;
  $colData['type'] = $collection_type;
  $colData['title'] = $collection_title;
  list($collection_id, $errors) = add_object('media_collection', $colData);
  print_log("Adding personal collection for user $user_id", 'gallery', LOG_LEVEL_ALWAYS);
  
  if($errors) {
    //dump($errors);
  } else {
    $messages[] = "Added collection id=$collection_id<br>";
  }
  return $collection_id;
}

/** return list of mapObjs representing unique artwork for given collection ids */

function gallery_unique_artworks($collection_ids) {
  $mapObjs = find_objects('media_collection_map', array('media_collection_id' => $collection_ids, 'active' => 1));
  $media_ids = array();
  $objs = array();
  foreach($mapObjs as $mapObj) {
    $media_id = $mapObj->media_id;
    if($media_ids[$media_id]) continue;
    $media_ids[$media_id] = 1;
    $objs[] = $mapObj;
  }
  
  return $objs;  
}

/** finds first curator/exhibition/project for media_map_object */
function gallery_artwork_related($siteObj_or_id, $mapObj_or_id, $options = array()) {  
  $siteObj = any2obj('site', $siteObj_or_id);
  $mapObj = any2obj('media_collection_map', $mapObj_or_id);
  $media_id = $mapObj->media_id;   
  //$media_id = "1111111111111";
  $result = new stdClass;

  if(!$media_id) return $result;

  if($collection_ids = find_objects('media_collection_map', array('media_id' => $media_id), array('fields' => 'distinct media_collection_id'))) {
    $project     = find_object('media_collection', array('type' => MEDIA_COLLECTION_TYPE_PROJECT, 'id' => $collection_ids, 'active' => 1),  array('fields' => 'id'));
    $exhibition  = find_object('media_collection', array('type' => MEDIA_COLLECTION_TYPE_EXHIBITION, 'id' => $collection_ids, 'active' => 1),  array('fields' => 'id'));    
    $curator     = find_object('media_collection', array('type' => MEDIA_COLLECTION_TYPE_EXHIBITION, 'id' => $collection_ids, 'active' => 1),  array('fields' => 'user_id'));
    //$artists     = find_object('media_collection', array('type' => MEDIA_COLLECTION_TYPE_PROJECT, 'id' => $collection_ids, 'active' => 1),  array('fields' => 'user_id'));
  
    if($project) {
      $result->project_id = $project->id;
    }     
    if($curator) {
      $result->curator_id = $curator->user_id;
      $result->curator = get_user($curator->user_id);
    }     
    if($exhibition) {
      $result->exhibition_id = $exhibition->id;
      $result->exhibition = get_object('media_collection', $exhibition->id);
    }     
  }  
  return $result;
}


function gallery_explore($siteObj_or_id, $obj_type, $id, $options = array()) {
  global $u_id, $u_level;
  
  $obj = $obj_type && $id ? get_object($obj_type, $id) : null;
  $auth_edit = $obj ? gallery_auth_media($obj_type, $obj, $u_id) : false; 
  $edit = $auth_edit && $options['edit'];
  $embed = $auth_edit && $options['embed'];
  $sharing_id = $options['sharing_id'];
  $preview = $options['preview'];
  $tutorial_button = "";
    
  $siteObj = any2obj('site', $siteObj_or_id);  
  $site_id = $siteObj->id;
  $obj_id = $id;
  //if($obj_type == 'media_collection_map') {
  //  $obj_id = get_object('media_collection_map', $id, 'media_id');    
  //  $obj_type = 'media';
  //}
  $edit_obj_type = $obj_type;
  $edit_obj_id = $id;
  switch($obj_type) {
  case 'media_collection_map':
    $template = $edit ? '_gallery-artwork-form' : '_gallery-artwork-detail';
    $controller = 'gallery_artworks';
    $tutorial_button = 
    " <a class=\"btn btn-primary popup-iframe\" target=\"vimeo\" href=\"https://vimeo.com/145297358\">
      <i class=\"fa fa-play-circle margin-right\"></i>
      Editing Art
    </a>";
    
    break;
  case 'media_collection':
    if($id) {
      if($embed) {
        if($sharing_id) $template = $preview ? '_gallery-collection-embed-preview' : '_gallery-collection-embed-edit'; 
        else $template = '_gallery-collection-embed';      
      } else {
        $template = $edit ? '_gallery-collection-form' : '_gallery-collection-detail';
        //if($edit) $scope->uploader = object_media_uploader($obj_type, $obj_id, 'title_image');
      }
    } else {
      $template = '_gallery-collection-items.html';
      $template = 'gallery-collections.html';
    }
    $controller = 'gallery_collections';
    break;
  case 'user':
    $template = '_gallery-artwork-detail';
    $controller = 'gallery_artworks';
    break;
  case 'gallery':
    //die("GH: auth=$auth_edit options={$options['edit']} edit=$edit".dump($options, true));
    $template = $edit ? '_gallery-folder-form' : '_gallery-folder-detail';
    $controller = 'gallery_folder';
    $tutorial_button = 
    " <a class=\"btn btn-primary popup-iframe\" target=\"vimeo\" href=\"https://vimeo.com/128292540\">
      <i class=\"fa fa-play-circle margin-right\"></i>
      Tutorial - Adding and Removing Art
    </a>";
    
    break;
  case 'media':
    //$edit = $auth_edit;
    $template = $edit ? '_gallery-artwork-form' : '_gallery-artwork-detail';
    $controller = 'gallery_artworks';
    $tutorial_button = 
    " <a class=\"btn btn-primary popup-iframe\" target=\"vimeo\" href=\"https://vimeo.com/145297358\">
      <i class=\"fa fa-play-circle margin-right\"></i>
      Editing Art
    </a>";
    break;
  default:
    return "Gallery Explore: Invalid type $obj_type";
    break;
  }
  $scope = new stdClass;
  $scope->obj_type = $obj_type;
  $scope->obj_id = $obj_id;
  $scope->vault = 1;
  foreach($options as $k => $v) $scope->$k = $v;
  //if($sharing_id) {
  //  $scope->sharing_id = $sharing_id;
  //  $scope->preview = $preview;
  //}
  $pageObj = new stdClass;
  $pageObj->template = $template;
  $pageObj->controller = $controller;
  
  $output = '';
  $load_url = "/admin/app_data.php?oper=load-content&site_id=$site_id&user_level=$u_level&user_id=$u_id&obj_type=$obj_type&id=$id";      
  $preview_button = html_link("#", html_i('', "fa fa-arrow-left")." ".phrase('back_to_preview', CAPITALIZE), array('class' => 'btn btn-success ajax-loader', 'data-url' => $load_url, 'data-target' => '#cms_viewer'))." ";
  if($edit) {
    //$output .= $preview_button;    
  } else if($auth_edit) {
    if(!$embed) {
      $load_url = "/admin/app_data.php?oper=load-content&site_id=$site_id&user_level=$u_level&user_id=$u_id&obj_type=$edit_obj_type&id=$edit_obj_id&edit=1"; 
      $edit_button = html_link("#", html_i('', "fa fa-pencil")." ".phrase('edit', CAPITALIZE), array('class' => 'btn btn-success ajax-loader', 'data-url' => $load_url, 'data-target' => '#cms_viewer'));
      $output .= $edit_button;
    }
    if($obj_type == 'media_collection') {
      $class = $embed ? "visuallyhidden" : ""; /** we still need this link for reloading, but don't show it */
      $load_url = "/admin/app_data.php?oper=load-content&site_id=$site_id&user_level=$u_level&user_id=$u_id&obj_type=$edit_obj_type&id=$edit_obj_id&embed=1"; 
      //$embed_button = html_link("#", html_i('', "fa fa-link")." ".phrase('embed', CAPITALIZE), array('id' => 'embed_link', 'class' => "btn btn-success ajax-loader $class", 'data-url' => $load_url, 'data-target' => '#cms_viewer'));
      $embed_button = html_link(site_page_link($siteObj, PAGE_PLUGIN)."?pt={$edit_obj_type}&pid={$edit_obj_id}", html_i('', "fa fa-link")." ".phrase('embed', CAPITALIZE), array('id' => 'embed_link', 'class' => "btn btn-success", 'target' => 'embed'));
      $output .= " ".$embed_button;
    }
  }

  
  if($edit || $embed) $output .= $preview_button;
  $output .= $tutorial_button;
  
  $this_app = new stdClass;
  $app->page = $pageObj;
  $app->site = $siteObj;
  
  $output .= fetch_template($app, ['scope' => $scope]);
  //$output .= "gallery_explore: $obj_type $obj_id";
  return $output;
} 

 

/** unsused - automatic comment added on  */
function gallery_title_text($siteObj, $search, $options=NULL) {
  $obj_type = $search['obj_type'];
  $id       = $search['id'];
  $text = '';
  switch($obj_type) {
    case 'media': // single image from database      
      $obj = $imageObj = get_object($obj_type, $id);


      $year = $imageObj->original_year;
      $h = $imageObj->original_height;
      $w = $imageObj->original_width;
      $currency = $imageObj->original_currency ?: 'EUR';
      $price = $imageObj->original_price;
      
      if($imageObj->name) $text .= html_h3($imageObj->name.($year ? " ($year)" : ''));
      
      $orgArray = array();
      
      if($technique = $imageObj->original_technique) $text .= html_h4($technique);
      if($h > 0 && $w > 0) {
        $h_in = round($h / 2.54);
        $w_in = round($w / 2.54);
        $text .= phrase('height', CAPITALIZE).": ".$h."cm ($h_in\")"." x ".phrase('width', CAPITALIZE).": ".$w."cm ($w_in\")";
      }
      
      $count_str = $price_str = $available_str = $count_str = $dot = '';
      if($currency && $price > 0) $orgArray[]= get_currency_symbol($currency, true).formatFloat($price);
      $count = $imageObj->original_count;
      if($count > 0) $orgArray[]= $count > 1 ? "Series of $count" : "Original of one";    
      $available = $imageObj->original_available;
      $original_help_text = '';
      if($available == DB_YES) {
        $original_help_text = "Interested in the original? Please contact the curator and/or the artist for the latest information about price and availability, both of which may be subject to change.";
        $orgArray[]= 'Original available';
        $dot = html_span('&#x25cf;', 'dot_outside green');
      } elseif($available == DB_NO) {
        $dot = html_span('&#x25cf;', 'dot_outside red');
      } else {
        $dot = '';
      }
  
      $text .= html_div($dot.implode(', ', $orgArray), 'relative');
      
      //if($sd = $imageObj->original_technique ?: $imageObj->short_description) $text .= html_h4($sd);
      if($artist_name) {
        $artistAr = array_filter(array($artist_name,$artist_link,$artist_email));      
        $text .= html_div(phrase('artist', CAPITALIZE).': '.implode(', ', $artistAr));
      }
      if($curator_name) {
        $curatorAr = array_filter(array($curator_name,$curator_link,$curator_email));      
        $text .= html_div(phrase('curator', CAPITALIZE).': '.implode(', ', $curatorAr));
      }
      if($curatorObj) {
        //$text .= html_h4($imageObj->short_description);
      }
      
      if($desc = $imageObj->comment) $text .= html_p($desc);
      if($original_help_text) $text .= html_div($original_help_text, 'margin-top margin-bottom small-text'); 

      break;
    case 'gallery': // single image from database
      $obj = get_object($obj_type, $id);
      $text = html_h2($obj->title);
      $text .= html_p($obj->description);      
      break;
    case 'artist': // single image from database
      $text = user_profile_text($siteObj, $id, $options);
      break;
    default:
      break;
  }
  return $text;      
}

// uploader for new dynatree cms
/** unsused - automatic comment added on  */
function gallery_uploader($galleryObj_or_id, $options = array()) {
  global $u_id, $site_id,$u_level;
  $galleryObj = any2obj('gallery', $galleryObj_or_id);
  $gallery_id = $galleryObj->id;
  
  $class_attrs = get_object_attributes('gallery', false);
  $upload_options = $class_attrs['media'][ATT_LENGTH];
  $upload_options['minimum_size'] = array(1080, 1920); // either short side >= 1080 or long side >= 1920
  $fld = 'media';
  $val = $galleryObj->media;
     
  $mediaData['user_id'] = $u_id ?: $galleryObj->user_id;
  $mediaData['artist_id'] = $galleryObj->user_id;
  $mediaData['parent_id'] = $gallery_id;
  $mediaData['parent_type'] = 'gallery';
  $mediaData['parent_field'] = 'media';

  //$handler_options = array('handler' => 'cms_media_handler', 'handler_operation' => 'new-gallery-folder', 'target' => 'ajax_messages');
  
  $upload_options['download_template'] = $options['download_template'] ?: "";
  
  $upload_options['media_data'] = $mediaData;
  $upload_options['data-value_list'] = $val;
  $upload_options['show_file_list'] = false;
  $upload_options['title'] = "Click or drag to upload digital content";
  //$upload_options['handler'] = 'cms_media_handler';
  
  $handler =isset($options['handler']) ? $options['handler'] : 'refreshActiveNode';
  if($upload_options['handler'] = $handler) {
    $handler_options = array();
    $upload_options['handler_options'] = $handler_options;
  }


  // add edit button to uploader
  $edit_url = "/admin/app_data.php?oper=load-content&site_id=$site_id&user_level=$u_level&user_id=$u_id&obj_type=media&edit=1"; // id will be appended
  $upload_options['edit_url'] = $edit_url;
  $upload_options['edit_target'] = '#cms_viewer';

  //dump($upload_options);
  $uploader = jquery_file_uploader("gallery-$gallery_id-$fld", $val, $upload_options);
  //$uploader = fine_uploader("gallery-$gallery_id-$fld", $val, $upload_options);
  return $uploader;
}

function gallery_auth_media($obj_type, $obj_or_id, $user_id) {  
  global $u_level;
  $obj = any2obj($obj_type, $obj_or_id);
  if($obj->user_id == $user_id) return true;
  $auth_edit = false;
  $user_level = $u_level ?: get_object('user', $user_id, 'level');
  $is_staff   = $user_level >= USER_LEVEL_STAFF;
  $is_admin   = $user_level >= USER_LEVEL_ADMIN;
  if($is_staff || $is_admin) return true;
  $is_curator = $user_id && user_has_role($user_id, USER_ROLE_CURATOR);
  $is_artist = $user_id && user_has_role($user_id, USER_ROLE_ARTIST);

  switch($obj_type) {
  case 'media':
      
    // temp: todo - mayday, hack for now to let all edit
    return true;
    
    $owner_id = $obj->user_id;
    $artist_id = $obj->artist_id;
    $is_owner   = $user_id && $owner_id && $owner_id == $user_id;
    $is_artist  = $user_id && $artist_id && $artist_id == $user_id;              
    $auth_edit = $is_staff || $is_owner || $is_artist ? 1 : 0;
    
    break;
  case 'gallery':
    $auth_edit = $obj->user_id == $user_id;
    break;
  case 'media_collection':
    $auth_edit = $obj->user_id == $user_id;
    break;
  case 'media_collection_map':
    $collection_user_id = get_object('media_collection', $obj->media_collection_id, 'user_id');
    $auth_edit = $collection_user_id == $user_id;
    break;
  default:
    break;
  }

  return $auth_edit;
}

function gallery_create_button($siteObj_or_id, $userObj_or_id, $options=NULL) {
  $siteObj = any2obj('site', $siteObj_or_id);
  $userObj = any2obj('user', $userObj_or_id);
  $data = array('site_id' => $siteObj->id, 'user_id' => $userObj->id);
  $folder_tip = "You must create folders in your studio in order to upload and organize your art into vPatina";
  $shared_tip = "You must create shared folders in order to share art with the galleries you collaborate with.";

  /**
  Share your digital editions with curators, or choose to display them<br>
                 on your profile page, by creating a shared folder and dragging your<br>
                 digital editions into it."; // phrase("text_cms_shared_folder_help")
                 */
                 
  $exhibit_tip = "You must create exhibition folders in order to create exhibitions that can be embedded on any website of your choice";
  /**
  Curate exhibitions, featuring a range of artists, by dragging<br>
                  digital editions to an Exhibition folder. These exhibitions can be<br>
                  imbedded on any website of your choice. "; // phrase("text_cms_exhibition_help")
                  */
                  
  if(user_has_role($userObj, USER_ROLE_ARTIST))  $items[] = html_link('#', html_span(' ', 'fontello icon-folder').phrase('folder', CAPITALIZE), array('class' => 'cms-create', 'id' => 'cms_create_folder', 'data-obj_type' => 'gallery', 'data-site_id' => $siteObj->id, 'data-user_id' => $userObj->id))." ".html_tooltip($folder_tip, "help");
  if(user_has_role($userObj, USER_ROLE_ARTIST))  $items[] = html_link('#', html_span(' ', 'fontello icon-export-2').phrase('shared_folder', CAPITALIZE), array('class' => 'cms-create', 'id' => 'cms_create_project', 'data-obj_type' => 'media_collection', 'data-type' => MEDIA_COLLECTION_TYPE_PROJECT, 'data-site_id' => $siteObj->id, 'data-user_id' => $userObj->id))." ".html_tooltip($shared_tip, "help");
  if(user_has_role($userObj, USER_ROLE_CURATOR)) $items[] = html_link('#', html_span(' ', 'fontello icon-picture').phrase('exhibition', CAPITALIZE), array('class' => 'cms-create', 'id' => 'cms_create_exhibition', 'data-obj_type' => 'media_collection', 'data-type' => MEDIA_COLLECTION_TYPE_EXHIBITION, 'data-site_id' => $siteObj->id, 'data-user_id' => $userObj->id))." ".html_tooltip($exhibit_tip, "help");
                                                                                                                                                                                                                                                                                
  //  $items[] = html_link($link, phrase('my_vault', CAPITALIZE));


  $menu = html_ul($items);
  

  $output = html_link('#', html_i('', 'fa fa-upload margin-right').phrase('create', CAPITALIZE), array('id' => 'cms-create-button', 'class' => 'btn btn-success toggle-div dropdown', 'data-toggle' => 'gallery-create-menu', 'title' => 'foo bar'));

  $output .= html_div($menu, 'user-menu ztop click_hide', "id='gallery-create-menu'");
  return html_div($output, 'user-info');
}

/** end new functions for template based layout */


// custom object_form() version for artwork
/** unsused - automatic comment added on  */
function gallery_media_form($siteObj, $obj=null, $options = array()) {
  $obj_type = 'media';
  
  // fields
  $fields = array(
    'name' => 'Title *', 
    'original_technique' => 'Technique *', 
    'digital_price' => 'Price of digital edition', 
    'original_height' => 'Height of original (cm)', 
    'original_width' => 'Width of original (cm)', 
    'original_year' => 'Year of creation', 
    'original_count' => 'Number in series', 
    'original_available' => 'Available',
    'original_price' => 'Price of original work', 
    // 'original_url' => 'URL of original work', 
    'comment' => 'Description of artwork', 
    );
  //$attr_fields = attribute_fields($fields);

  $tip = "Add information to the artwork such as availability and the price of the original. 
          To release High Definition digital editions to collectors, set a price for the digital edition above 0.00.
          If the digital edition price is set to 0.00, the High Definition digital edition is restricted (not released to collectors).<br>";
  
  $editOptions['title'] = $obj ? phrase('edit', CAPITALIZE)." $obj->name" : phrase('add_artwork', CAPITALIZE);
  $editOptions['tip'] = $tip;
  $editOptions['fields'] = $fields;
  $editOptions['autosave'] = true;

  $help_text = html_p("Please note fields marked with an * are mandatory");
  $tc_link = html_link("/terms-and-conditions/", "Terms and Conditions");
  $cl_link = html_link("/digital-collector-license/", "Digital Collector License");
  $fp_link = html_link("/fee-payment-schedule/", "Fee & Payment Schedule");
  
  $help_text .= html_p("The sale of digital editions is governed by the $tc_link, the $cl_link and the $fp_link. High Definition digital editions will are a maximum of 1920 x 1080 pixels and Medium Definition digital editions are a maximum of  640 x 640 pixels.");

  global $u_level,$u_id;
  $site_id = $siteObj->id;
  $media_id = $obj->id;
  $load_url = "/admin/app_data.php?oper=load-content&site_id=$site_id&user_level=$u_level&user_id=$u_id&obj_type=media&id=$media_id";      
  $preview_button = html_div(html_link("#", html_i('', "fa fa-check")." ".phrase('save', CAPITALIZE), array('class' => 'ajax-loader', 'data-url' => $load_url, 'data-target' => '#cms_viewer')));

  return html_div($preview_button, 'margin-top').object_form($obj_type, $obj, $editOptions).html_div($help_text);
}


/** used by cms dynatree - called from app_data.php?oper=update-tree */



function gallery_user_link($siteObj, $userObj_or_id=NULL, $options=NULL) {
  $role = $options['role'];
  $user_type = $role ? get_object('user_role', $role, 'name') : 'user';
  //echo("role=$role ut=$user_type<br>");
  $base_link = $options['base_link'] ?: site_page_link($siteObj, PAGE_GALLERY, array('search' => array('object_type' => 'user', 'object_subtype' => $role))); // e.g '/art/artists/'
  $profileObj = $userObj_or_id ? find_user_profile($userObj_or_id) : NULL;
  if(!$profileObj) return $base_link;    
  return $base_link.url_safe($profileObj->display_name ?: $user_type)."-$profileObj->user_id/";
}

function gallery_vault_link($siteObj, $userObj_or_id, $options=NULL) {
  $vaultPage = site_find_pagetype($siteObj, 'Vault', $_SESSION['lang']);
  if($options['base_link'] = $vaultPage->path) return gallery_user_link($siteObj, $userObj_or_id, $options);
  return '';
}

// link to an artist (gallery) or all artists
function gallery_artist_link($siteObj, $userObj_or_id=NULL, $options=NULL) {
  $options['role'] = USER_ROLE_ARTIST;
  return gallery_user_link($siteObj, $userObj_or_id, $options);
}

// link to an curator (gallery) or all curators
function gallery_curator_link($siteObj, $userObj_or_id=NULL, $options=NULL) {
  $options['role'] = USER_ROLE_CURATOR;
  return gallery_user_link($siteObj, $userObj_or_id, $options);
}

// link to a media_collection (set) or all sets
function gallery_collection_link($siteObj, $collectionObj_or_id=NULL, $options=NULL) {
  $collectionObj = $collectionObj_or_id ? any2obj('media_collection', $collectionObj_or_id) : NULL;
  $base_link = $options['base_link'] ?: site_page_link($siteObj, PAGE_GALLERY, array('search' => array('object_type' => 'media_collection', 'object_subtype' => $collectionObj->type ?: $options['type']))); // e.g. '/art/project/'
  if(!$collectionObj) return $base_link;  
  return $base_link.($collectionObj->title ? url_safe($collectionObj->title) : 'exhibition')."-$collectionObj->id/";
}

// link to a folder (gallery)                                     
function gallery_folder_link($siteObj, $galleryObj_or_id, $options=NULL) {
  $base_link = $options['base_link'] ?: site_page_link($siteObj, PAGE_GALLERY, array('search' => array('object_type' => 'gallery'))); // e.g. '/art/project/'
  $galleryObj = any2obj('gallery', $galleryObj_or_id);
  return $base_link.($galleryObj->title ? url_safe($galleryObj->title) : 'project')."-$galleryObj->id/";
}


// link to an image (media)
function gallery_media_link($siteObj, $mediaObj_or_id, $options=NULL) {
  $base_link = $options['base_link'] ?: site_page_link($siteObj, PAGE_GALLERY, array('search' => array('object_type' => 'media'))); // e.g. '/art/project/'
  $mediaObj = any2obj('media', $mediaObj_or_id);
  return $base_link.($mediaObj->title ? url_safe($mediaObj->title) : 'image')."-$mediaObj->id/";
}

// show list of galleries (folders)
function gallery_folder_list($siteObj_or_id, $userObj_or_id=NULL, $options=NULL) {  
  $siteObj = any2obj('site', $siteObj_or_id);
  if(!is_array($options) && strlen($options)) $options = json_decode($options, true); // from app_data.php
  
  $user_id = is_object($userObj_or_id) ? $userObj_or_id->id : $userObj_or_id;

  $options['obj_type'] = 'gallery';

  //echo(dump($options, true));die();  
  $trash = $options['trash']; // show recycle bin ?

  if($user_id) $search['user_id'] = $user_id;
  $search['site_id'] = $siteObj->id;
  $search['active'] = $trash ? 0 : 1;
  $options['search'] = $search;
  

  $search = $options['search'];
  $auth_edit = $options['auth_edit'];
  
  //dump($search);
  if($auth_edit && $options['format'] != 'json') $trash_div = gallery_trash('gallery', $search, $trash, $title);    
  
  //$title = html_h3($title, 'content_subtitle');
  $output = gallery_object_list($siteObj, $options);
  if($trash_div) $output = $trash_div.$output;
  return $output;
}


// show list of curators
function gallery_curator_list($siteObj_or_id, $user_ids = array(), $options='') {
  $siteObj = any2obj('site', $siteObj_or_id);
  $options['size'] = $options['size'] ?: 'square';
  $options['role'] = USER_ROLE_CURATOR;
  $options['collection_type'] = MEDIA_COLLECTION_TYPE_EXHIBITION;
  return gallery_user_list($siteObj, $user_ids, $options);
}

// show list of curators
function gallery_artist_list($siteObj_or_id, $user_ids = array(), $options='') {
  $siteObj = any2obj('site', $siteObj_or_id);
  $options['size'] = $options['size'] ?: 'square';
  $options['role'] = USER_ROLE_ARTIST;
  $options['collection_type'] = MEDIA_COLLECTION_TYPE_PROJECT;
  return gallery_user_list($siteObj, $user_ids, $options);
}


  // show list of users
function gallery_user_list($siteObj_or_id, $user_ids = array(), $options='') {  

  $siteObj = any2obj('site', $siteObj_or_id);
  if(!is_array($options) && strlen($options)) $options = json_decode($options, true); // from app_data.php
  $auth_edit = $options['auth_edit'];
  $role = $options['role'];
  $site_id = $siteObj->id;

  //return "site_id=$siteObj_or_id options=".dump($options,true);
  //dump($options);

  $options['obj_type'] = 'user';
  if($base_link = gallery_user_link($siteObj, 0, array('role' => $role))) $options['base_link'] = $base_link;
    
  if(!$user_ids) { // find users
    if($role = $options['role']) {
      $role_name = get_object('user_role', $role, 'name');
      if($auth_edit || $options['show_all']) { // show all
        $aSearch[DB_LOGICAL_OR] = array('site_id' => $site_id, 'auth_sites' => "*$site_id*", 'user_level' => USER_LEVEL_SYSTEM);
        $aSearch['active'] = 1;
        $aSearch['roles'] = array('&', $role);
        $tbl = get_object_table('user');
        $user_ids = find_objects('user', $aSearch, array('fields' => "{$tbl}.id"));  
        //dump($user_ids);
      } elseif($collection_type = $options['collection_type']) {  // show only those with content
        $user_ids = find_objects('media_collection', array('type' => $collection_type, 'active' => 1, 'site_id' => $siteObj->id), array('fields' => 'distinct user_id'));
      }
      
      if($role == USER_ROLE_ARTIST && ($auth_edit || $options['show_all'])) { // also show artists who didn't publish yet
        $user_ids2 = find_objects('gallery', array('active' => 1, 'site_id' => $siteObj->id), array('fields' => 'distinct user_id'));
        //dump($user_ids2);
        $user_ids = array_unique(array_merge($user_ids, $user_ids2)); 
        //dump($user_ids);
      }
    }
  }
  
  if($user_ids) {
    $profileObjs = find_objects('user_profile', array('user_id' => $user_ids, 'site_id' => $site_id), array('sort' => 'rank'));
    if($options['return'] == 'object') return $profileObjs;
  
    $user_count = count($user_ids);
    $profile_count = count($profileObjs);
    //echo("Found $profile_count profiles for $user_count $role_name<br>");                                     
    $options['obj_type'] = 'user';
    $options['search_obj_type'] = 'gallery';
    $options['objects'] = $profileObjs;
    //dump($options);
  }

  return gallery_object_list($siteObj, $options);
}

// unified function for displaying HTML of users, collections, or images
// replaces (for HTML) site_gallery, gallery_user_list, site_gallery_list, gallery_collection_list
function gallery_object_list($siteObj, $options='') {
  global $__header;
  $obj_type  = $options['obj_type'];  
  $search    = $options['search'];
  $base_link = $options['base_link'];
  $auth_edit = $options['auth_edit'];
  $no_list   = $options['no_list'];  
  $obj_subtype = $options['obj_subtype'];
  $link_only = $options['link_only'];
  $object_only = $options['object_only'];
  $show_link  = isset($options['show_link']) ? $options['show_link'] : true;  
  
  $viewer    = pick_first($_GET['viewer'], $options['viewer'], $_SESSION['gallery_viewer'], 'html');
  $format    = pick_first($_GET['format'], $options['format'], $_SESSION['gallery_format'], 'list');
  if($link_only || $object_only) {
    $format = 'json';
    // echo("format = $format");    
    // dump($options);
  }
  
  //dump($options);
  if(in_array($viewer, array('galleria', 'fancybox'))) {
    //return "gh: viewer=$viewer".dump($options, true);
    return site_gallery($siteObj, $options);
  } 
  if(!in_array($format, array('icons', 'compact', 'list', 'json', 'image'))) $format = $options['format'] = 'list';

  if($viewer== 'html' && in_array($format, array('icons', 'compact', 'list')) && !$options['no_session']) { // don't mess with session variables (format/viewer) when called from site_gallery
    $_SESSION['gallery_format'] = $format;
    $_SESSION['gallery_viewer'] = $viewer;
  }

  //echo("<br>gol: viewer=$viewer format=$format<br>");
  
  // the context of this list
  if($parent_obj_type = $options['parent_obj_type'] ?: $search['parent_type']) {
    $parent_id = $options['parent_id'] ?: $options['id'];
    $parent_obj_subtype = $options['parent_obj_subtype'];
    $parentObj = $options['parent_obj'];
    if(!$parentObj && $parent_id) $parentObj = get_object($parent_obj_type, $parent_id);
  }
  
  if(!$obj_type) return "gallery_object_list: no object type";
  if(isset($options['objects'])) { // list of objects
    $objects = $options['objects'];
    //echo("There are ".count($objects)." $obj_type".html_break());
  } elseif($search) {
    //dump($search);
    $objects = find_objects($obj_type, $search, $options);
    //dump($objects);
  } else {
    $errors[] =  "gallery_object_list: no objects or search";
  }

  $result_id = $options['store_result'];
  if($obj_type && $objects && $result_id) { // store in data tag for retrieval later (used for paging in explorer)
    $output .= gallery_store_result($site_id, $result_id, $objects, $obj_type, $obj_subtype);
  }
  
  /*
  $rating = feedback_stars($imageObj->title, $imageObj->rating ?: 10, $imageObj->rating_count ?: 10, array('stars_only' => true));
  $rating = '';
  $rating = feedback_stars($imageObj->title, $imageObj->rating ?: 10, $imageObj->rating_count ?: 10, array('stars_only' => true));
  $rating = '';
  $rating = feedback_stars($imageObj->title, $imageObj->rating ?: 10, $imageObj->rating_count ?: 10);
  $rating = '';
  */
  //die("gh ot=$obj_type".dump($options, true));

  switch($obj_type) {
  case 'user':
    $role = $options['role'];
    if(!$role) $errors[] = "gallery_object_list: no user role";
    $count_type = $role == USER_ROLE_ARTIST ? 'project' : 'exhibition';

    //dump($imageObjSearch);
    $pageSearch = array('object_type' => 'user', 'object_subtype' => $role);
    $edit_fields = '"address.first_name", "address.last_name", "address.display_name", "address.city", "address.country", "photo"';
    $edit_fields = '"first_name", "last_name", "display_name", "city", "country", "photo"';
    $edit_obj_type = 'user_profile';
    break;
  case 'gallery':
    $pageSearch = array('object_type' => 'gallery');
    $count_type = 'image';
    $edit_fields = '"title", "description", "image", "media"';
    if($auth_edit && !$options['trash'] && $parent_obj_type == 'user' && $parentObj) {
      $artist_id = $parentObj->id;
      $handler_options = array('handler' => 'new_media_handler', 'handler_operation' => 'new-gallery-folder', 'target' => 'ajax_messages');
      $buttons[] = html_link("#", html_i('', "fa fa-folder")." ".phrase('new', CAPITALIZE).' '.phrase('folder'), array('data-options' => json_encode($handler_options), 'class' => 'btn btn-success add_object', 'data-form_class' => 'fieldset_left_wide', 'data-obj_type' => "gallery", 'data-fields' => '["site_id", "user_id", "type", "title", "description", "title_image"]', 'data-data' => '{"site_id": "'.$siteObj->id.'", "user_id": "'.$artist_id.'"}'));
    }
    break;
  case 'media_collection':
    $pageSearch = array('object_type' => 'media_collection', 'object_subtype' => $obj->type ?: $options['type']);
    $count_type = 'image';
    if($auth_edit && $obj_subtype) {
      $collection_type = $obj_subtype;
      $collection_type_name = get_object('media_collection_type', $obj_subtype, 'name');

      $artist_id = $parentObj->id;
      $art_link = html_link(gallery_vault_link($siteObj,  $parentObj->id), "your vault");
      $help_text = "To add images to your $collection_type_name, go to $art_link, add a folder with some images, and publish it to a project for others to see.";

      $handler_options = array('handler' => 'new_media_handler', 'handler_operation' => 'new-media-collection', 'target' => 'ajax_messages', 'dialog_title' => phrase('new', CAPITALIZE).' '.$collection_type_name, 'obj_type' => 'media_collection');
      $buttons[] = html_link("#", html_i('', "fontello icon-picture")." ".phrase('new', CAPITALIZE).' '.phrase($collection_type_name), array('data-options' => json_encode($handler_options), 'class' => 'btn btn-success margin_bottom add_object', 'data-form_class' => 'fieldset_left_wide', 'data-obj_type' => "media_collection", 'data-fields' => '["site_id", "user_id", "type", "title", "description", "title_image"]', 'data-data' => '{"site_id": "'.$siteObj->id.'", "type": "'.$collection_type.'", "user_id": "'.$artist_id.'"}'));
    }
    
    break;
  case 'media_collection_map':
    $pageSearch = array('object_type' => 'media_collection', 'object_subtype' => $obj->type ?: $options['type']);
    $count_type = 'image';    
    switch($parent_obj_type) {
      case 'media_collection':
        if($parent_obj_subtype) {
          $collection_type = get_object('media_collection_type', $parent_obj_subtype, 'name');
          switch($parent_obj_subtype) {
            case MEDIA_COLLECTION_TYPE_PROJECT: 
              $art_link = html_link(gallery_vault_link($siteObj,  $parentObj->user_id), "browse your vault");
              break;
            default:
              $art_link = html_link(gallery_artist_link($siteObj), "browse the artists");
              break;
          }
          $help_text = "To add images to your $collection_type, $art_link, check the checkbox next to images you want to add, then use the menu on top and choose 'Add to'";
        }
        break;
      default:
        break;      
    }
    break;
  case 'media':
    $pageSearch = array('object_type' => 'media');
    $count_type = '';
    $edit_fields = '"name", "short_description", "comment", "user_filename"';    
    break;
  default:                
    $errors[] = "gallery_object_list: unsuported object type $obj_type";    
  }

  // add quick upload button
  //echo("auth=$auth_edit pot=$parent_obj_type pid=$parent_id<br>");
  if($auth_edit && $parent_obj_type == 'gallery' && $parent_id && !$options['trash']) {
    $galleryObj = $parentObj;
    $gallery_id = $parent_id;
    
    $class_attrs = get_object_attributes('gallery', false);
    $upload_options = $class_attrs['media'][ATT_LENGTH];
    
    $fld = 'media';
    $val = $galleryObj->$fld;
    
    $mediaData['user_id'] = $galleryObj->user_id; // means that images are stored in separate directory per user
    $mediaData['parent_id'] = $gallery_id;
    $mediaData['parent_type'] = 'gallery';
    $mediaData['parent_field'] = $fld;

    $upload_options['media_data'] = $mediaData;
    $upload_options['data-value_list'] = $val;
    $upload_options['show_file_list'] = false;
    $upload_options['title'] = "Click or drag to upload media";
    $upload_options['handler'] = 'new_media_handler';
    $upload_options['handler_options'] = $options;

    //dump($upload_options);
    $uploader = jquery_file_uploader("gallery-$gallery_id-$fld", $val, $upload_options);
  }
    
  if(!$objects) {
    if($format == 'json' || $object_only || $link_only) return array();
    $output .= $title.html_h3('['.phrase('empty', CAPITALIZE).']', 'content_subtitle');
    if($auth_edit && $help_text) $output .= $help_text;
    //$output .= $uploader;
    //return $output;
  }
        
  $base_link = $base_link ?: $options['base_link'] ?: site_page_link($siteObj, PAGE_GALLERY, array('search' => $pageSearch)); // e.g. '/art/project/'

  if($errors) {
    echo(implode(html_break(), $errors));
    dump($options);
    return;
    
  }

  $html = true;
  switch($format) {
    case 'json':
      $html = false;
      break;
    case 'icons':
      $container_class = 'icon_list';
      break;
    case 'compact':
      $container_class = 'compact_list box-drop-shadow';
      break;
    case 'list':
      $item_class = 'border-bottom-light relative';
      $container_class = 'gallery_list box-drop-shadow';
      break;
    default:
      break;
  }      
  if($auth_edit) {
    $container_class .= ' sortable';
    $containerOptions['data-obj_type'] = $obj_type == 'user' ? 'user_profile' : $obj_type;
  }
  
  $jsonObjs = array();
  $artistJson = NULL;
  $profileObjs = array();
  $items = array();
  
  //dump($options);
  
  $i=0;
  $options['count'] = count($objects);
  $options['edit_fields'] = $edit_fields;
  $link = array();
  //dump($options);
  foreach($objects as $obj) {
    $id = $obj->id;
    $item_id = $id;
    $prefix = 'media-item-';

    $options['object'] = $obj;
    $options['index'] = $i;
    
    // parent info is used by navigation (back button) in fancybox/galleria
    if($obj_type == 'media_collection_map') {
      $parent['obj_type'] = 'media_collection';
      $parent['id'] = $obj->media_collection_id;
    } else {
      $parent['obj_type'] = $obj_type;
      $parent['id'] = $id;
    }
    
    $options['parent'] = $parent;
    $imageObj_search_field = $obj_type == 'user' ? 'user_id' : 'id'; // get rid of this hack
    $iid = $obj->$imageObj_search_field;

    // $titleSearch = $obj_type == 'media_collection_map' ? array('obj_type' => 'media', 'id' => $obj->media_id) : array('obj_type' => $obj_type, 'id' => $iid); 
    $titleSearch = array('obj_type' => $obj_type, 'id' => $iid); 
    
    //dump($titleSearch);dump($options);
    //echo("gti: base_link = $options[base_link]<br>");    
    $imageObj = $options['imageObj'] = gallery_title_image($siteObj, $titleSearch, $options); 
    //dump($imageObj);echo("format=$format");die();

    //$links[] = $imageObj->link;
    if(!$show_link) unset($imageObj->link);
    if($format == 'json') $jsonObjs[] = $imageObj;
    else $items[$item_id] = gallery_object_list_item($siteObj, $obj_type, $iid, $options);
    
    $i++;
  }
  //dump($links);
  
  if($jsonObjs) {
    //dump($jsonObjs);
    //mydie("returning ".count($jsonObjs)." json objects");
    return $jsonObjs;
  }
  
  // begin output
  $output .= $title;
  
  // $edit_button = $auth_edit ? html_div(inline_edit_link_old('media', 'gallery', 0), 'ie_edit_link') : '';
  // if($edit_button) $output = html_div($edit_button.$output, 'relative');

  switch($format) {
    case 'json':
      if($jsonObjs) $script = "var data=".json_encode($jsonObjs)."\n";
      if($artistJson) $script .= "var artists=".json_encode($artistJson)."\n";
        $output .= html_div('', $container_class, array('id' => $container_id, 'width' => $w, 'height' => $h)); // place holder for viewer
      break;

    default: // html, list
      if($container_id) $containerOptions['id'] = $container_id;
      if(!$no_list) {
        $containerOptions['item_class'] = $item_class;
        $containerOptions['item_prefix'] = $prefix;
      }
      if(count($buttons)) $output .= html_div(implode("\n", $buttons), 'margin_bottom');      
      //echo("cc=$container_class");
      $output .= $no_list ? html_div(implode("\n", $items), $container_class, $containerOptions) : html_ul($items, $options['list_class'] ?: $container_class, $containerOptions);
      $output .= $uploader;
      //$output .= html_ul($items, $container_class, array('id' => $container_id, 'item_class' => $item_class));
      //$output .= html_div('', 'clear_float');
      break;
  }
}


// returns a (virtual) image objects with information needed to display the title image for artist/project/collection/image
function gallery_title_image($siteObj_or_id, $search, $options=NULL) {
  global $u_id;
  $siteObj = any2obj('site', $siteObj_or_id);
  $site_id = $siteObj->id;
  
  $class    = $options['class'] ?: "vp-loader-$viewer";
  $size     = $options['size'] ?: 'thumb';
  $data     = $options['data'];
  $format   = $options['format'];
  $index    = $options['index'] ?: 0;
  $obj_type = $search['obj_type'] ?: $options['obj_type'];
  $obj      = $options['object'];                             
  $id       = $search['id'] ?: $obj->id;
  $auth_edit = $options['auth_edit']; 
  $base_link = $options['base_link'];
  $link_only = $options['link_only'];
  $full = $options['full'];

  $parent_obj_type = $options['parent']['obj_type'];
  $parent_id       = $options['parent']['id'];
  $parent_index    = $options['parent']['index'] ?: 0;

  $available_dot = '';

  // special case: media_collection_map
  if($obj_type == 'media_collection_map') {
    $obj_type = 'media';
    $id = $obj->media_id;
    $collectionObj = get_object('media_collection', $obj->media_collection_id);
    $collection_id = $collectionObj->id;    
    if($curator_id = $collectionObj->user_id) {
      $curatorObj = get_object('user', $curator_id);
      $curator_email = get_user_email($curatorObj);
      $curator_name = get_display_name($curatorObj);
    }
    $obj = get_object('media', $id);
  }
  
  $search['obj_type'] = $obj_type;  
  $debug = false;               
  $count = 0;
  
  //echo("gti: ot=$obj_type id=$id<br>".dump($search, true));
  
  switch($obj_type) {
    case 'media': // single image from database
      $base_link = $options['base_link'];
      //echo("bl=$base_link<br>");
      if(!$base_link) $artwork_link = site_page_link($siteObj, PAGE_GALLERY, array('search' => array('object_type' => 'media'))); // e.g. '/art/project/'
      $link = $base_link ? "$base_link?mid=$id" : $artwork_link.($imageObj->title ? url_safe($imageObj->title) : 'image')."-$id/";
      //echo("gh-link=$link<br>");
      //if($auth_edit) $edit_link = $link;
      
      if($options['link_only']) return $link;
      $media_id = $id;
      $mediaObj = $obj ?: get_object('media', $id);
      
      //if($options['obj_type'] == 'media_collection_map') {
      //  $map_id = $options['id'];
      //  $mapObj = $obj ?: get_object('media_collection_map', $map_id);
      //  $media_id = $mapObj->media_id;
      //  $mediaObj = get_object('media', $media_id);
      //} else {      
      //}
      
      $db_key = $options['db_key'] ?: 'src';
      $photo_url = $src = $mediaObj->$db_key;
      
      //$photo_url = array_pop(explode('/', $path));
      //$directory = $path;

      $available = $mediaObj->original_available;
      if($available == DB_YES) {
        $available_dot = html_span('&#x25cf;', 'green').' ';
      } elseif($available == DB_NO) {
        $available_dot = html_span('&#x25cf;', 'red').' ';
      } else {
        $available_dot = '';
      }

      $directory = $mediaObj->path;
      $title     = $mediaObj->name; // ?: phrase('no_title');
      $short_desc = $mediaObj->short_description;
      
      if($short_desc) {
        //$title .= ": $short_desc"; 
      } 
      
      $description  = gallery_photo_info($mediaObj, $options['info_fields']);
      $gallery_id   = $options['gallery_id'];  
      $gallery_name = $options['gallery_name'];       
      $artist_id    = $options['artist_id']; 
      $artist_name  = $options['artist_name'];      
      $hide_count = true;
      $full_src = $_SERVER['DOCUMENT_ROOT'].$directory.($mediaObj->resize ? "full/" : "").$src;
      //dump($options);dump($mediaObj);echo("full=$full_src<br>");die();
      if(!is_file($full_src)) {
        $use_base = true; // hack for now for properties
        $error = "Media $id not found".html_break()."Dir=$full_src";
        //dump($options);
        //dump($mediaObj);
      }
      $obj = $mediaObj;
    
      break;

    case 'media_collection':
      $collection_id = $id;
      if(!$id) {
        mydie("collection_title_image: type=collection no id");
      }
      $collectionObj = $obj ?: get_object('media_collection', $id);
      $title = $collection_name = $collectionObj->title; // ?: phrase('no_title', CAPITALIZE);
      if(!$collectionObj) mydie("Collection $collection_id not found");       
      $alt = $collectionObj->title ?: "Collection $collection_id";
      $artist_id = $user_id = $collectionObj->user_id;
      if(!$user_id) mydie("Gallery has no owner");
      $userObj = get_object('user', $collectionObj->user_id);
      $link = gallery_collection_link($siteObj, $collectionObj, array('base_link' => $options['base_link']));
      if($options['link_only']) return $link;

      $count_type_singular = 'image';
      $count_type_plural = 'images';

      $media_search['media_collection_id'] = $collectionObj->id;
      if(!$auth_edit) $media_search['active'] = 1;
      $mediaMapObjs = find_objects('media_collection_map', $media_search);
      $count = count($mediaMapObjs);

      if($title_image = $collectionObj->title_image) {
        $photo_url = print_media($title_image, array('source_only' => true, 'size' => $options['size']));
        $directory = '';  
      } elseif($count) {
        $first_media_id = $mediaMapObjs[0]->media_id;
        $mediaObj = get_object('media', $first_media_id);
        //dump($mediaMapObjs);
        //dump($mediaObj);
        $directory = $mediaObj->path;
        $photo_url = $mediaObj->src;
        //$directory = "/user/images/$artist_user_id/$galleryObj->id/";
        //$photo_url = find_object('media', $media_search, 'src');
      } else {
        $directory = "";
        $photo_url = '/images/icons/gallery-64.png';
      }

      break;
      
    case 'gallery':                           
      $gallery_id = $id;
      if(!$id) {
        dump($options);
        mydie("gallery_title_image: type=gallery no id");
      }
      $galleryObj = $obj ?: get_object('gallery', $gallery_id);
      $title = $gallery_name = $galleryObj->title; // ?: phrase('no_title', CAPITALIZE);
      if(!$galleryObj) mydie("Gallery $gallery_id not found");       
      $alt = $galleryObj->title ?: "Gallery $gallery_id";
      $artist_id = $user_id = $galleryObj->user_id;
      if(!$user_id) mydie("Gallery has no owner");
      $userObj = get_object('user', $galleryObj->user_id);
      $link = gallery_folder_link($siteObj, $galleryObj, array('base_link' => $options['base_link']));
      if($options['link_only']) return $link;

      $count_type_singular = 'image';
      $count_type_plural = 'images';

      $media_search['parent_type'] = 'gallery';
      $media_search['parent_id'] =  $gallery_id;
      $media_search['active'] = 1;
      $count = count_objects('media', $media_search);
      //echo(dump($media_search, true)." count = $count");
      if($title_image = $galleryObj->image) { // does this gallery have a custom image
        $photo_url = print_media($title_image, array('source_only' => true, 'size' => $options['size']));
        $directory = '';  
      } else if($mObj = find_object('media', $media_search)) { // use first image of gallery (as returned by site_gallery_item)
        $mediaObj = $mObj;
      }
      $title_link = html_link("#", html_div('', 'mini-sprite-32 s3'), array('title' => "View project $title", 'js' => "data-search='".json_encode(array('obj_type' => 'gallery', 'id' => $id, 'parent_index' => $index))."'", 'class' => $class)).' ';  

      if($artist_id) {
        if(!$artist_name) {
          $profileObj = $obj ?: find_object('user_profile', array('user_id' => $user_id));
          $artist_name = $profileObj->display_name ?: get_name_string($profileObj);
        }  
      }

      // catchall
      if(!$photo_url || !file_exists($_SERVER['DOCUMENT_ROOT'].$directory.$photo_url)) {
        //echo("couldn't find ".$_SERVER['DOCUMENT_ROOT'].$directory.$photo_url.html_break());
        $photo_url = '/images/icons/gallery-64.png';
        $directory = '';          
      }
      
      break;

    case 'user':
      $profileObj = $obj ?: find_object('user_profile', array('user_id' => $id));
      //dump($search);die("Gh user_id = $user_id");
      //dump($profileObj);
      $count_type = 'media_collection';

      $gallerySearch['user_id'] = $artist_id = $user_id = $id;  // todo: add artist object ?
      if(!$auth_edit) $gallerySearch['active'] = 1;
      $collectionSearch = $gallerySearch;
      
      $alt = $profileObj->display_name;
      $title = $artist_name = $profileObj->display_name ?: get_name_string($profileObj);
      $role = $options['role']; // ?: get_object('user', $user_id, 'roles');
      $link = gallery_user_link($siteObj, $user_id, array('base_link' => $base_link)); 
      if($options['link_only']) return $link;

      //$link = "?obj_type=artist&id=$artist_id";
      //echo("role=$role<br>");
      switch($role) {
        case USER_ROLE_ARTIST:
          $count_type_singular = 'project';
          $count_type_plural = 'projects';
          $collectionSearch['type'] = MEDIA_COLLECTION_TYPE_PROJECT;
          break;
        case USER_ROLE_CURATOR:
          $count_type_singular = 'exhibition';
          $count_type_plural = 'exhibitions';
          $collectionSearch['type'] = MEDIA_COLLECTION_TYPE_EXHIBITION;
          break;
        default:
          break;
      }
      $count_search = search2filters($collectionSearch);
        
      if($photo_url = print_media($profileObj->photo, array('source_only' => true, 'size' => $options['size']))) { // use artist profile photo
        $directory = ''; // "";
        //echo("purl=$photo_url");
        //echo("profile=$profileObj->display_name pp=$profileObj->photo size=$options[size] url=$photo_url<br>");
        //die("artist has profile pic: dir=$directory url=$photo_url");
      } else if($galleryObj = find_object('gallery', $gallerySearch)) { // find first gallery
        //dump($galleryObj);die();
        $titleImageSearch = array('obj_type' => 'gallery', 'id' => $galleryObj->id);
        //dump($titleImageSearch);die();
        if($photo_url = gallery_title_image($siteObj, $titleImageSearch, array('object' => $galleryObj, 'source_only' => true))) {
          $directory = "/user/images/$user_id/$galleryObj->id/";      
        }
      }
      // catchall
      if(!$photo_url || (!is_url($photo_url) && !file_exists($_SERVER['DOCUMENT_ROOT'].$directory.$photo_url))) {
        //echo("couldn't find ".$_SERVER['DOCUMENT_ROOT'].$directory.$photo_url.html_break());
        $photo_url = '/images/png/user_profile_pic_225.png';
        $directory = '';          
      }
      $title_link = html_link("#", html_div('', 'mini-sprite-32 s3'), array('title' => "View projects by $artist_name", 'js' => "data-search='".json_encode(array('obj_type' => 'artist', 'id' => $artist_id, 'parent_index' => $index))."'", 'class' => $class)).' ';  
      $country = $profileObj->country ? get_object('countries', $profileObj->country, 'name') : '';
      $text = implode(', ', array_filter(array($profileObj->city, $profileObj->region, $country)));
      break;

    default: 
      mydie($obj_type ? "gallery_title_image: unsupported object type $obj_type" : "gallery_title_image: no object type");
      break;
  }
  if($mediaObj && !$artist_id) {
    if($mediaObj->parent_type == 'gallery' && $mediaObj->parent_id) $artist_id = get_object('gallery', $mediaObj->parent_id, 'user_id');
    // $artist_id = $mediaObj->user_id;
  }
  
  if($artist_id && !$artist_name) {
    $profileObj = find_object('user_profile', array('user_id' => $artist_id));
    $artist_name = $profileObj->display_name ?: get_name_string($profileObj);
  }
  
  if($options['source_only']) return $photo_url;

  if(!$count) $count = $count_type && $count_search ? get_objects_count($count_type, $count_search) : 0;
  if(!isset($options['use_path'])) $options['use_path'] = true; 
  
  if(!$mediaObj) {
    $mediaObj->path = $directory;
    $mediaObj->src = $photo_url;
  }
  $imageObj = gallery_image_object($siteObj, $mediaObj, $options);

  //$imageObj->small_src = 'http://www.suntrek.org/images/image-solar-surface-below05.gif';
  //echo("Title=$title bl=$base_link link='$link' <br>");      
  //dump($options);
  //dump($imageObj);die();
  
  if($mediaObj) {
    $copy_fields = array('original_year','original_height','original_height','original_url','original_technique',
      'original_width','original_count','original_available',
      'original_currency','original_price',
      'digital_currency', 'digital_price');
    foreach($copy_fields as $k) $imageObj->$k = $mediaObj->$k;
  }
  
  $imageObj->obj_type     = $obj_type; 
  $imageObj->id           = $id;
  $imageObj->image        = $imageObj->big_src; 
  $imageObj->href         = $use_base ? $imageObj->base_src : $imageObj->medium_src;
  $imageObj->artist_name  = $artist_name;
  $imageObj->artist_id    = $artist_id;
  $imageObj->gallery_id   = $artist_id;
  $imageObj->gallery_name = $gallery_name;
  $imageObj->available    = $available_dot;
  $imageObj->title        = $title;
  $imageObj->short_description  = $short_desc;
  $imageObj->description  = $description;
  $imageObj->text         = $text;
  $imageObj->link         = $link;
  $imageObj->error        = $error;
  if(!$hide_count) {
    $imageObj->count        = $count;
    $imageObj->count_string = $count.' '.($count == 1 ? phrase($count_type_singular ?: $count_type) : phrase($count_type_plural ?: $count_type.'s'));
  }
  //dump($imageObj);
  switch($parent_obj_type) {
    case 'gallery':
      $back_link = html_link("#", html_i('', 'fa fa-arrow-circle-left fa-2x'),  array('title' => "Back to $artist_name", 'js' => "data-search='".json_encode(array('obj_type' => 'artist', 'id' => $artist_id, 'index' => $parent_index))."'", 'class' => $class)).' ';  
      break;
    case 'artist':
      $back_link = html_link("#", html_i('', 'fa fa-arrow-circle-left fa-2x'),  array('title' => phrase('all_artist', CAPITALIZE), 'js' => "data-search='".json_encode(array('site_id' => $siteObj->id, 'index' => $parent_index))."'", 'class' => $class)).' ';
      break;
    case 'media_collection':
      $collection_id = $parent_id;
      $collectionObj = get_object('media_collection', $collection_id);
      if($collectionObj->type == MEDIA_COLLECTION_TYPE_EXHIBITION) $curator_id = $collectionObj->user_id;
      break;
      
    default: // all artists
      $back_link = '';
      break;
  }

  if($options['show_navigation']) {
    $title = $imageObj->available.$title;
    $org_currency = $mediaObj->original_currency;
    $org_price = $mediaObj->original_price;            
    $org_technique = $imageObj->original_technique;
    if($org_currency && $org_price > 0) {
      $price_str = get_currency_symbol($org_currency, true).formatFloat($org_price);
      $title .= " ($price_str)";
    }
    if($org_technique) $title .= " - $org_technique";
    if($artist_name) $title .= " - $artist_name";
    if($curator_name && $curator_email) $title .= "<br>Curator: <a href='mailto:$curator_email'>$curator_name</a>";


    if($title) $nav_text = html_div($title, 'gallery-nav-title');
    if($short_desc) $nav_text .= html_div($short_desc, 'gallery-nav-desc');   
    if($back_link) $nav_buttons .= $back_link;
    if($title_link) $nav_buttons .= $title_link;
    if($_SESSION['dev']) $nav_text .= "<br>session=".session_id(); 

    $loader_class_iframe = 'vp-loader-iframe';
    $loader_class = 'vp-loader-overlay';
    $loader_class_popup = 'vp-loader-popup';

    if($media_id)  {
      if($curator_id) {
        $aff_id = $curator_id;
        $aff_type = 'u';
      } else if($artist_id) {
        $aff_id = $artist_id;
        $aff_type = 'u';
      }
      //$buy_link = site_page_link($siteObj, PAGE_CART, array('full' => true, 'aff_id' => $aff_id, 'aff_type' => $aff_type));
      $about_link = site_page_link($siteObj, PAGE_ABOUT, array('full' => true, 'aff_id' => $aff_id, 'aff_type' => $aff_type));
      if($u_id) {

        $base_link = $options['base_link'];
        if(!$base_link) $artwork_link = site_page_link($siteObj, PAGE_GALLERY, array('search' => array('object_type' => 'media'))); // e.g. '/art/project/'
        $art_link = $base_link ? "$base_link?mid=$id" : $artwork_link.($imageObj->title ? url_safe($imageObj->title) : 'image')."-$obj->id/";
        $art_link = site_full_url($siteObj).$edit_link;
        $edit_link = $art_link;
        
        $edit_debug = " link=$edit_link u_id=$u_id auth_edit=".($auth_edit ? "yes" : "no");
      }

      //$nav_buttons .= html_link("#", html_div('', 'mini-sprite-32 s214', array('style' => 'margin-top:10px;margin-right:10px')), array('title' => phrase('about', CAPITALIZE)." vPatina", 'js' => "data-viewer='$viewer' data-parent='".json_encode(array('obj_type' => $parent_obj_type, 'id' => $parent_id))."' data-search='".json_encode(array('obj_type' => 'site', 'id' => 247))."'", 'class' => $loader_class)).' ';

      $logo = html_image("https://www.vpatina.com/img/vpatina-logo-32.png", 'vPatina', array('height' => 24, 'width' => 24, 'style' => 'margin-top: -10px'));
      $nav_buttons .= html_link("#", $logo, array('title' => phrase('about', CAPITALIZE)." vPatina", 'js' => "data-viewer='$viewer' data-parent='".json_encode(array('obj_type' => $parent_obj_type, 'id' => $parent_id))."' data-search='".json_encode(array('obj_type' => 'site', 'id' => 247))."'", 'class' => $loader_class)).' ';
      if($media_id)      $nav_buttons .= html_link("#", '<i class="fa fa-picture-o fa-2x"></i>', array('title' => "Artwork information", 'js' => "data-viewer='$viewer' data-parent='".json_encode(array('obj_type' => $parent_obj_type, 'id' => $parent_id))."' data-search='".json_encode(array('obj_type' => 'media', 'id' => $media_id))."'", 'class' => $loader_class)).' '; //mini-sprite-32 s41
      if($collection_id) $nav_buttons .= html_link("#", '<i class="fa fa-bank fa-2x"></i>', array('title' => "Exhibition information", 'js' => "data-viewer='$viewer' data-parent='".json_encode(array('obj_type' => $parent_obj_type, 'id' => $parent_id))."' data-search='".json_encode(array('obj_type' => 'media_collection', 'id' => $collection_id))."'", 'class' => $loader_class)).' '; //mini-sprite-32 s41
      if($artist_id)     $nav_buttons .= html_link("#", '<i class="fa fa-paint-brush fa-2x"></i>', array('title' => "Artist information", 'js' => "data-viewer='$viewer' data-parent='".json_encode(array('obj_type' => $parent_obj_type, 'id' => $parent_id))."' data-search='".json_encode(array('obj_type' => 'user', 'id' => $artist_id))."'", 'class' => $loader_class)).' '; // 'mini-sprite-32 s34'
      if($curator_id)    $nav_buttons .= html_link("#", '<i class="fa fa-eye fa-2x"></i>', array('title' => "Curator information", 'js' => "data-viewer='$viewer' data-parent='".json_encode(array('obj_type' => $parent_obj_type, 'id' => $parent_id))."' data-search='".json_encode(array('obj_type' => 'user', 'id' => $curator_id))."'", 'class' => $loader_class)).' '; // 'mini-sprite-32 s213'

      $buy_link = "http://www.vpatina.com/login/?_aid=$aff_id&ref=%2Fmyvpatina%2F%3F_aif%3D".$media_id."%26_aid%3D".$aff_id."&".time()."-".rand(1,1000);; /** todo: fix this */
      if($buy_link) {
        $download_title = phrase('follow', CAPITALIZE);
        //$nav_buttons .= html_link('#', '<i class="fa fa-star-o fa-2x"></i>', array('data-url' => $buy_link."?".time()."-".rand(1,1000), 'title' => $download_title, 'js' => "data-viewer='$viewer' data-parent='".json_encode(array('obj_type' => $parent_obj_type, 'id' => $parent_id))."' data-search='".json_encode(array('parent_type' => 'media', 'parent_id' => $media_id))."'", 'class' => 'vp-loader-iframe')).' ';
        $alreadyFollow = 0;
        if($u_id) {
          $userCollectionObj = gallery_find_user_collection($siteObj, $u_id);    
          $collection_id = $userCollectionObj->id;
          $alreadyFollow = find_object('media_collection_map', array('media_id' => $media_id, 'media_collection_id' => $collection_id), 'id');
        }
        $imageObj->follow = $alreadyFollow;
        
        $fa_icon = $alreadyFollow ? "fa-star" : "fa-star-o";

        $class = $u_id ? "favorite-link" : "vp-loader-iframe";
        $followSearch = array('parent_type' => 'media', 'parent_id' => $media_id, 'site_id' => $site_id, 'user_id' => $u_id);
        $followParent = array('obj_type' => $parent_obj_type, 'id' => $parent_id);
        
        $followOptions = $alredyFollow ? array("title" => "You already follow this") : array('data-url' => $buy_link, 
                'title' => $download_title, 
                'data-parent' => $followParent, 
                'data-search' => $followSearch, 
                'data-viewer' => $viewer, 
                'class' => $class);
                
        $nav_buttons .= html_link('#', '<i class="fa fa '.$fa_icon.' fa-2x"></i>', $followOptions).' ';
        /**
        if($pv_id = gallery_user_owns_image($siteObj, $u_id, $media_id)) { // user already owns image
          list($product_id, $variant_id) = explode('-', $pv_id);
          $resolution = $variant_id ? get_object('product_variant', $variant_id, 'option_value') : '';
          if($resolution == 'high') {
            $nav_buttons .= html_div('<i class="fa fa-star fa-2x"></i>', '', array('title' => phrase('you_own_this', CAPITALIZE))); // 'mini-sprite-32 s154'
            $download_title = '';
          } else {
            $download_title = phrase('upgrade_to_high_resolution', CAPITALIZE);
          }       
          */
        //} else if($pv_id = gallery_image_in_cart($siteObj_or_id, $media_id)) {
        //  list($product_id, $variant_id) = explode('-', $pv_id);
        //  $resolution = $variant_id ? get_object('product_variant', $variant_id, 'option_value') : '';
        //  $cart_title = phrase('already_in_your_cart', CAPITALIZE).($resolution ? " ($resolution resolution)" : '');
        //  $nav_buttons .= html_div('', 'mini-sprite-32 s154', array('title' => $cart_title));
        //  $download_title = '';
        //}
        /**
        if($download_title) {
          $download_title .= " ($media_id)";
          $nav_buttons .= html_link('#', '<i class="fa fa-star-o fa-2x"></i>', array('data-url' => $buy_link."?".time()."-".rand(1,1000), 'title' => $download_title, 'js' => "data-viewer='$viewer' data-parent='".json_encode(array('obj_type' => $parent_obj_type, 'id' => $parent_id))."' data-search='".json_encode(array('parent_type' => 'media', 'parent_id' => $media_id))."'", 'class' => 'vp-loader-iframe')).' ';
        }
        */
        
      }
      //if($edit_link)   $nav_buttons .= html_link('#', html_div('', 'mini-sprite-32 s8'), array('data-url' => $edit_link, 'title' => phrase('edit', CAPITALIZE).$edit_debug, 'js' => "data-viewer='$viewer' data-parent='".json_encode(array('obj_type' => $parent_obj_type, 'id' => $parent_id))."' data-search='".json_encode(array('parent_type' => 'media', 'parent_id' => $media_id))."'", 'class' => $loader_class_iframe)).' ';

      if(1) { // social
        
        if($base_link) {
          $share_link = site_full_url($siteObj).$base_link."?mid=$media_id";
          $share_link = str_replace('//test.', '//www.', $share_link);
          $share_link = str_replace('http://www.', 'https://www.', $share_link); // dirty hack
          if($share_link) {
            $tiny_url = url_shorten($share_link);
            if(!$collection_name && $collection_id) $collection_name = get_object('media_collection', $collection_id, 'title');
            if(!$artist_name && $artist_id) $artist_name = user_display_name($artist_id);

            $tweet = ($collection_name ? "$collection_name: " : '' )."$title";
            
            $data = [];
            $nav_buttons .= html_link("#", '<i class="fa fa-share-alt fa-2x"></i>', ['class' => 'vp-loader-overlay', 'title' => "Share", 'data-data' => $data]);
            // $nav_buttons .= dump($data,true);
                // 'js' => "data-viewer='$viewer' 
                // data-parent='".json_encode(array('obj_type' => $parent_obj_type, 'id' => $parent_id))."' 
                // data-search='".json_encode(array('obj_type' => 'share', 'foo' => 'bar', 'share_link' => $share_link, 'parent_obj_type' => $parent_obj_type, 'parent_id' => $parent_id))."'", 
                // 'class' => $loader_class)).' ';
            
            // <a title="Share" class="vp-loader-overlay" href="#" data-viewer="" 
            // data-parent="{&quot;obj_type&quot;:&quot;media_collection&quot;,&quot;id&quot;:&quot;1743&quot;}" 
            // data-search="{&quot;obj_type&quot;:&quot;share&quot;,&quot;foo&quot;:&quot;bar&quot;,&quot;share_link&quot;:&quot;http://test.vpatina.com/exhibition/1743/?mid=1113654&quot;,&quot;parent_obj_type&quot;:&quot;media_collection&quot;,&quot;parent_id&quot;:&quot;1743&quot;}"><i class="fa fa-share-alt fa-2x"></i></a>
            
          }
        }
      }
    }
    

        
    if($u_id) $nav_buttons .= user_button($siteObj, $u_id);
    $close_button = html_link("#", html_div('', 'mini-sprite-32 s163'), array('title' => "Hide", 'class' => 'gallery-close-button'));
    //$show_button  = html_link("#", html_div('', 'mini-sprite-32 s212'), array('title' => "Show image information", 'class' => 'gallery-info-button'));
    $nav_left = $close_button.html_div($nav_text, 'gallery-nav-text');
    $nav_right = html_div($nav_buttons, 'gallery-nav-buttons');
    $imageObj->navigation = $nav_left.$nav_right.html_div('', 'clear_float');
    //$imageObj->navigation_off = "foo".$show_button;
    
  } else {
    $imageObj->navigation = html_h2($title);//.$description;
  }
  //$imageObj->navigation = 'got here';
  //unset($imageObj->navigation);
  
  //$size_path = image_size_dir($size);
  $src_key = $size ? $size."_src" : 'thumb_src';
  

  $src = is_url($photo_url) ? $photo_url : $imageObj->$src_key;
  $imageObj->photo = html_image($src, $alt, array('js' => "data-search='".json_encode($search)."'", 'class' => $class));
  //echo("size=$size key=$src_key src=$src<br>").dump($imageObj, true);
  return $imageObj;
}


// populates imageObj with relevant fields from mediaObj 
function gallery_image_object($siteObj, $mediaObj, $options=NULL) {
  if(is_object($mediaObj)) {
    //$path = $mediaObj->path && !is_url($mediaObj->path) ? site_full_url($siteObj).$mediaObj->path : $mediaObj->path;

    if(is_url($mediaObj->path)) {
      $path = $mediaObj->path; // && !is_url($mediaObj->path) ? site_full_url($siteObj).$mediaObj->path : $mediaObj->path;
    } else {
      $path = site_full_url($siteObj).$mediaObj->path;
    }
    //echo("m: $mediaObj->path p: $path".dump($mediaObj, true));die();
    $src = $mediaObj->src;
    $filename = $mediaObj->filename;

    //$path = "path=".$mediaObj->path;
    //$path .= " url? ".(is_url($mediaObj->path) ? "yes" : "no");
    //$path = "http://www.google.com/";
    
    //if(is_url($src)) return array($src, $src, $src, $src, $src); 
    if($mediaObj->resize) {
      $imageObj = new stdClass;
      $imageObj->thumb_src  = $path.image_size_dir('thumb', $options).$src; 
      $imageObj->square_src = $path.image_size_dir('square', $options).$src; 
      $imageObj->small_src  = $path.image_size_dir('small', $options).$src; 
      $imageObj->medium_src = $path.image_size_dir('medium', $options).$src; 
      $imageObj->big_src    = $path.image_size_dir('big', $options).$src;
      $imageObj->full_src   = $path.image_size_dir('full', $options).$src; 
      $imageObj->org_src    = $path.image_size_dir('org', $options).$filename;
      $imageObj->base_src   = $path.$src;
      
    } else {
      $imageObj->thumb_src = $imageObj->square_src = $imageObj->small_src = $imageObj->medium_src = $imageObj->big_src = $imageObj->full_src = $imageObj->org_src = $path.$src;
    }                                                                                             

  } elseif(strlen($mediaObj)) {
    $imageObj->thumb_src = $imageObj->square_src = $imageObj->small_src = $imageObj->medium_src = $imageObj->big_src = $imageObj->full_src = $imageObj->org_src = $mediaObj; 
  } else {
    return $mediaObj; 
    dump($mediaObj);die("gallery_image_object: no input");
  }
  $imageObj->image = $imageObj->big_src;
  
  return $imageObj;  
}


// returns all folders (galleries) for this user; top level by default
function gallery_user_folder($siteObj_or_id, $userObj_or_id, $options=NULL) {
  $user_id = is_object($userObj_or_id) ? $userObj_or_id->id : $userObj_or_id;
  $site_id = is_object($siteObj_or_id) ? $siteObj_or_id->id : $siteObj_or_id;
  $search['site_id'] = $site_id;    
  $search['user_id'] = $user_id;    
  $search['parent_id'] = $options['parent_id'] ?: 0;    
  $search['active'] = 1;
  return find_objects('gallery', $search);
}

function gallery_folder_images($siteObj_or_id, $galleryObj_or_id, $options=array()) {
  $siteObj = any2obj('site', $siteObj_or_id);
  $gallery_id = is_object($galleryObj_or_id) ? $galleryObj_or_id->id : $galleryObj_or_id;
  $search['parent_type'] = 'gallery';
  $search['parent_id'] = $gallery_id;    
  $search['active'] = 1;
  return find_objects('media', $search);
}

function gallery_collection_images($siteObj_or_id, $collectionObj_or_id=NULL, $options=array()) {
  $mapObjs = gallery_collection($site_id, $collectionObj_or_id, array('return' => 'object'));
  $mapArray = array();
  foreach($mapObjs as $mapObj) $mapArray[$mapObj->media_id] = $mapObj->id;
  $ids = array_keys($mapArray);
  $search['id'] = $ids;
  $imageObjs = find_objects('media', $search);
  foreach($imageObjs as $imageObj) $imageObj->map_id = $mapArray[$imageObj->id]; // store the map_id with the media
  return $imageObjs;
}


// show a collection of images
function gallery_collection($siteObj_or_id, $collectionObj_or_id=NULL, $options=array()) {  
  $siteObj = any2obj('site', $siteObj_or_id);
  if($collectionObj_or_id) $collectionObj = any2object('media_collection', $collectionObj_or_id);
  if(!$collectionObj) return "Collection not found";
  if(!is_array($options) && strlen($options)) $options = json_decode($options, true); // from app_data.php

  $userObj = get_object('user', $collectionObj->user_id);
  $display_name = get_display_name($userObj);
  
  $mapObjs = gallery_collection_maps($siteObj, $collectionObj, $options);
  if($options['return'] == 'object') return $mapObjs;
  
  //$gallery_options = user_gallery_options($siteObj, $collectionObj, $userObj, $options);
  $options['objects'] = $mapObjs;
  $options['parent_obj_type'] = $options['obj_type'];
  $options['parent_obj_subtype'] = $options['obj_subtype'];
  $options['parent_obj'] = $collectionObj;
  $options['base_link'] = gallery_collection_link($siteObj, $collectionObj);  
  $options['obj_type'] = 'media_collection_map';

  if($options['view'] == 'simple') return gallery_simple_list($siteObj, $options);

  return gallery_object_list($siteObj, $options);
}
