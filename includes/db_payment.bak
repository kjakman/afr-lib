<?

function check_payment_data($data, $invoice_required = false) {
  $data = $inputVars = (array) $data;
  extract($data);
  $errors = array();
  
  if(!$payment_type) $payment_type = $payment_method; // support for historic reasons
  if(!$payment_type) $errors[] = "Missing payment_type"; // variable payment_type also used for Sale / Authorization
  if(!$currency)     $errors[] = "Missing currency";
  if(!$amount)       $errors[] = "Missing amount";
  if(!$parent_type)  $errors[] = "Missing parent type";
  if(!$parent_id)    $errors[] = "Missing parent id";   
  if($invoice_required && !$inv_id) return "Missing invoice id";

  return $errors;
}

// check if it's ok to pay this invoice
function check_payment_invoice($invObj, $currency, $amount) {
  if(!$invObj) return "Couldn't find invoice $inv_id";
  if($invObj->balance < INV_TOLERANCE) return "Invoice $inv_id is already paid.";   
  if($invObj->currency != $currency) return "Invoice $inv_id currency = $invObj->currency. Cannot pay with $currency";   
  if($amount > $invObj->balance + INV_TOLERANCE) return "Balance of invoice $invObj->id is only $invObj->balance. Overpaying.";   

  return $errors;
}

// new json ready wrappers for old function: todo, merge
function check_payment($data) {
  $data = $inputVars = (array) $data;
  extract($data);
  $errors = $messages = array();  
  $action = $inputVars['submit_action'] ?: 'pay'; // pay or confirmation
  $due_now = $inputVars['due_now'];
  if($action == 'pay_due' && $due_now >= INV_TOLERANCE && $due_now < $amount - INV_TOLERANCE) $amount = $inputVars['amount'] = $due_now; // pay due 
  if(!$payment_type) $payment_type = $payment_method; // support for historic reasons
  if($currency != 'BTC') $amount = number_format($amount, 2, '.', '');
  if($errors = check_payment_data($data)) return json_error_object($errors);
  $messages[] = "OK. Paying $currency $amount on $parent_type $parent_id";
  
  $order_id = $parent_type == 'payment_order' ? $parent_id : 0;
  
  // type specific error checking
  switch($payment_type) {
  case PAYMENT_TYPE_CREDIT_CARD:
    //if($errors = cc_validate($inputVars, $resObj->checkout)) break; 
    if(isset($inputVars['ccof'])) { // charge card on file
      $ccof = $inputVars['ccof'];
      if(!$ccof) {$errors[] = "Please select a card."; break;}
      $messages[] = "Charging card on file = $ccof";
      list($cc_type, $cc_id, $last_four) = explode('-', $ccof);
      $ccObj = get_object('cc', $cc_id);
      if(!$ccObj) {$errors[] = "CC $cc_id not found"; break;}
      if($last_four != substr($ccObj->cc_number, strlen($ccObj->cc_number)-4, 4)) {$errors[] = "Invalid CC Pin"; break;}
      $messages[] = "OK: Charging cc on file ($cc_id).";

    } else {

      if($errors = cc_validate($inputVars, $resObj->checkout)) break;
      //if($errors = cc_validate($inputVars, $u_level >= USER_LEVEL_STAFF || !$resObj ? today() : $resObj->checkout)) {

      $inputVars['cc_number'] = str_replace(array(' ', '-'), '', $inputVars['cc_number']);
      $cc_data = $inputVars;
      if($cc_id = $cc_data['cc_id']) { // update cc
        $ccObj = get_object('cc', $cc_id);
        if(!$ccObj) {$errors[] = "CC $cc_id not found"; break;}
        $cc_data['address_id'] = $ccObj->address_id;
        //echo("Updating cc $cc_id".dump($cc_data));
        list($cc_id, $cc_errors) = update_object('cc', $cc_data, $cc_id);
        //echo("Updated cc $cc_id");
       } else { // add cc
        //echo("adding cc:".print_r($cc_data, true));
        list($cc_id, $cc_errors) = add_object('cc', $cc_data);
        //echo("Added cc $cc_id");
      }
      if($cc_errors) {$errors = array_merge($cc_errors, $errors);break;}
    }
    $data['cc_id'] = $cc_id; // return value

    $messages[] = "Credit card seems valid id=$cc_id";
    //$errors[] = "Stopping here for now";
    break;
  case PAYMENT_TYPE_IDEAL:
    if($errors = ideal_validate($inputVars)) return json_error_object($errors); 
    $messages[] = "Ideal setup ok";
    break;
  case PAYMENT_TYPE_PAYPAL:
    //if($error_str = $inputVars['error_str']) return json_error_object(urldecode($error_str)); // from PP return URL        
    $messages[] = "Paypal setup ok";
    break;
  case PAYMENT_TYPE_BITCOIN:
    $cur_per_btc = get_btc_rate($currency);
    if($cur_per_btc > 0) {
      $amount_btc = clean_format($amount / $cur_per_btc, 4);  
      $data['amount_btc'] = $amount_btc; // return value
      $data['order_id'] = $order_id; 
      //$messages[] = "1 $currency  = $cur_per_btc BTC";
      $messages[] = "Bitcoin setup ok, paying $amount_btc BTC (= $amount $currency)";
    } else {
      $errors[] = "Bitcoin currency conversion failed";
    }
    break;
  default:
    $errors[] = "Invalid payment type $payment_type";
    return json_error_object($errors);
    break;
  }
  
  if($errors) return json_error_object($errors);
  
  // ok so far

  $gateway_id = payment_type2gateway_id($payment_type);    

  switch($parent_type) {
  case 'reservation':
    $res_id = $parent_id;
    $resObj = get_object('reservation', $res_id);
    if(!$inv_id) {
      if($invObj = find_booking_invoice($res_id)) {  // look for booking invoice 
        $messages[] = "Found invoice $inv_id for reservation $res_id";
        $inv_id = $invObj->id;
      }
    }
    break;
  case 'payment_order':
    $order_id = $parent_id;
    $orderObj = get_object('payment_order', $order_id);
    if(!$inv_id) {
      if($invObj = find_order_invoice($order_id)) {
        $inv_id = $invObj->id; // look for invoice
        $messages[] = "Found invoice $inv_id for order $order_id";
      }
    }
    break;
  case 'invoice':
    if(!$inv_id) $inv_id = $parent_id;
    break;
  default:
    return json_error_object("Invalid parent type $parent_type");
  }
    
  $parentObj = get_object($parent_type, $parent_id);
  if(!$parentObj) return json_error_object("Could not find $parent_type $parent_id");

  if(!$inv_id) { // new reservation or order, create invoice since guest is really trying to pay
                  
    // from old request page
    if($resObj && $resObj->status < STATUS_PROPOSED) {
      $data['status'] = STATUS_PROPOSED;
      if($resObj->block_id) {
        $blockResObjs = block_members($res_id);
        foreach($blockResObjs as $blockResObj) list($res_id, $errors) = update_object('reservation', array('status' => STATUS_PROPOSED), $blockResObj->res_id); // this creates invoices for each block member
        list($inv_id, $inv_errors) = add_block_invoice($res_id); // add block invoice
        if($inv_errors) $errors = array_merge($errors, $inv_errors);
      } else {
        list($res_id, $errors) = update_object('reservation', $data, $res_id); // this creates invoice
      }
      $resObj = get_object('reservation', $res_id); // load fresh
      $invObj = find_booking_invoice($resObj->res_id); // find new booking invoice
      $inv_id = $invObj->id;

      if($inv_id) $messages[] = "Created invoice $inv_id for reservation $res_id";
      else $errors[] = "Failed to created invoice for reservation $res_id";
      // end from old request page
    
    } elseif($orderObj) {
      
      list($inv_id, $errors) = order2invoice($order_id); // make new invoice        
      if($errors) return json_error_object($errors);
      //json_message("called order2invoice with $order_id inv_id=$inv_id");

      if($inv_id) $messages[] = "Created invoice $inv_id for order $order_id";
      else $errors[] = "Failed to created invoice for reservation $res_id";
    }
  }
  if($errors) return json_error_object($errors);  

  $invObj = get_object('invoice', $inv_id);
  if($errors = check_payment_invoice($invObj, $currency, $amount)) return json_error_object($errors); 
  $data['inv_id'] = $inv_id;            
    
  $messages[] = "Contacting gateway, please be patient...";
  
  $success = count($errors) ? false : true;
  $result->data = $data;
  $result->success = $success;
  $result->message = $messages;
  $result->error = $errors;
  return $result;
}

function get_payment($data) {
  $data = $inputVars = (array) $data;
  extract($data);
  if($submit_action == 'pay_due' && $due_now >= INV_TOLERANCE && $due_now < $amount - INV_TOLERANCE) $amount = $due_now; // pay due 

  $errors = $messages = array();  
  if(!$payment_type) $payment_type = $payment_method; // support for historic reasons
  if($errors = check_payment_data($data, true)) return json_error_object($errors);
  $invObj = get_object('invoice', $inv_id);
  $resObj = $res_id ? get_object('reservation', $res_id) : NULL;
  $orderObj = $order_id ? get_object('payment_order', $order_id) : NULL;

  if($errors = check_payment_invoice($invObj, $currency, $amount)) return json_error_object($errors); 
  list($errors, $messages, $resArray) = fetch_payment($payment_type, $currency, $amount, $invObj, array('data' => $data));

  // if($payment_error) { // adding payment failed
  //   $errors[] = "$payment_error: $payment_message";
  //   
  //   if($res_id) update_object('reservation', array('status' => STATUS_REQUEST), $res_id); // demote to request if no payment was received
  //   elseif($order_id) update_object('payment_order', array('status' => PAYMENT_STATUS_DRAFT), $order_id); // demote from draft if no payment was received
  // 
  // } else { // success
  //   $messages[] = $payment_message;
  //   if($res_id && !$resObj->send_email && $resObj->type == RES_TYPE_DIRECT) update_object('reservation', array('send_email' => 1), $res_id); // turn on send_email (for direct bookings...)
  //   if($order_id) update_object('payment_order', array('payment_type' => $payment_type, 'gateway_id' => $gateway_id), $order_id); // turn on send_email (for direct bookings...)
  // }
  if($errors) {
    if(!is_array($errors)) $errors = array($errors);
    $success = 0;
    if(strpos(strtolower($payment_message), 'credit card verification number') !== FALSE) $errors[] = "(Credit Card Verification Number = ".phrase('security_code', CAPITALIZE).')'; // explanation

    // "having trouble" text and option to pay later - be contacted.
    $payment_attempt = $data['payment_attempt'];
    $resArray['payment_attempt'] = $payment_attempt + 1;
    if($payment_attempt > 1) {
      $errors[] = "PA = $payment_attempt - ".phrase('text_payment_trouble');
      //$messages[] = phrase('text_payment_trouble');
    }
      //$hidden_fields['rid'] = $res_id; 
      //$hidden_fields['pin'] = myhash($resObj->booking_pin);
      //$hidden_fields['sk'] = 'payment'; // store the step we're displaying now
      //$form = array2form($hidden_fields); // always include hidden fields on the form
      //$form .= form_input('payment_trouble', 'submit', phrase('pay_later', CAPITALIZE));
      //$messages[] = html_form($form);
  } else {
    $success = 1;
    if($redirect = $resArray['redirect']) $result->redirect = $redirect;
    if($res_id && !$resObj->send_email && $resObj->type == RES_TYPE_DIRECT) update_object('reservation', array('send_email' => 1), $res_id); // turn on send_email (for direct bookings...)
    if($order_id) update_object('payment_order', array('payment_type' => $payment_type, 'gateway_id' => $gateway_id), $order_id); 
  }
  //if(!$errors) $messages[] = "Ok, payment received, updating invoice";
  $result->data = $resArray;
  $result->success = $success;
  $result->message = $messages;
  $result->error = $errors;
  return $result;
}

function process_payment($data) {
  $data = $inputVars = (array) $data;
  extract($data);
  $errors = $messages = array();  
  if($submit_action == 'pay_due' && $due_now >= INV_TOLERANCE && $due_now < $amount - INV_TOLERANCE) $amount = $due_now; // pay due 
  if(!$payment_type) $payment_type = $payment_method; // support for historic reasons
  if($errors = check_payment_data($data, true)) return json_error_object($errors);
  $invObj = get_object('invoice', $inv_id);
  if($errors = check_payment_invoice($invObj, $currency, $amount)) return json_error_object($errors); 

  list($payment_id, $errors, $messages) = add_payment($currency, $amount, $invObj, $payment_type, $inputVars);

  if(!$errors) {
    $messages[] = "OK. Added payment $payment_id";
  }
  $status_link = public_action_link('invoice', $invObj, array('user_level' => $user_level, 'action' => 'confirmation'));
  $success = count($errors) ? false : true;
  $result->data = $data;
  $result->success = $success;
  $result->message = $messages;
  $result->error = $errors;
  $result->status_link = $status_link;
  return $result;
}

// rename to payment_form ?
function payment_form($siteObj, $currency, $amount, $options=NULL) {
  global $u_level;
  $inputVars = $_POST ?: $_GET;
  $payment_options = $options['payment_options'] ?: site_payment_options($siteObj);
  //dump($payment_options);
  $user_level = $options['user_level'] ?: $u_level;
  $form_name = $options['form_name'] = 'payment_form';

  $user_level = $options['user_level'] ?: $u_level;  
  $due_now = $options['due_now']; // the amount due now
  $options['pay_due'] = $pay_due = abs($amount - $due_now) > INV_TOLERANCE && $due_now > INV_TOLERANCE ? $due_now : 0; // if due now is in valid range, set pay_due to due_now amount

  //dump($options);
  
  //echo("due now = $due_now amount=$amount pay due = $pay_due");
  $parent_id = $options['parent_id'];
  $parent_type = $options['parent_type'];
  $parentObj = $options['parentObj'];  
  if($parent_id && $parent_type && !$parentObj) $parentObj = $options['parentObj'] = get_object($parent_type, $parent_id); // reservation, order, invoice
    
  $selected = pick_first($inputVars['payment_type'], $inputVars['payment_method'], $options['selected'], $payment_options[0]);
  $selected_index = array_search($selected, $payment_options) ?: 0;
  
  // begin outout    
  $errors = html_error_box('', array('id' => $form_name."_errors"));
  $messages = html_message_box('', array('id' => $form_name."_messages"));
  
  foreach($payment_options as $payment_type) {
    $payment_type_name = phrase(get_object('payment_type', $payment_type, 'name'), CAPITALIZE);
    if($pay_form = payment_option($siteObj, $payment_type, $currency, $amount, $options)) {
      $tabs[$payment_type_name] = $pay_form;    
    }
  }

  // $output = "sel=$selected index=$selected_index<br>";
  $output .= $errors.$messages;
  $output .= count($tabs) > 1 ? tabs($tabs, NULL, array('active' => $selected_index)) : $pay_form;
  return $output;

}

// buttons used on payment form 
function payment_form_buttons($payment_type, $currency, $amount, $options=NULL) {
  $pay_due = $options['pay_due'] ?: false;
  $pay_partial = $options['pay_partial'] ?: false;
  $class = trim($options['class'].' white submit_parent_form');
  $decimals = $options['decimals'] ?: 2;
  $invoice_amount_due = $invoice_amount = 0;
  if($invoice_currency = $options['invoice_currency']) {
    $inv_cur = get_currency_symbol($invoice_currency, true);
    $invoice_amount = $options['invoice_amount'];
    $invoice_amount_due = $options['invoice_amount_due'];
  }
  // standard buttons
  $buttons = array();
  $cur = get_currency_symbol($currency, true);  
  if($pay_due) {
    $button_text = phrase('pay', CAPITALIZE).' '.formatFloat($pay_due, FORMAT_ALWAYS, $cur, $decimals);
    if($invoice_amount_due) $button_text .= " ($inv_cur$invoice_amount_due)"; 
    $buttons[]= html_social_button('#', $button_text, array('class' => $class, 'data-action' => 'pay_due'));
  }
  $button_text = phrase('pay', CAPITALIZE).' '.formatFloat($amount, FORMAT_ALWAYS, $cur, $decimals);
  if($invoice_amount) $button_text .= " ($inv_cur$invoice_amount)"; 
  $buttons[]= html_social_button('#', $button_text, array('class' => $class, 'data-action' => 'pay'));

  if($pay_partial) {
    $text_custom = html_div(html_break().phrase('text_pay_custom_amount').' '.phrase('text_number_formatting').html_break(), 'green bold').html_break();
    $buttons []= $text_custom.form_input('pay_custom', 'submit', phrase('pay', CAPITALIZE).' => ')." $cur ".form_input('custom_amount', 'text', $inputVars['custom_amount'], array('size' => 8)).html_break(2);  
  }
  return $buttons;
}


// returns payment form for specified payment type (credit_card, paypal, ideal, etc)
// hidden fields will be appended
// if amount and due_now specified, show option to pay either
// ccObj used to populate cc_form only

// resObj fields used: 
// balance, checkin, status (show due now)
// agent_id (pay agent)(
// find_cards_on_file, print_cc_chooser, cc_form_default
// legal_entity_id, site_id
function payment_option($siteObj, $payment_type, $currency, $amount, $options=NULL) {
  global $u_level;
  $user_level  = $options['user_level'] ?: $u_level;
  $parent_id   = $options['parent_id'];
  $parent_type = $options['parent_type'];
  $parentObj   = $options['parentObj'];  
  $show_due    = $options['show_due'];
  $pay_due     = $due_now = $options['pay_due']; // show pay due button
  $pay_partial = $options['pay_partial']; // allow partial payment
  $payment_type_name = get_object('payment_type', $payment_type, 'name');
  $input_prefix = str_replace(' ', '_', $payment_type_name);

  if($parent_id && $parent_type && !$parentObj) $parentObj = $options['parentObj'] = get_object($parent_type, $parent_id); // reservation, order, invoice, or anything really

  if($parent_type && $parent_id) { // parent var to copy to payment
    switch($parent_type) {
    case 'invoice':    
      $key = 'inv_id';
      break;
    case 'cart':
      $key = 'cart_id';
      break;
    case 'order':
      $key = 'order_id';
      break;
    case 'reservation':
      $key = 'res_id';
      break;
    default:
      $key = '';
      break;
    }
    if($key) $hidden_fields[$key] = $parent_id;
  }
                                          
  //mydie("pd=$pay_due");
  $cur = get_currency_symbol($currency, true);  
  $hidden_fields['payment_method'] = $payment_type;
  $hidden_fields['currency']       = $currency;
  $hidden_fields['amount']         = $amount;
  $hidden_fields['parent_type']    = $parent_type;
  $hidden_fields['parent_id']      = $parent_id;
  $hidden_fields['submit_action'] = ''; // which button did we submit with (set in submit_parent handler in afr.js)
  $hidden_fields['payment_attempt'] = 0;
  $hidden_fields['charge_id'] = NULL;
  $hidden_fields['txn_id'] = '';

  if($pay_due) $hidden_fields['due_now'] = $pay_due;
  $parentObj = $options['parentObj'];
  
  $form_name = $options['form_name'] ?: 'payment_form_'.$payment_type;
  $action = 'process-payment';

  //$form .= "Pay due=$pay_due partial=$pay_partial".dump($options, true);
  global $u_level;
  switch ($payment_type) {
    case  PAYMENT_TYPE_BITCOIN:
      $form_name = 'payment_form_bitcoin';
      if($uuid = $_GET['uuid']) { // returned from Bitpay
        //$messages[] = "Returned from BitPay";
        $url = "https://bitpay.com/invoice?id=$uuid";
        $frame = html_div(html_iframe("$url&view=iframe", 500, 150, array("scrolling" => "no")), 'bp_frame');
        $paid_url = $_SERVER['REQUEST_URI'];
        //$paid_url = $return_url."&uuid=$uuid";
        $paid_text = "Please click here after paying";
        $paid_link = html_link($paid_url, $paid_text);

        $message = $frame.$paid_link;
      } 
      $cur_per_btc = get_btc_rate($currency); // live rate
      if(!$cur_per_btc) return "Failed to get bitcoin exchange rate";
      
      $form .= phrase('exchange_rate', CAPITALIZE).": 1 BTC = $cur_per_btc $currency".html_break();
      $options['decimals'] = 4;
      $options['invoice_currency'] = $currency;
      $options['invoice_amount'] = $amount;
      $options['invoice_amount_due'] = $pay_due;
      
      $amount = clean_format($amount / $cur_per_btc, 4);
      if($pay_due) $pay_due = $options['pay_due'] = $pay_due = clean_format($pay_due / $cur_per_btc, 4);
      $currency = 'BTC';
      $options['class'] = 'bitcoin';
      break;
      
    case  PAYMENT_TYPE_AGENT:
      $form_name = 'payment_form_agent';
      $agent_id = $options['agent_id'];
      if(!$agent_id) return "Missing agent_id";
      $buttons = form_input('pay', 'submit', phrase('book_now', CAPITALIZE));
      $agent_name = get_object('agent', $agent_id, 'agent_name');
      $form .= html_b("Voucher Code: ").form_input('voucher_id', 'password', array('size' => 6)).html_break();
      $form .= form_checkbox('agent_collect', false).html_b(" I hereby confirm that $agent_name will collect $cur $amount from the guest.").html_break();
      $form .= html_break().html_div($buttons);
      $output .= html_form($form, 'request_form');   
      return $output;
      break;
      
    case  PAYMENT_TYPE_CREDIT_CARD: // cc form
      $form_name = 'payment_form_cc';
      $options['class'] = '';
      
      if($currency != 'USD') $form .= currency_message('American Express', 'USD', $currency, $amount, $due_now, 'hidden');

      // show list of cc's on file 
      $remember = $user_level < USER_LEVEL_STAFF; // staff or higher can see all cards

      // sale or auth
      if($user_level >= USER_LEVEL_OWNER) { // option for Sale/Authorization
        $payment_action_array = array('Sale' => phrase('sale', CAPITALIZE), 'Authorization' => phrase('authorization', CAPITALIZE));
        $form .= phrase('transaction_type', CAPITALIZE).': '.select_from_array('payment_action', $payment_action_array, $_POST['payment_action']).html_break(2);
      } else {
        $hidden_fields['payment_action'] = 'Sale';
      }

      // cards on file
      if($ccObjs = cards_on_file($options)) {
        $form .= cards_on_file_chooser($ccObjs, $options).html_break(2);
      }
      
      if($ccObj) $options['ccObj'] = $ccObj;
      if($user_level) $options['user_level'] = $user_level;


      $form .= print_cc_form($siteObj, $options);
      $cc_text = payment_cc_text();
      $message = print_messages($cc_text).html_break();

      // validation, ajax submit
      $rules = array(
        'cc_type' => array('required' => 'true'),
        'cc_number' => array('required' => 'true', 'creditcard' => 'true'),
        'cc_cardholder' => array('required' => 'true'),
        'address_city' => array('required' => 'true'),
        'address_street' => array('required' => 'true'),
        'address_country' => array('required' => 'true')
      );
      break;

    case  PAYMENT_TYPE_PAYPAL:
      $options['class'] = 'paypal';
      switch($currency) {
      case 'usd':
        $max_amount = 10000;
        break;
      case 'EUR':
        $max_amount = 8000;
        break;
      default:        
        $amount_usd = get_exchange_rate($currency, 'USD', $amount, true);
        break;
      }
      
      if($amount_usd > $max_paypal_amt) return html_div("PayPal ".phrase('maximum_amount', LOWERCASE)." = USD $max_paypal_amt", 'error');

      $form_name = 'payment_form_paypal';

      //$buttons[]= paypal_button($currency, $amount, $hidden_fields);
      //if($pay_due) $buttons[]= paypal_button($currency, $pay_due, $hidden_fields);
      //if($pay_partial) $buttons[]= paypal_button($currency, $amount, $hidden_fields, array('custom' => 1)).$custom_button; 
      
      //return html_div(implode(' ', $buttons), 'center');
      break;

    case  PAYMENT_TYPE_IDEAL:
      if($currency != 'EUR') $form .= currency_message('iDeal', 'EUR', $currency, $amount, $due_now);

      $legal_id = pick_first($parentObj->legal_entity_id, $siteObj->legal_entity_id, $_SESSION['legal_entity_id']); 
      if(!$legal_id) return "Missing legal ID";
      
      $partner_id = get_object('legal_entity', $legal_id, 'mollie_id');
      if(!$partner_id) return "Missing partner ID for ".get_object('legal_entity', $legal_id, 'name');

      //$profile_key = get_object('legal_entity', $legal_id, 'mollie_profile') ?: get_object('site', $resObj->site_id, 'mollie_profile');

      if($bank_array =  ideal_prepare($partner_id, $_SESSION['dev'] ? true : false)) { // true = test mode
        $form_name = 'payment_form_ideal';
        $form .= select_from_array('bank_id', $bank_array, ($_POST['bank_id'] ?  $_POST['bank_id'] : $_GET['bank_id']), array('first' => phrase('select', CAPITALIZE).' '.phrase('your_bank', LOWERCASE)));
        $ideal_img  = html_image('/images/payment/ideal_bank.png', 'iDeal');
        $form = css_float(array($form, $ideal_img));
        $rules = array(
          'bank_id' => array('required' => 'true'),
        );
      } else {
        $errors[] = "No banks found";
      }
      break;

    default: 
      die("unknown payment type $payment_type");    
  }  
  
  //$handlerData['base_url'] = get_page_link(PAGE_EDIT_PROPERTY);
  $errors = html_error_box('', array('id' => $form_name."_errors"));
  $messages = html_message_box('', array('id' => $form_name."_messages"));
  $buttons = payment_form_buttons($payment_type, $currency, $amount, $options);

  $form = $errors.$messages.array2form($hidden_fields, array('prefix' => $input_prefix)).$form.html_break().html_div(implode(' ', $buttons)); 
  
  $output = $message.html_form($form, $form_name);   
  if($rules) $handler_options['validate'] = $rules;
  if($redirect = $options['redirect']) $handler_options['redirect'] = $redirect;
  $action = 'check-payment';
  $output .= html_form_handler($form_name, $action, $handler_options);
  return $output;
}


// initiates payment process
//function process_payment($resObj, $inputVars) {
//function process_payment($payment_type, $currency, $amount, $invObj, $resObj, $inputVars) {
function fetch_payment($payment_type, $currency, $amount, $invObj, $options=NULL) {
  global $apt_path;
  global $u_level;
  //dump($_SERVER);die();
  $site_url = $_SERVER['HTTP_HOST'];
  $pageObj  = $_SESSION['pageObj'];
  $siteObj  = $_SESSION['siteObj'];
  $page     = $_SESSION['page'];
  $page_id  = $_SESSION['page_id'];
  $inv_id   = $invObj->id;
  $user_level = $u_level ?: $options['user_level'];

  // return values                                                               
  $errors   = array();
  $messages = array();
  $resArray = array();

  $parent_type = $options['parent_type'] ?: $invObj->parent_type;
  $parent_id   = $options['parent_id'] ?: $invObj->parent_id;
  $inputVars   = $options['data'];
  
 // if($inv_id || ($inv_id = $inputVars['inv_id'])) $invObj = get_object('invoice', $inv_id);  
  switch($parent_type) {
    case 'reservation':
      $res_id = $parent_id;
      $resObj = $parentObj;
    case 'payment_order':
      $order_id = $parent_id;
      $orderObj = $parentObj;
      break;
    default:
      return array(array("Invalid parent type $parent_type"), $messages, $resArray);      
  }
 
  if(!$inv_id) return array(array("Missing invoice ID"), $messages, $resArray);
  if($res_id = $invObj->res_id) $resObj = get_object('reservation', $res_id);
  if($order_id = $invObj->order_id) {
    $orderObj = get_object('payment_order', $order_id);
    //json_error("gh".dump($orderObj, true));
  }

  // base link used to return here (used for iDeal and PayPal)
  $site_url = site_full_url($siteObj, $pageObj);
  $base_link = public_action_link('invoice', $invObj, array('user_level' => $user_level, 'action' => 'pay', 'encode' => false))."&payment_method=$payment_type&currency=$currency&amount=$amount";
  $return_url = public_action_link('invoice', $invObj, array('user_level' => $user_level, 'action' => 'paying', 'encode' => false))."&payment_method=$payment_type&currency=$currency&amount=$amount";
      
  $payment_type_name = get_object('payment_type', $payment_type, 'name');
        
  switch($payment_type) { // payment_type specific error checking
    case PAYMENT_TYPE_AGENT:
      $check_flag = true;
      $agent_id = $resObj->agent_id;
      if(!$agent_id) {$errors[] = "Missing agent_id"; break;}

      $agentObj = get_object('agent', $agent_id);
      $voucher_id = trim(strtolower($inputVars['voucher_id']));
      
      switch($voucher_id) { 
        case '':
          break;
        case '1234':
          break;
        case 'cash':
          $check_flag = false; // don't have to check box for deferred payments
          $partner_agent_id = $agentObj->partner_agent_id;
          $resArray['payment_type'] = PAYMENT_TYPE_PROMISSORY;
          $messages[] = "Promissory Payment, reservation is confirmed.";
          if($resObj->res_id && $partner_agent_id) {
            $newAgent = get_object('agent', $partner_agent_id);
            $resData['agent_id']      = $newAgent->id;
            $resData['email_address'] = $newAgent->email_address;
            list($rid, $rerrors) = update_object('reservation', $resData, $resObj->res_id); // switch to partner agent
          }
          break;
        default:
          $errors[] = "Unknown voucher $voucher_id";
          break;        
      }

      if($check_flag && !$inputVars['agent_collect']) {$errors[] = "Please check the checkbox first and click 'Book'.";break;}

      //dump($inputVars);
      //if(!$inputVars['voucher_id']) $errors[] = "Please fill in your voucher code.";
      //else if($inputVars['voucher_id'] != '1234') $errors[] = "Unknown voucher code.";
      break;

    case PAYMENT_TYPE_CREDIT_CARD:
      //echo("processing cc payment<br>");
      include_once("$apt_path/paypal/do_direct_payment.inc");
      $cc_id = $inputVars['cc_id'];
      if(!$cc_id) return array(array("Missing credit card ID"), $messages, $resArray); //return array('Missing cc_id', '', array());
      $paymentAction = $inputVars['payment_action'];
      if(!$paymentAction) return array(array("Missing payment action"), $messages, $resArray); //return array('Missing payment action', '', array());
      list($charge_error, $charge_msg, $resArray) = do_direct_payment($currency, $amount, $invObj, $cc_id, array('payment_action' => $paymentAction));
      $resArray['txn_id'] = $resArray['TRANSACTIONID'];
      if($charge_error) { // just a code
        $errors[] = $charge_msg;
      } else { // successfully captured payment
        $messages[] = $charge_msg;
      }
      
      break;

    case PAYMENT_TYPE_BITCOIN:
      //require_once("paysius/paysius_SCI_functions.php");
      $response = $paid_in_full = NULL;
      $uuid = 0;
      $amount_btc = $btc_balance = clean_num($inputVars['amount_btc']);
      $inv_id = $inv_id ?: $inputVars['inv_id'];
      $order_id = $orderObj->id ?: $inputVars['order_id'];
      $res_id = $resObj->res_id ?: $inputVars['res_id'];

      //json_error("inv_id=$inv_id order_id=$order_id ".dump($inputVars, true));               
      if(!$inv_id) return array(array("Missing invoice id"), $messages, $resArray); 

      if(!$order_id && !$res_id) return array(array("Missing order/reservation id"), $messages, $resArray); 

      if(!$orderObj && $order_id) $orderObj = get_object('payment_order', $order_id); // reload
      if(!$resObj && $res_id) $resObj = get_object('reservation', $res_id); // reload
      //if(!$orderObj) return array(array("Could not find order $order_id"), $messages, $resArray);

      if($orderObj) {
        $order_description = $orderObj->description;
        $balance = $amount ?: $orderObj->balance;
      } else if($resObj) {
        $order_description = "Reservation $res_id";
        $balance = $amount ?: $resObj->balance;
      }
      //$balance = $_SESSION['dev'] ? $orderObj->balance/100 : $orderObj->balance;
      
      require_once('bitpay/bp_lib.php');
      $ipn_url = "$site_url/bitpay/ipn.php";
      //$ipn_url = "https://www.apartments-for-rent.com/bitpay/ipn.php";
      
      $bitpayOptions = array_filter(array(
        'itemDesc' => $order_description, 
        'itemCode' => $product_id, 
        'notificationEmail' => $siteObj->email_address ?: 'bitpay@kjakman.com', 
        'notificationURL' => $ipn_url, 
        'redirectURL' => $return_url, 
        'currency' => $currency, 
        'physical' => 0, 
        'fullNotifications' => 1, 
        'transactionSpeed' => 'high', 
        'buyerName' => get_name_string($orderObj), 
        'buyerAddress1' => $orderObj->address1, 
        'buyerAddress2' => $orderObj->address2, 
        'buyerCity' => $orderObj->city, 
        'buyerState' => $orderObj->state, 
        'buyerZip' => $orderObj->zip, 
        'buyerEmail' => $orderObj->email_address, 
        'buyerPhone' => pick_first($orderObj->phone1,$orderObj->phone2,$orderObj->phone3)
      ));
      
      $posData = array_filter(array('inv_id' => $inv_id, 'order_id' => $order_id, 'res_id' => $res_id));

      //$orderId = 1; // ? 
      //$bitpayOptions['buyerZip'] = 'askldfjaksldjfklasdhfklasjdhfkasdhjfklasdhfklasdhjfklasdjhfklasdhflkasdjhfaslkdfjhasdklfjhasdklfjhsadlkfjhasdklfjhasdkfjadfhasdlkfhasdlfhaslkdfhaslfsdh';
      //$bitpayOptions['buyerPhone'] = 'askldfjaksldjfklasdhfklasjdhfkasdhjfklasdhfklasdhjfklasdjhfklasdhflkasdjhfaslkdfjhasdklfjhasdklfjhsadlkfjhasdklfjhasdkfjadfhasdlkfhasdlfhaslkdfhaslfsdh';

      $response = bpCreateInvoice($order_id, $balance, $posData, $bitpayOptions);
      
      if($url = $response['url']) { // success
        $resArray = $response;
        //return array(dump($response, true), $messages, $resArray);        
        $uuid = $response['id']; // Bitpay's invoice ID
        $amount_btc = $response['btcPrice'];
        if($order_id) {
          list($oid, $errors) = update_object('payment_order', array('uuid' => $uuid, 'order_currency' => 'BTC', 'order_total' => $amount_btc, 'gateway_id' => GATEWAY_BITPAY), $order_id);
          if($errors) return array($errors, $messages, $resArray);
        } elseif($res_id) {
        }
        
        // all good, show iFrame        
        $messages[] = "OK. Please pay invoice below within 15 minutes";
        $messages[] = html_div(html_iframe("$url&view=iframe", 500, 150, array("scrolling" => "no")), 'bp_frame');
        $paid_url = $return_url."&uuid=$uuid";
        $paid_text = "Please click here after paying";
        $paid_link = html_link($paid_url, $paid_text);
        
        //$payData = array_filter(array('uuid' => $uuid, 'payment_type' => $payment_type, 'currency' => $currency, 'amount' => $amount, 'inv_id' => $inv_id, 'res_id' => $res_id, 'order_id' => $order_id));
        //$paid_link = html_link($paid_url, $paid_text, array('class' => 'process-payment', 'data-data' => json_encode($payData)));
        //$messages[] = "URL=$paid_url data=".dump($payData, true);
        //$pp_div = html_div('result', '', array('id' => 'process-payment-result'));
        return array($paid_link, $messages, $resArray); // returning the link as an error stops processing (we don't want to call process_payment yet)        

      } else if($bpError = $response['error']) {
        $errors[] = $bpError['message'];
        if($bpMessages = $bpError['messages']) {
          foreach($bpMessages as $key => $message) {
            $errors[] = "$key: $message";
          }
        }
        return array($errors, $messages, $resArray);
      }
      return array(array("Unknown gateway error"), $messages, $resArray);
      break;
      
    case PAYMENT_TYPE_PAYPAL:
      include_once("$apt_path/paypal/do_express_checkout.inc");
      $pp_options = array();
      if($invObj) {
        $lineitems = payment_lineitems($invObj, $currency, $amount);
        $sum = sum_lineitems($lineitems);
        $li_deposit = false;
        
        foreach($lineitems as $li) {
          if($li->type == LI_TYPE_DEPOSIT) {
            $li_deposit = true; 
            break;
          }
        }
        $partial_payment = $amount < $invObj->total && $li_deposit ? 1 : 0;
        $pp_options['lineitems'] = $lineitems;
        $pp_options['partial_payment'] = $partial_payment;
        
      } else {
        $errors[] = "Missing invoice object";
      }

      list($pp_url, $pp_errors) = set_express_checkout($currency, $amount, $return_url, $invObj, $pp_options);
      if($pp_errors) {
        $errors[] = $pp_errors;          
      } else {
        $resArray['redirect'] = $pp_url;
        $messages[] = "Redirecting you to PayPal";
      }
      break;

    case PAYMENT_TYPE_IDEAL:

      $legal_id = pick_first($invObj->legal_entity_id, $parentObj->legal_entity_id, $siteObj->legal_entity_id); 
      if(!$legal_id) return array(array("Missing legal ID"), $messages, $resArray);
      
      $partner_id = get_object('legal_entity', $legal_id, 'mollie_id');
      if(!$partner_id) return array(array("Missing partner ID"), $messages, $resArray);

      $profile_key = get_object('legal_entity', $legal_id, 'mollie_profile');
      //if(!$profile_key) return array(array("Missing profile key"), $messages, $resArray);

      //echo("ideal_create: partner=$partner_id profile=$profile_key");

      $test = $_SESSION['dev'] ? true : false;

      if($bank_id = $inputVars['bank_id']) {
        $return_url  .= "&bank_id=$bank_id"; // URL waarnaar de consument teruggestuurd wordt na de betaling
        $afr_url = $_SESSION['dev'] || $_SESSION['test'] ?  'dev.apartments-for-rent.com' : 'www.apartments-for-rent.com';
        $protocol = 'https'; // reporting doesn't work for http        
        $report_url  = "$protocol://".$afr_url."/ideal/report.php?currency=$currency&amount=$amount&payment_method=$payment_type&bank_id=$bank_id&res_id=$res_id&inv_id=$inv_id&parent_type=$parent_type&parent_id=$parent_id&legal_id=$legal_id"; // URL for reporting (like ipn.php for PayPal)
          
        //die("report_url = <br>$report_url");
        
        if($currency != 'EUR') {           
          $amount_eur = get_exchange_rate($currency, 'EUR', $amount, true);
          $return_url .= "&amount_eur=$amount_eur";
          $report_url .= "&amount_eur=$amount_eur";
        } else {
          $amount_eur = $amount;
        }
        if($options['description']) {
          $description = $options['description'];          
        } elseif($resObj) {
          $city_name = $resObj->city_id ? geoname($resObj->city_id) : '';
          if($invObj) {
            $iid = $invObj->invoice_id ?: $invObj->id;
            $invoice_string = " - $iid";
          }
          $description = phrase('reservation', CAPITALIZE)." ".$resObj->res_id.$invoice_string." ($city_name)";
        } else {
          $description = "($city_name)";
        }
        
        if($_SESSION['dev']) {
          $messages[]= "base: ".  form_input('foo', 'text', $base_link,  array('size' => 80));
          $messages[]= "return: ".form_input('foo', 'text', $return_url, array('size' => 80));
          $messages[]= "report: ".form_input('foo', 'text', $report_url, array('size' => 80));
          $messages[] = "test=$test partner=$partner_id profile=$profile_key bank=$bank_id amount=$amount_eur desc=$description";
          //break;
          //  $errors[] = "return=$return_url report=$report_url test=$test";
        }
        
        $resArray = ideal_create($partner_id, $profile_key, $bank_id, $amount_eur, $description, $return_url, $report_url, $test);
        //return array("Ideal create complete", $messages, $resArray);
        
        $ideal_error = $resArray['error'];
        //$bank_url = $ideal_result->redirect = $ideal_result->bank_url;
        //$txn_id = $ideal_result->transaction_id;
        //$resArray = (array) $ideal_result;
        
        if($ideal_error) { 
          return array("Ideal error=$ideal_error create NOT ok", $messages, $resArray);
          $create_result = $ideal_error;
          $errors[] = $ideal_error;
        } elseif($bank_url) { 
          return array("Got here ideal create ok result=".dump($resArray, true), $messages, $resArray);
          $create_result = "OK";
          $messages[] = "Ideal create ok, redirecting to bank.";
        }
        print_log("Ideal Create:\nReport url=$report_url\nCreate result: $create_result\ndata=".print_r($inputVars, true), 'ideal');

      } else { // create transaction, redirect to bank
        $errors[] = phrase('please_select', CAPITALIZE).' '.phrase('your_bank', LOWERCASE);
      }
      break;

    default:
      $errors[] = "fetch_payment: payment_type $payment_type not implemented";
      break;
      
  }
  return array($errors, $messages, $resArray);
}

// returns all lineitems for invoice if currency and amount match
// returns lineitems due now for invoice if currency and amount match
function payment_lineitems($invObj, $currency, $amount) {
  // try all lineitems (for description)
  if($currency != $invObj->currency) return array();

  // try all lineitems
  $lineitems = get_lineitems($invObj->id);
  $sum_li    = sum_lineitems($lineitems);
  if(abs($sum_li - $amount) <= INV_TOLERANCE) return $lineitems;
    
  // try due lineitems
  $lineitems = get_due_lineitems($invObj);
  $sum_li    = sum_lineitems($lineitems);
  if(abs($sum_li - $amount) <= INV_TOLERANCE) return $lineitems;

  return array();
}

function get_object_paid($obj_type, $obj_or_id) {
  global $db;
  switch($obj_type) {
  case 'reservation':
    $key = $parent_key = 'res_id';
    break;
  case 'payment_order':
    $key = 'id';
    $parent_key = 'order_id';
    break;
  case 'invoice':
    $key = 'id';
    $parent_key = 'inv_id';
    break;
  default:
    die("get_object_paid: unsupported obj_type $obj_type");
  }
  
  $obj = any2obj($obj_type, $obj_or_id);
  if(!$obj) return;
  $id = $obj->$key;  

  $paid_statuses = implode(',', array(PAYMENT_STATUS_COMPLETED, PAYMENT_STATUS_PENDING, PAYMENT_STATUS_REFUNDED, PAYMENT_STATUS_PARTIALLY_REFUNDED));
  $qs = "SELECT sum(amount) FROM payment WHERE $parent_key=$id AND payment_status IN ($paid_statuses)";
  $paid = db_getOne($qs);                                          
  return $paid > 0 ? $paid : '0.00';
}

function get_reservation_paid($resObj_or_id) {
  return get_object_paid('reservation', $resObj_or_id);
}


function get_paid($orderObj_or_id) {                 
  return get_object_paid('payment_order', $orderObj_or_id);
}

function update_reservation_paid($resObj_or_id) {
  global $db;
  $resObj = any2obj('reservation', $resObj_or_id);
  if(!$resObj) return;
  $res_id = $resObj->res_id;
  $paid = get_reservation_paid($resObj);
  $balance = $resObj->grand_total - $paid;
  db_query("UPDATE reservation SET paid=$paid, balance=$balance WHERE res_id=$res_id");
  return $paid;
}

function update_paid($order_id_or_obj) {
  $orderObj = any2obj('payment_order', $order_id_or_obj);
  $order_id = $orderObj->id;
  if(!$order_id) return false;
  $amount = $orderObj->total;
  
  $orderData['paid'] = $paid = get_paid($order_id);
  $orderData['balance'] = $balance = $amount - $paid;
      
  // echo("uop id=$order_id ($orderObj->status): paid=$paid balance=$balance");
  $status = 0;
  if($balance < INV_TOLERANCE) {
    $status = ORDER_STATUS_COMPLETE;
  } else if($paid > 0) { 
    $status = ORDER_STATUS_PARTIAL_PAYMENT;
  }
  if(!$status || $status == $orderObj->status) {
    $orderObj->paid = $paid;
    $orderObj->balance = $balance;
    return $orderObj; // no changes
  }
  
  $orderData['status'] = $status;  
  list($id, $errors) = update_object('payment_order', $orderData, $order_id);
  if($errors) print_log("update_payment_order: updating order errors:".print_r($errors, true), 'payment_order');
  else print_log("update_payment_order: updated order $id with total=$amount paid=$paid  balance=$balance", 'payment_order');

  update_order_parent($orderObj); // updates cart with order iD

  return get_object('payment_order', $order_id);                         
  //} elseif($cart_id = $orderObj->cart_id) { // redundant, get rid of ?
  //  update_object('cart', array('order_id' => $order_id), $cart_id); // means cart will be saved, new created on next login
  //}
}

// update corresponding parent cart
function update_order_parent($orderObj) {  
  $parent_type = $orderObj->parent_type;
  $parent_id = $orderObj->parent_id;
  if($parent_type && $parent_id) {
    switch($parent_type) {
    case 'cart':
      update_object('cart', array('order_id' => $orderObj->id), $parent_id); // means cart will be saved, new created on next login
      break;
    default:
      break;
    }
  }
}

// updates a payment order after a payment is added or updated
function update_payment_order($paymentObj) {  
  $order_id = $paymentObj->order_id;
  $completed = $paymentObj->payment_status == PAYMENT_STATUS_COMPLETED ? 1 : 0;
  print_log("update_payment_order: payment_id=$paymentObj->id order_id=$order_id completed=$completed", 'payment_order');
  if($order_id && $completed) {
    $orderObj = get_object('payment_order', $order_id);
    if($orderObj->currency != $paymentObj->payment_currency) {
      print_log("update_payment_order: order currency ($orderObj->currency) <> payment currency ($paymentObj->payment_currency) ", 'payment_order', LOG_ERROR);
    }
  }
}

// payment was OK, add to payment objects, update invoice, etc
// amount_usd field is hack to allow receiving USD amount different than invoice amount/currency
function add_payment($currency, $amount, $invObj, $payment_type, $inputVars, $paymentObj=NULL) {
  global $apt_path;
  $paymentData = array();
  $draft = $invObj->status == INV_STATUS_DRAFT;
  if($order_id = pick_first($inputVars['order_id'], $invObj->order_id, $paymentObj->order_id)) $paymentData['order_id'] = $order_id;
  
  $lineitems = payment_lineitems($invObj, $currency, $amount);
  
  $cur = get_currency_symbol($currency, true);
  if($payment_type != PAYMENT_TYPE_CREDIT_CARD_CAPTURE && $amount <= 0) return array("1", "Balance = $cur $amount, nothing to collect."); // nothing to be collected
  $paymentData['owner_id'] = $invObj->owner_id;

  $copy_vars = array('res_id', 'order_id', 'site_id', 'client_id', 'legal_entity_id');
  foreach($copy_vars as $var) $paymentData[$var] = $invObj->$var;

  if(isset($inputVars['payment_type'])) $payment_type = $inputVars['payment_type']; // ovverridden in process_payment for promissory payments
    
  $gateway_id = payment_type2gateway_id($payment_type);
  
  // Collect payment   
  switch($payment_type) {
    case PAYMENT_TYPE_PROMISSORY:
      $paymentData['payment_status'] = PAYMENT_STATUS_PENDING;
      $paymentData['payment_currency'] =  $currency;
      $paymentData['payment_gross'] =     $amount;
      $paymentData['payment_fee'] =       0;
      $paymentData['payment_net'] =       $amount;
      $paymentData['payment_notes'] =     '';
      break;

    case PAYMENT_TYPE_AGENT:
      $paymentData['payment_status'] = PAYMENT_STATUS_COMPLETED;
      $paymentData['payment_currency'] =  $currency;
      $paymentData['payment_gross'] =     $amount;
      $paymentData['payment_fee'] =       0;
      $paymentData['payment_net'] =       $amount;
      $paymentData['payment_notes'] =     '';
      break;

    case PAYMENT_TYPE_BITCOIN: // if we get here, we're already done (processed in process_payment)
      if($order_id) $orderObj = get_object('payment_order', $order_id);
      if(!$orderObj) {
        $payment_error = "Could not find order $order_id";
      } else {
        $paymentObj = find_object('payment', array('order_id' => $order_id));
        if(!$paymentObj) {
          $payment_error = "Could not find a payment for order $order_id";
        } else {
          if($paymentObj->payment_status != PAYMENT_STATUS_COMPLETED) {
            $payment_error = "Payment status for order $order_id is $paymentObj->payment_status (not complete)";
          } else if($paymentObj->payment_gross >= $orderObj->total) {
            $payment_message = "Thank you for your payment of ".clean_num($paymentObj->payment_gross)." BTC. Paid in full.";
          } else {
            $payment_error = "Insufficient payment: received $paymentObj->payment_gross vs order $orderObj->total";
          }
        }
      }

      // log
      if($payment_error) print_log("get_payment (bitcoin): ".$payment_error, 'payment', LOG_ERROR);
      else print_log("get_payment (bitcoin): ".$payment_message, 'payment', LOG_INFO);

      return array($payment_error, $payment_message); // payment is already added, so return
      break;

    case PAYMENT_TYPE_CREDIT_CARD:
      // echo("get_payment: method='$payment_type' type=$paymentType<br>");
      $paymentAction = $inputVars['payment_action'];
      $paymentData['payment_status'] = $paymentAction == 'Sale' ? PAYMENT_STATUS_COMPLETED : PAYMENT_STATUS_PENDING; // never pending for cc "Sale" payments. Will only be inserted if success (below)
      if($paymentAction == 'Authorization') $payment_type = PAYMENT_TYPE_CREDIT_CARD_AUTH; // set to authorization for internal payment object
      $paymentData['cc_id']         = $inputVars['cc_id'];
      $paymentData['charge_id']     = $inputVars['charge_id'];
      $paymentData['txn_id']        = $inputVars['txn_id'];
      break;

    case PAYMENT_TYPE_CREDIT_CARD_CAPTURE:
      include_once("$apt_path/paypal/do_capture.inc");
      $completeType = $inputVars['close_auth'] ? "Complete" : "NotComplete";
      list($charge_error, $dp_msg, $resArray) = do_capture($currency, $amount, $completeType, $inputVars['capture_note'], $paymentObj);
      if($charge_error) {
        $payment_error = $dp_msg;
      } else { // successfully captured payment
        $payment_id = $paymentObj->id;
        $payment_message = $dp_msg;
        $paymentData['payment_status'] = PAYMENT_STATUS_COMPLETED;
        // $paymentData['payment_status'] =    $resArray['PAYMENTSTATUS'];
        $paymentData['payment_currency'] =  $resArray['CURRENCYCODE'];
        $paymentData['payment_gross'] =     $resArray['AMT'];
        $paymentData['payment_fee'] =       $resArray['FEEAMT'];
        $paymentData['payment_net'] =       $resArray['AMT'] - $resArray['FEEAMT'];
        $paymentData['payment_notes'] =     $inputVars['capture_note'];
        //$paymentData['settle_currency'] =   $resArray[''];
        $paymentData['settle_amount'] =     $resArray['SETTLEAMT'];
        $paymentData['exchange_rate'] =     $resArray['EXCHANGERATE'];
        $paymentData['charge_id']     = $resArray['charge_id'];
        $paymentData['cc_id']         = $inputVars['cc_id'];
        $paymentData['txn_id']        = $resArray['TRANSACTIONID'];
        // $paymentData['parent_id']      = $paymentObj->id; // todo: later allow multiple capture on one parent payment
      }
      break;

    case PAYMENT_TYPE_IDEAL:
      // echo("get payment : ideal");
      // dump($inputVars);
      $errors = $messages = array();
      $txn_id = $inputVars['transaction_id'];
      $partner_id = $inputVars['partner_id'];
      if(!$txn_id) return array(0, "iDeal: missing transaction ID", '');
      if(!$partner_id) return array(0, "iDeal: missing partner ID", '');

      $messages[] = "iDeal: OK, returned with transaction id $txn_id";
      
      // processing sometimes happens first in the background (/ideal/return.php) - check for this
      if($txObj = find_object('transaction', array('tx_gateway' => 'IDEAL', 'txn_id' => $txn_id))) {
        $tx_id = $txObj->tx_id; // return value: our tx id - check in get_payment
        $messages[] = "Found transaction $tx_id with txn = $txn_id";
        if($txObj->tx_st == TX_ST_OK) {
          $messages[] = "Transaction OK: ".$txObj->tx_notes;
        } else {
          $errors[] = "Transaction not verified: ".$txObj->tx_notes;
        }
      }
      if($paymentObj = find_object('payment', array('payment_type' => PAYMENT_TYPE_IDEAL, 'txn_id' => $txn_id))) {
        $payment_id = $paymenObj->id;
        $messages[] = "Found payment $payment_id with txn = $txn_id";
        //return array($payment_id, "iDeal: a payment already exists with transaction ID $txn_id", '');
      } 

      if(!$paymentObj && !$txObj) { // wasn't entered yet, check with mollie
        $messages[] = "Checking payment with bank...";
        list($ideal_error, $ideal_message) = ideal_return($partner_id, $txn_id, $amount_eur, $test); // verify if payment is OK
                                        
        //if($payment_id = find_object('payment', array('txn_id' => $txn_id), 'id')) return array($payment_id, "iDeal: a payment already exists with transaction ID $txn_id", '');
        //$amount_eur = $currency == 'EUR' ? $amount : $inputVars['amount_eur'];
        if($ideal_error)   $errors[]   = "iDeal:".$ideal_error ;
        if($ideal_message) $messages[] = "iDeal:".$ideal_message;
        // echo("Couldn't find our tx with $txn_id ideal returneded:<br>");dump($errors);dump($messages);          
      }
      // we're done, payment is added above, so just return
      return array($payment_id, implode(html_break(), $errors), implode(html_break(), $messages));

      break;
      
      /*
      
      
      $resArray['transaction_id'] = $txn_id; // return value: iDeal tx id        

      $paymentData['txn_id']            = $txn_id; // iDeal tx id
      $paymentData['payment_status']    = PAYMENT_STATUS_COMPLETED; // pending until ideal/report.php updates ?
      $paymentData['payment_notes']     = $message;
      if($tx_id = $inputVars['tx_id']) {
        $txObj = get_object('transaction', $tx_id);
        if($payment_id = $txObj->payment_id) {
          //echo("Found tx $tx_id with payment_id = $payment_id, msg=$message status=$txObj->tx_st in transactions - returning...");
          $message = $payment_message = $txObj->tx_notes. " [Reload?]";
          return array($error, $message);
        } elseif($txObj->tx_st == TX_ST_OK) {
          $message = $payment_message = $txObj->tx_notes;
        } else {
          $error = $txObj->tx_notes;
          //echo("Found tx $tx_id with msg=$message status=$txObj->tx_st in transactions - returning...");
          return array($error, $message);
          }
        //dump($txObj);
        // echo("Found tx $tx_id with msg=$message status=$txObj->tx_st in transactions - adding payment...");
        $paymentData['tx_id']             = $tx_id; // our tx id

        $paymentData['payment_currency'] =  $txObj->mc_currency;
        $paymentData['payment_gross'] =     $txObj->mc_gross;
        $paymentData['payment_fee'] =       $txObj->mc_fee;
        $paymentData['payment_net'] =       $txObj->mc_gross - $txObj->mc_fee;

      } else {
        // our tx id - might already be set in backgroud (/ideal/return.php)
        // echo("when do you get here?");
        //$paymentData['payment_status']    = PAYMENT_STATUS_COMPLETED; // pending until ideal/report.php updates ?
        //$paymentData['payment_notes']     = $message; 
      }
      break;
      */
      
    case PAYMENT_TYPE_PAYPAL:
      $token = $inputVars['token'];                              
      if(!$token) return array(0, "PayPal: missing token", '');
        
      //die("gh: token=$token".dump($inputVars, true));
      include_once("$apt_path/paypal/do_express_checkout.inc");
      $payerID = $inputVars['PayerID'];
      if($details = get_express_checkout($token)) { // first, get the payment details (address, fees, etc.)
        //dump($inputVars);
        //dump($details);
        //echo("payer id pp:$details[PAYERID]  our: $payerID<br>");
        // check details for extra security
        list($error_code, $pp_error) = get_payment_error($details);
        if($pp_error) {
          $errors[] = $pp_error;
        } else { // own error checking
          if($details['PAYERID']      != $payerID)  {$errors[]= "Payer ID mismatch."; break;} 
          if($details['AMT']          != $amount)   {$errors[]= "Amount mismatch."; break;} 
          if($details['CURRENCYCODE'] != $currency) {$errors[]= "Currency mismatch."; break;}
        }
        if($errors) return array(0, implode(html_break(), $errors), ''); // "get_express_checkout failed.";
        $resArray['PayerID'] = $payerID; // return value
      } else {
        return array(0, "PayPal: checkout failure", ''); // "get_express_checkout failed.";        
      }                                               

      $paymentType = "Sale";
      list($charge_error, $charge_message, $resArray) = do_express_checkout($currency, $amount, $invObj, $inputVars, array('lineitems' => $lineitems));
      if($charge_error) {
        $payment_error = $charge_message;
      } else {
        $payment_message = $charge_message;
        //echo("got here");
        // dump($resArray);
        $paymentData['payment_status'] =    $resArray['PAYMENTSTATUS']=='Completed' ? PAYMENT_STATUS_COMPLETED :  PAYMENT_STATUS_PENDING;
        $paymentData['payment_currency'] =  $resArray['CURRENCYCODE'];
        $paymentData['payment_gross'] =     $resArray['AMT'];
        $paymentData['payment_fee'] =       $resArray['FEEAMT'];
        $paymentData['payment_net'] =       $resArray['AMT'] - $resArray['FEEAMT'];
        $paymentData['payment_notes'] =     $resArray['NOTE'];
        //$paymentData['settle_currency'] =   $resArray[''];
        $paymentData['settle_amount'] =     $resArray['SETTLEAMT'];
        $paymentData['exchange_rate'] =     $resArray['EXCHANGERATE'];
        $paymentData['txn_id']        = $resArray['TRANSACTIONID'];
      }
      break;

    case PAYMENT_TYPE_REFUND:
      list($payment_currency, $payment_amount) = payment_currency_amount($paymentObj);

      $refund_currency = $payment_currency; // refund in same currency as payment
      $refund_amount = $currency == $payment_currency ? $amount : round(($payment_amount / $paymentObj->amount) * $amount, 2);

      if($tx_id = $paymentObj->tx_id) $txObj = get_object('transaction', $tx_id);
      $notes    = $inputVars['refund_note'];
      $refundType = $amount < $paymentObj->amount ? 'Partial' : 'Full';
      
      // echo("tx_id=$tx_id gateway=$txObj->tx_gateway<br>");
      if($txObj->tx_gateway == 'PAYPAL') { // is this PayPal - if so, send message to PayPal
        $gateway_id = GATEWAY_PAYPAL;
        // issue refund
        require_once("$apt_path/paypal/do_refund.inc");
        list($charge_error, $dp_msg, $resArray) = do_refund($refund_currency, $refund_amount, $refundType, $notes, $paymentObj);
        if($charge_error) {
          $payment_error = $dp_msg;
        } else { // successfully captured payment
          $paymentData['txn_id'] = $resArray['REFUNDTRANSACTIONID'];
          $paymentData['payment_fee']   = -1 * $resArray['FEEREFUNDAMT'];
          $paymentData['payment_gross'] = -1 * $resArray['GROSSREFUNDAMT'];
          $paymentData['payment_net']   = -1 * $resArray['NETREFUNDAMT'];
        }
      }
    
      if(!$payment_error) {
        $paymentData['parent_id']      = $paymentObj->id;
        $paymentData['description']    = $paymentObj->description;
        $paymentData['cc_id']          = $paymentObj->cc_id;
        $paymentData['payment_notes']  = $notes;
        $paymentData['payment_status'] = PAYMENT_STATUS_COMPLETED;
        
        // dump($paymentData);
        
        // update original payment as refunded to prevent further refunds; todo - allow partial refund
        $sum_refund = sum_refund($paymentObj->id);
        $orgpay_status = $sum_refund + $amount >= $paymentObj->amount ? PAYMENT_STATUS_REFUNDED : PAYMENT_STATUS_PARTIALLY_REFUNDED;
  
        $amount = -1 * $amount;      
        
        // todo: remove comment
        list($pay_id, $pay_errors) = update_object('payment', array('payment_status' => $orgpay_status), $paymentObj->id); 
      }
      break;
      
    default:
      die("get_payment: unknown paymentType: '$payment_type'");      
  }
      
//    [AUTHORIZATIONID] => 4HG84437G83341457
//    [TRANSACTIONID] => 0N6601786L153070M
//    [PARENTTRANSACTIONID] => 4HG84437G83341457
//    [RECEIPTID] => 2355-5402-3711-5821
//    [TRANSACTIONTYPE] => webaccept
//    [PAYMENTTYPE] => instant
//    [ORDERTIME] => 2009-05-13T09:42:53Z
//    [AMT] => 152.69
//    [FEEAMT] => 6.25
//    [TAXAMT] => 0.00
//    [CURRENCYCODE] => USD
//    [PAYMENTSTATUS] => Completed
//    [PENDINGREASON] => None
//    [REASONCODE] => None

      //$new_action = 'captured';  
  //dump($resArray);  
  
  if($payment_error) {
    print_log("get_payment error: ".$payment_error, 'payment', LOG_ERROR);
    return array(0, $payment_error, $payment_message);
  }
  
  if($draft) {
    list($inv_id, $send_errors) = finalize_invoice($invObj); // moves draft_invoice to open invoice
  } else {
    $inv_id = $invObj->id;
  }
  
  // Success? Then add payment  
  if($send_errors) {
    $payment_error = "Send Invoice";
    $payment_message = implode(' - ', $send_errors);
  } else {
    //echo("sent invoice - new id = $new_inv_id<br>");                         
    // dump($paymentData);
  
    $paymentData['payment_type']  = $payment_type;
    $payment_errors = array();
    if($payment_id) { // update payment (Capture)
      list($payment_id, $payment_errors) = update_object('payment', $paymentData, $payment_id);
    } else { // add new payment
      if($gateway_id) $paymentData['gateway_id']    = $gateway_id;  
      $paymentData['inv_id']        = $inv_id;
      $paymentData['res_id']        = $invObj->res_id;
      $paymentData['currency']      = $currency;
      $paymentData['amount']        = $amount;

      $paymentData['description']   = addslashes($invObj->concerning);

      if($resArray['CURRENCYCODE'] && ($resArray['CURRENCYCODE'] != $currency)) { // store actual charged currency with payment object (PayPal or CC)
        $paymentData['payment_currency'] = $resArray['CURRENCYCODE'];
        $paymentData['payment_gross']    = $resArray['AMT'];        
      }

      if($invObj->type == INV_TYPE_BLOCK) { // this is a block invoice, add dummy payments for all children        
        $childTotal = array();
        foreach($lineitems as $lineitem) $childTotal[$lineitem->inv_id] += $lineitem->total;
        //dump($childTotal);
        $keys = array('payment_status', 'description', 'currency', 'concerning', 'payment_notes', 'gateway_id', 'block_id');
        $childPaymentData = array_copy($paymentData, $keys);

        $childPaymentData['description'] .= " - partial";
        $childPaymentData['payment_type'] .= PAYMENT_TYPE_BLOCK;
        foreach($childTotal as $child_inv_id => $child_amount) {
          $childPaymentData['inv_id'] = $child_inv_id;
          $childPaymentData['res_id'] = get_object('invoice', $child_inv_id, 'res_id');
          $childPaymentData['amount'] = $child_amount;
          //dump($childPaymentData);
          list($child_payment_id, $child_payment_errors) = add_object('payment', $childPaymentData);
          if($child_payment_errors) $payment_errors = array_merge($payment_errors, $child_payment_errors); 
        }      
        unset($paymentData['res_id']); // don't count block payment towards individual reservation
      }

      //dump($paymentData);
      //echo("get_payment: adding payment<br>");return array($payment_error, $payment_message);
      list($payment_id, $payment_errors) = add_object('payment', $paymentData);
    }      
    if($payment_errors) {
      $payment_error = implode(html_break(), $payment_errors);
      //dump($payment_errors);
    } else {
      //echo("added payment $payment_id<br>$output");
      if($txObj && !$txObj->payment_id) { // update transaction with payment id
        list($tx_id, $tx_errors) = update_object('transaction', array('payment_id' => $payment_id), $txObj->tx_id);
      }
    }
  }

  if($payment_error) print_log("get_payment error: ".$payment_error, 'payment', LOG_ERROR);
  else print_log("get_payment message: ".$payment_message, 'payment', LOG_INFO);

  return array($payment_id, $payment_error, $payment_message);
}

  
function payment_supported_currencies() {
  return array("EUR", "USD"); // only USD and EUR for now
}

function payment_supported_currency($currency) {
  // $supported_currencies = array("EUR", "USD", "GBP", "CHF");
  $supported_currencies = payment_supported_currencies();
  return in_array($currency, $supported_currencies);
}



function verifed_paypal_transaction($tx_id) {
  if(!$tx_id) return false;
  $txObj = get_object('transaction', $tx_id);
  if(!$txObj) return false;
  if($txObj->tx_gateway != "PAYPAL") return false;
  if($txObj->txn_res != "VERIFIED") return false;
  // if(!$_SESSION['dev'] && $txObj->ipn_test) return false;
  // if($txObj->payment_status != PAYMENT_STATUS_COMPLETED) return false;
  return true;
}

// returns the PayPal ID of the owner for the given paymentObj (withdrawal recipient.)
function payment_paypal_recipient($paymentObj) {
  $inv_id = $paymentObj->inv_id;
  $owner_id = $paymentObj->owner_id;
  if(!$owner_id && $inv_id) $owner_id = get_object('invoice', $inv_id, 'owner_id'); // get owner_id from invoice
  $ownerObj = $owner_id ? get_object('owner', $owner_id) : NULL;
  return pick_first($ownerObj->paypal_id_private, $ownerObj->paypal_id_business);
}


// sum of all refunds to a payment
function sum_refund($id, $use_payment_currency=false) {
  if(!$id) return 0;
  global $db;
  $field = $use_payment_currency ? 'payment_gross' : 'amount'; 
  return db_getOne("SELECT -1*sum($field) FROM payment WHERE payment_type=".PAYMENT_TYPE_REFUND." AND parent_id=$id");
}

// sum of all withdrawals for payment
function sum_withdrawals($id) {
  if(!$id) return 0;
  global $db;
  return db_getOne("SELECT sum(gross) FROM withdrawal WHERE payment_id=$id");
}

function check_transaction($txArray, $receiver_id='')	{
	$res_id	=	$txArray['res_id'];
	$inv_id	= $txArray['inv_id'];
	$order_id	=	$txArray['order_id'];
  $parent_id   = $txArray['parent_id'];
  $parent_type = $txArray['parent_type'];

	$txn_id	=	$txArray['txn_id'];
	$txn_res =$txArray['txn_res'];
	$receiver =	$txArray['receiver_email'];
	$payment_status	=	$txArray['payment_status'];

  //$payment_status_id = find_object('payment_status', array('name' => $payment_status), 'id'); // look up if valid status

	if($txn_res	!= "VERIFIED") return	array(TX_ST_TXN_NOT_VERIFIED,	"Txn Res=$txn_res");
	// else if($txArray['test_ipn'])	return array(TX_ST_TEST, "");

	if(!$txn_id) array(TX_ST_INCOMPLETE,	"Missing TXN ID");
	if(!$res_id && !$parent_id && !$order_id) return	array(TX_ST_MISSING_RESERVATION_ID,	"");
	if(!$inv_id) return	array(TX_ST_MISSING_INVOICE_ID,	"");

	if($res_id && !get_object('reservation',	$res_id))	return array(TX_ST_UNKNOWN_RESERVATION_ID, "");
	else if($order_id && !get_object('payment_order',	$order_id))	return array(TX_ST_UNKNOWN_RESERVATION_ID, "");
	//if($parent_type && $parent_id && !get_object($parent_type,	$parent_id))	return array(TX_ST_UNKNOWN_RESERVATION_ID, "");
	if(!get_object('invoice',	$inv_id))	return array(TX_ST_UNKNOWN_INVOICE_ID, "");
	if($receiver_id && $receiver_id !=	$receiver) return	array(TX_ST_WRONG_RECEIVER_EMAIL,	"Wrong receiver	ID: $receiver:	POSSIBLE FRAUD");	
	
	//if(!$payment_status_id) return	array(TX_ST_INCOMPLETE,	"Status=$payment_status");

	$gateway = $txArray['tx_gateway'];
	if($gateway != "BITPAY") {
	  if($tx_id	=	find_object('transaction', array('txn_id'	=> $txn_id), 'tx_id')) return	array(TX_ST_EXISTING_TXN_ID, "Transaction ID	(txn_id=$txn_id)	already	exists ($tx_id)	POSSIBLE FRAUD)");
	}
	
	return array(TX_ST_OK, "");
}
  
// prints list of payments 
function print_payments_list($payments, $options=NULL) {
  global $u_level;
  if($u_level < USER_LEVEL_OWNER) die("not authorized to view payments");
  // BEGIN OUTPUT
  //$output = html_subheader(phrase('payments', CAPITALIZE));
  if(!count($payments)) return '';

  $rows = array();
  $rows[]=  array(phrase('date', CAPITALIZE), phrase('invoice', CAPITALIZE), phrase('gateway', CAPITALIZE), phrase('method', CAPITALIZE), phrase('status', CAPITALIZE), phrase('currency', CAPITALIZE),
                  phrase('due', CAPITALIZE), phrase('paid', CAPITALIZE), phrase('fees', CAPITALIZE), phrase('net', CAPITALIZE), 
                  phrase('from', CAPITALIZE), phrase('withdrawn', CAPITALIZE), phrase('verified', CAPITALIZE), phrase('description', CAPITALIZE));
  foreach($payments as $paymentObj) {
    if(!auth_action('payment', 'view', $paymentObj->id)) die("Not authorzied");
    $date = sql2human($paymentObj->created, array('show_time' => true));
    $date = strip_time($paymentObj->created);
    $gateway = get_object('gateway', $paymentObj->gateway_id, 'name');
    $type = get_object('payment_type', $paymentObj->payment_type, 'name');
    $status = get_object('payment_status', $paymentObj->payment_status, 'name');
    $cur = get_currency_symbol($paymentObj->currency, true);
    $amount = formatFloat($paymentObj->amount, FORMAT_ALWAYS, $cur);

    $currency = $paymentObj->payment_currency;     
    $pcur = get_currency_symbol($currency, true);
    $pamount = formatFloat($paymentObj->payment_gross, FORMAT_ALWAYS, $pcur);
    $famount = formatFloat($paymentObj->payment_fee, FORMAT_ALWAYS, $pcur);
    $namount = formatFloat($paymentObj->payment_net, FORMAT_ALWAYS, $pcur);

    if($inv_id = $paymentObj->inv_id) {
      $invObj = get_object('invoice', $inv_id);
      $inv_str = $invObj->invoice_id ?: $invObj->id;
      $inv_link = action_link('invoice', $invObj->id, array('user_level' => $u_level));
      $inv_str = html_link($inv_link, $inv_str);
    } else {
      $inv_str = '';
    }
    
    if($tx_id = $paymentObj->tx_id) {
      $tx_link = html_link(get_object_link('transaction', $paymentObj->tx_id), $paymentObj->tx_id);
      $txObj = get_object('transaction', $tx_id);
      $from = $txObj->first_name.' '.$txObj->last_name;
    } else {
      $from = 'missing TX id';
    }
    if($paymentObj->withdrawal_id) {
      $wcur = get_currency_symbol($paymentObj->withdrawal_currency, true);
      $wamount  = formatFloat($paymentObj->withdrawal_amount, FORMAT_ALWAYS, $wcur);
    } else {
      $wamount = '';
    }
    $verified = verifed_paypal_transaction($paymentObj->tx_id) ? html_image('/images/icons/verified_tiny.png', 'Yes'): 'No';    
    $rows[]=  array($date, $inv_str, $gateway, $type, $status, $currency, $amount, $pamount, $famount, $namount, $from, $wamount, $verified, $paymentObj->description);
    $sum['wamount'] += $paymentObj->withdrawal_amount; // assuming same currency here
    $sum['pamount'] += $paymentObj->payment_gross; // assuming same currency here
    $sum['famount'] += $paymentObj->payment_fee; // assuming same currency here
    $sum['namount'] += $paymentObj->payment_net; // assuming same currency here
    $sum['amount'] += $paymentObj->amount; // assuming same currency here
  }
  $rows[]=  array('', '', '', '', '', '', formatFloat($sum['amount'], FORMAT_ALWAYS, $cur), 
                                  formatFloat($sum['pamount'], FORMAT_ALWAYS, $pcur), 
                                  formatFloat($sum['famount'], FORMAT_ALWAYS, $pcur), 
                                  formatFloat($sum['namount'], FORMAT_ALWAYS, $pcur), '', 
                                  formatFloat($sum['wamount'], FORMAT_ALWAYS, $wcur), '', '');
  return html_table($rows, $title, 'web20', 1, 1);
}

function payment_cc_text($lang='') {
  return 'Important: "'.CREDIT_CARD_TEXT_SHORT.'" or "'.CREDIT_CARD_TEXT_LONG.'" will appear on your credit card statement and will be charged by "'.CREDIT_CARD_COMPANY_TEXT.'" based in San Francisco.';
}

// credit card helpers
function check_cc_expiration($ccObj, $valid_until='') {
  if($valid_until) {
    list($day, $month, $year) = sql2date($valid_until);
  } else {
    $year = date('Y');
    $month = date('m');  
  }
  return $ccObj->cc_exp_year > $year || ($ccObj->cc_exp_year == $year && $ccObj->cc_exp_month >= $month);
} 
  
// returns an object used to populate information on credit card form
function cc_form_default($resObj) {
 $ccObj = $resObj; // copy address from resObj   
  unset($ccObj->address_id); // unset address ID - create new address
  $ccObj->cc_cardholder = $ccObj->first_name." ".$ccObj->last_name;
  return $ccObj;
}

// look for completed cc payments for this reservation or guest_id, then get list of non-expired cc's successfully charged earlier
function cards_on_file($options=NULL) {
  global $db;
  global $u_id;
  $cc_ids = array();
  $ccObjs = array();
  $parentObj = NULL;
  
  $user_id = $parentObj->user_id;
  $parent_id = $options['parent_id'] ?: $parentObj->id;
  $parent_type = $options['parent_type'] ?: $parentObj->obj_type;
  $parentObj = $options['parentObj'];  
  if($parent_id && $parent_type && !$parentObj) $parentObj = get_object($parent_type, $parent_id); // reservation, order, invoice
  
  // get ids of cc's on file for this guest
  if($user_id) $cc_ids = find_objects('cc', array('cc.user_id' => $user_id, 'remember' => 1), array('sort' => "cc.id DESC", 'fields' => 'cc.id'));  

  if($parentObj->cc_id) $cc_ids[] = $parentObj->cc_id; // add cc_id on res

  if($parent_type && $parent_id) { // look for other complete cc payments for this res
    
    switch($parent_type) {
    case 'reservation':
      $key = 'res_id';
      break;
    case 'invoice':
      $key = 'inv_id';
      break;
    case 'order':
      $key = 'order_id';
      break;
    }
    if($key) {
      $pay_search[$key] = $parent_id;
      $pay_search['payment.payment_type'] = PAYMENT_TYPE_CREDIT_CARD;
      $pay_search['payment.payment_status'] = PAYMENT_STATUS_COMPLETED;    
      if($payment_cc_ids = find_objects('payment', $pay_search, array('fields' => 'cc_id')))
        $cc_ids = array_merge($cc_ids, $payment_cc_ids); // add cc_ids from payments
    }
  }
  
  // fetch the cards in list that has "remember" set to true (unless admin) and not expired, if any
  // off: has been successfully charged, -- cc.last_charge > '0000-00-00' AND                                                            
  if($cc_ids = array_unique(array_filter($cc_ids))) {
    $cc_list = implode(',', $cc_ids);
    $ccObjs = db_getAll("SELECT * FROM cc WHERE cc.id IN ($cc_list) AND 
                                                           (cc_exp_year > '$this_year' OR (cc_exp_year = '$this_year' AND cc_exp_month >= '$this_month'))
                                                           $remember_clause
                                                           ORDER by cc.last_charge DESC, cc.id DESC");   
  }
  return $ccObjs;
}

function cards_on_file_chooser($ccObjs, $options=NULL) {  
  if(!$ccObjs) return '';
  foreach($ccObjs as $ccObj) {
    $cc_type = get_object('cc_type', $ccObj->cc_type, 'name');
    $last_four = substr($ccObj->cc_number, strlen($ccObj->cc_number)-4, 4);
    $ccArray[$ccObj->cc_type.'-'.$ccObj->id.'-'.$last_four] = $cc_type." xxxx-".$last_four." ".$ccObj->cc_exp_month.'/'.$ccObj->cc_exp_year." ($ccObj->cc_cardholder)";
  }
  $tip = print_cards_on_file($ccObjs, $options);
  $cc_info = modaltip('cc_info', $tip, phrase('cards_on_file', CAPITALIZE)); // , array('width' => 500 )
  //$js = "if(this.value.indexOf(\"".CC_TYPE_AMERICAN_EXPRESS."-\") ==0) showEl(\"amex_info\"); else hideEl(\"amex_info\");";
  return select_from_array('ccof', $ccArray, $_POST['ccof'], array('first' => phrase('charge_card_on_file', CAPITALIZE))).' '.$cc_info;  
}

function print_cards_on_file($ccObjs, $options=NULL) {  
  if(!$ccObjs) return '';
  $rows[] = array('Cardholder', 'Type', 'Number', 'Exp.', 'Last charged');
  foreach($ccObjs as $ccObj) {
    $cc_type = get_select_value2('cc_type', $ccObj->cc_type);
    $last_four = substr($ccObj->cc_number, strlen($ccObj->cc_number)-4, 4);
    $cc_num = "xxxx-".$last_four;        
    $cc_id = $ccObj->id;
    $exp_date = $ccObj->cc_exp_month."/".$ccObj->cc_exp_year;

    $js = 'onclick="$(\'#cc_id\').val('.$ccObj->id.');$(\'#cc_info_dialog\').dialog(\'close\');"';
    $url = '#';
    $action_str = phrase('pick', CAPITALIZE);
    $link = html_link($url, $ccObj->cc_cardholder, array('title' => $action_str, 'js' => $js, 'class' => 'blue'));

    $rows[] = array($link, $cc_type, $cc_num, $exp_date, sql2human($ccObj->last_charge));

  }
  return html_table($rows);
}

// validates credit card number, required fields, expiration date
// if valid_until is set, card must be valid until at least this date
function cc_validate($inputVars, $valid_until='') {
  global $u_level;
  $errors = array();
  // validate cc info
  $cc_type = $inputVars['cc_type'];
  
  $required = array('last_name', 'email_address', 'cc_number', 'cc_type', 'cc_cardholder', 'cc_cvv2', 'phone');
  if($u_level < USER_LEVEL_OWNER) $required[] = 'cc_cvv2';
  $inputVars['cc_number'] = str_replace(array(' ', '-'), '', $inputVars['cc_number']); // get rid of spaces and dashes
	$cardname = $cc_type ? get_object('cc_type', $cc_type, 'name') : '';
  if(!$cc_type) {
    $errors[]= phrase('cc_type', CAPITALIZE)." ".phrase('is_required', LOWERCASE);  
  } elseif(!$cardname) {
    $errors[]= phrase('cc_type', CAPITALIZE)." $cc_type ".phrase('unknown', CAPITALIZE);  
	} elseif($cc_num = $inputVars['cc_number']) {
	  require_once("cc_check.inc");
    $valid_cc_number = checkCreditCard($cc_num, $cardname, $cc_errornumber, $cc_errortext);
    if(!$valid_cc_number) $errors[]=$cc_errortext;
  } else {
    $errors[]= phrase('credit_card_number', CAPITALIZE)." ".phrase('is_required', LOWERCASE);
  }
  if(!$inputVars['cc_cardholder']) $errors[]= phrase('cardholder_full_name', CAPITALIZE)." ".phrase('is_required', LOWERCASE);

  // check security code, all numbers, 4 digits for Amex, 3 otherwise
  /*
  if($u_level < USER_LEVEL_OWNER) {
    $cvv = trim($inputVars['cc_cvv2']);
    if(!$cvv) $errors[]= phrase('security_code', CAPITALIZE)." ".phrase('is_required', LOWERCASE);
    else if(!isint($cvv)) $errors[]= phrase('invalid', CAPITALIZE)." ".phrase('security_code', LOWERCASE).': '.phrase('numbers_only');
    if($cardname == 'American Express' && strlen($cvv) != 4) $errors[]= phrase('invalid', CAPITALIZE)." ".phrase('security_code', LOWERCASE).': 4 '.phrase('digits');
    if($cardname != 'American Express' && strlen($cvv) != 3) $errors[]= phrase('invalid', CAPITALIZE)." ".phrase('security_code', LOWERCASE).': 3 '.phrase('digits');
  }
  */
  if(!check_cc_expiration(array2obj($inputVars), $valid_until)) $errors[]= $valid_until ? phrase('text_credit_card_expiration_checkout', CAPITALIZE) : phrase('credit_card', CAPITALIZE)." ".phrase('expired', LOWERCASE);

  //elseif($valid_until && !check_cc_expiration(array2obj($inputVars, $valid_until))) $errors[] = phrase('text_credit_card_expiration_checkout', CAPITALIZE);
  return $errors;
}

// prints credit card form with or without payment address
// 3 modes: public, admin, 3rd party pass-through (for hotels)
//function print_cc_form($ccObj=0, $user_level=0, $cc_list = '') {  
function print_cc_form($siteObj, $options = NULL) { 
  global $u_level;
  global $u_id;
  if($user_id = $options['user_id'] ?: $u_id) {
    $userObj = get_object('user', $user_id);
    $profileObj = find_user_profile($userObj);    
  }
  
  $parentObj = $options['parentObj'];
  $ccObj = $options['ccObj']; 
  $user_level = $options['user_level'] ?: $_level;
  $accepted_cards = pick_first($options['accepted_cards'], array(1,2,3,4,5,6)); // explode(',', $siteObj->accepted_cards), 
  
  if($user_level >= USER_LEVEL_OWNER) { // process.php: owner or admin mode
    $show_address=true; 
    $show_amex_warning = true; 
  } else if($user_level >= USER_LEVEL_GUEST) { // process.php: public/guest mode
    $show_address=true; 
    $show_amex_warning = true; 
  } else { // not specified - we're in 3rd party (hotel) mode - passthrough info
    $show_address = isset($options['show_address']) ? $options['show_address'] : true; 
    $show_amex_warning = true;
  }

  $this_year = date('Y');
   
  // build month array with leading zeros
  for($month=1;$month<=12;$month++) {$m_str=add_leading_zero($month);$month_array[$m_str]=$m_str;}

  $cc_js = $show_amex_warning ? "if(this.value==1) showEl(\"amex_info\"); else hideEl(\"amex_info\");" : "";

  $sourceObj = $_POST ? array2obj($_POST) : pick_first($ccObj, $parentObj, $profileObj, $userObj);
  $full_name = $sourceObj->cc_cardholder ?: implode(' ', array_filter(array($sourceObj->first_name, $sourceObj->infix, $sourceObj->last_name))); 
  //$_POST['cc_cardholder'] ? $_POST['cc_cardholder'] : $ccObj->first_name." ".$ccObj->last_name

  $cc_type_icon = html_div('', 'hidden cc-sprite', array('id' => 'cc_type_icon'));
    
  $fields[phrase('name_on_card', CAPITALIZE)]   = form_input('cc_cardholder', 'text', $full_name);
  $fields[phrase('credit_card_number', CAPITALIZE)] = form_input('cc_number', 'text',  $_POST['cc_number'] ? str_replace(array(' ', '-'), '', $_POST['cc_number']) : $ccObj->cc_number).$cc_type_icon;  
  //$fields[phrase('credit_card_type', CAPITALIZE)]       = object_select('cc_type', 'cc_type', array('value' => $_POST['cc_type'] ?: $ccObj->cc_type, 'sort' => 'name', 'filters' => array("id" => $accepted_cards, "bookable" => 1), 'js' => $cc_js));    
  $fields[phrase('expiration_date', CAPITALIZE)]        = select_from_array('cc_exp_month', $month_array, $_POST['cc_exp_month'] ? $_POST['cc_exp_month'] : $ccObj->cc_exp_month).' / '.
                                                          select_from_array('cc_exp_year',  num_array($this_year, $this_year+10, 1, '', false), $_POST['cc_exp_year'] ? $_POST['cc_exp_year'] : $ccObj->cc_exp_year);
  
  $cvv_tip = tooltip('cvv_tip', html_subheader('Visa/Mastercard').html_image('/images/png/cvv_visa.png').html_subheader('American Express').html_image('/images/png/cvv_amex.png'));                                                        
  $fields[phrase('security_code', CAPITALIZE).' '.$cvv_tip] = form_input('cc_cvv2', 'text', $_POST['cc_cvv2'] ? $_POST['cc_cvv2'] : $ccObj->cc_cvv2, array('size' => 4, 'max' => 4));
  
  $hidden_fields['cc_type'] = 0;
  $hidden_fields['cc_id'] = 0;
  
  $payment_form = array2form($hidden_fields).html_fieldset($fields, '', 'fieldset_top');

  if($show_address) {
    $address_str = print_simple_address_form($sourceObj); 
    $payment_form .= form_input('address_id', 'hidden', $ccObj->address_id);
    $payment_form .= html_div($address_str, 'block_cont');   
  }  

  if($user_level <= USER_LEVEL_GUEST) {
    $remember = form_checkbox('remember', isset($_POST['remember']) ? $_POST['remember'] : $ccObj->remember);
    $payment_form .= html_div($remember.' '.phrase('text_remember_cc_details'), 'block_cont');   
  }
    
  // todo: modernize...
  $output .= "
    $cards
    $payment_form
  ";
  return html_div($output, '', array('id' => "cc_form"));
}

function payment_type2gateway_id($payment_type) {  
  switch($payment_type) {
  case PAYMENT_TYPE_BITCOIN:
    return GATEWAY_PAYSIUS;
  case PAYMENT_TYPE_CREDIT_CARD:
    return GATEWAY_PAYPAL;
  case PAYMENT_TYPE_PAYPAL:
    return GATEWAY_PAYPAL;
  case PAYMENT_TYPE_IDEAL:
    return GATEWAY_MOLLIE;
  default:
    return NULL;
  }
}    

?>