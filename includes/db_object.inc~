<?php
// object functions used in admin
$__CLASSES = array();

include_once("constants.inc");
include_once("classes.inc");
include_once("class_handlers.inc");
include_once("class_constants.inc");
include_once("helpers_file.inc");
include_once("helpers_time.inc");
include_once("helpers_media.inc");

// reads classes, stores in new DB structure
function classes2db() {
  $classes = get_classes();
  $count = count($classes);
  echo("Got here. There are $count classes<br>");
  //dump($classes);die();
  foreach($classes as $class) {
    $obj_type = $class->type;
    if($obj = get_object('class', $class->type)) {
      echo("class $class->type already exists, updating<br>");
      //list($id, $errors) = update_object('class', $class, 0, $class->type);
    } else {
      list($id, $errors) = add_object('class', $class, 0, $class->type);
      echo("name=$class->name type=$class->type added class $id<br>");
    }
    if($errors) {dump($errors); die();}
    $attributes = get_object_attributes($obj_type, 0);    
    // dump($attributes);die();
    foreach($attributes as $field => $attr) {
      $attrObj = NULL;
      $attrObj->class = $class->type;
      $attrObj->field = $field;
      $attrObj->name = $attr[ATT_NAME];
      $attrObj->type = $attr[ATT_TYPE];
      $attrObj->flags = $attr[ATT_FLAGS];
      $attrObj->default_value = $attr[ATT_DEFAULT];

      // depending on type
      // $attrObj->length            = $attr[ATT_LENGTH];
      // $attrObj->relation_class    = $attr[ATT_LENGTH];
      // $attrObj->relation_filters  = $attr[ATT_LENGTH];
      // $attrObj->relation_sort     = $attr[ATT_LENGTH];
      // $attrObj->args1             = $attr[ATT_LENGTH];
      // $attrObj->args2             = $attr[ATT_LENGTH];
      
      //dump($attr);dump($attrObj);die();
      list($id, $errors) = add_object('attribute', $attrObj);
      if($errors) {dump($errors); dump($attr); dump($attrObj); die();}
      echo("added attribute $id<br>");
    }    
  }
}

// returns all classes with defaults where not in $__CLASSES
function get_classes() {  
  global $__CLASSES;
  $classes = array();
  foreach($__CLASSES as $type => $class_array) {
    $class = NULL;
    $class->type  = $type;
    $class->key   = get_object_key($type);
    $class->name  = get_object_name($type);
    $class->group = get_object_group($type);
    $class->table = get_object_table($type);
    $class->flags = get_object_flags($type);
    $class->descriptor = get_object_descriptor($type);
    $classes[] = $class;
  }
  return $classes;
}

// return name of field which is the primary id of the object (typically 'id')
function get_object_key($type) {
  global $__CLASSES;
  $class = $__CLASSES[$type];
  return $class[CLASS_KEY] ? $class[CLASS_KEY] : 'id';
}

function get_object_table($type) {
  global $__CLASSES;
  $class = $__CLASSES[$type];
  return $class[CLASS_TABLE] ? $class[CLASS_TABLE] : $type;
}

function get_object_name($type) {
  global $__CLASSES;
  $class = $__CLASSES[$type];
  return $class[CLASS_NAME] ? $class[CLASS_NAME] : ucfirst(str_replace(array('_', 'inv ', 'org'), array(' ', 'invoice ', 'organization'), $type));
}

function get_object_group($type) {
  global $__CLASSES;
  $class = $__CLASSES[$type];
  return $class[CLASS_GROUP] ? $class[CLASS_GROUP] : 'unsorted';
}

function get_object_flags($type) {
  global $__CLASSES;
  $class = $__CLASSES[$type];
  return $class[CLASS_FLAGS] ? $class[CLASS_FLAGS] : 0;
}

function get_object_sort($type) {
  global $__CLASSES;
  $class = $__CLASSES[$type];
  return $class[CLASS_SORT] ? $class[CLASS_SORT] : '';
}

// todo: move to class definition
//what's the diff between get_object_sort_clause and get_object_sort_default ??
function get_object_sort_clause($type) {
  global $__CLASSES;
  $class = $__CLASSES[$type];
  $table = get_object_table($type);
  if($class[CLASS_SORT]) return $class[CLASS_SORT];
  $key = get_object_key($type);
  return "$table.$key DESC"; //default - show newest first
}

// object descriptor is the name as it will appear in a select box
function get_object_descriptor($type) {
  if(!$type) mydie ("get_object_descriptor: missing type");
  global $__CLASSES;
  $class = $__CLASSES[$type];
  if($descriptor = $class[CLASS_DESCRIPTOR]) return $descriptor; // explicit descriptor
  $class_def = get_object_attributes($type, false); // try 'name'
  if($class_def['name']) return 'name';
  return get_object_key($type);                     // return key
}

// parent
// returns array(type, key) that refers to parent.
// the type is used in delete_object
function get_object_parent($type) {
  //if(!$type) die ("get_object_parent: missing type");
  return NULL;
}


// todo, change parent, parent_type to array e.g. 'realestate => 10039
function add_object($obj_type, $data, $parent_id=0, $preset_id=0, $parent_type='') {
  //echo("add_object $obj_type").dump($data);die();
  $data = (array) $data;
	// for new objects, let's first recursively process children, as we don't want to add parent object if there are child errors 
  $fields = get_object_attributes($obj_type, 0);
  foreach($fields as $field => $class) {
    $att_flags = $class[ATT_FLAGS];
    $att_type = $class[ATT_TYPE];
    $child_type = $att_options = $class[ATT_LENGTH];
    if($att_type == 'one2one') {
      // echo("$obj_type: one2one: adding child $field <br>");
      $child_data = $data; // copy
      $child_data['parent_type'] = $obj_type; 
      // $child_data['parent_id'] = $id; // is this always ok ? no -we don't know parent_id yet
      $child_required = $att_flags & AF_OBLIGATORY;
      list($child_id, $child_errors) = add_object($child_type, $child_data); // delegate to child (add or update)
      
      if($child_required && (!$child_id || $child_errors)) return array(0, $child_errors);
      
      if($child_id) {
        $data[$field] = $child_id; // ok, child added  
        //echo("$obj_type: one2one: added child $field = $child_id<br>");
      } else {
        //echo("$obj_type: one2one: added child $field = $child_id<br>");
      }
    }
  }
  //dump($data);

  list($id, $errors) = save_object_query($obj_type, $data, 0, $parent_id, $preset_id, $parent_type);
  if(get_object_flags($obj_type) & NF_LOG && $id && !$errors) add_object('changelog', array('obj_type' => $obj_type, 'parent_id' => $id, 'action' => "New $obj_type $id"));
  return array($id, $errors);
}

// update one object
function update_object($obj_type, $data, $id, $parent_id=0, $parent_type='') {
  if(!$id) die ("update_object $obj_type: missing id");
  return save_object_query($obj_type, $data, $id, $parent_id, $parent_type);
}

// update multiple objects (with different data - id and data are both array with corresponding indeces)
function update_objects_array($obj_type, $data_array, $ids, $parent_id=0, $parent_type='') {
  if(!$ids) die ("update_objects_array $obj_type: missing id");
  $ids = is_array($ids) ? $ids : explode(',', $ids); // convert to array
  if(!is_array($ids)) die ("update_objects_array: id must be comma separated list or array");
  $i=0;
  $errors = array();
  foreach($ids as $id) {
    $data = $data_array[$i];
    list($nid, $nerrors) = update_object($obj_type, $data, $id, $parent_id, $parent_type);
    if($nerrors) $errors = array_merge($errors, $nerrors);
    $i++;
  }
  return array($ids, $errors);
}

// deletes multiple objects
function delete_objects($obj_type, $ids, $check_relations=true) {
  if(!$ids) die ("delete_objects $obj_type: missing id");
  $ids = is_array($ids) ? $ids : explode(',', $ids); // convert to array
  if(!is_array($ids)) die ("delete_objects: id must be comma separated list or array");
  foreach($ids as $id) $result += delete_object($obj_type, $id, $check_relations);
  return $result;
}

// update multiple objects (with same data)
function update_objects($obj_type, $data, $ids, $parent_id=0, $parent_type='') {
  if(!$ids) die ("update_objects $obj_type: missing id");
  $id_list = is_array($ids) ? implode(',', $ids) : $ids;
  return save_object_query($obj_type, $data, $id_list, $parent_id, $parent_type);
}

// returns all objects that match filters;
function find_objects($obj_type, $searchArray='', $sort=0, $order=0, $start=0, $limit=0, $selected_fields='') {  
  $filters = search2filters($searchArray);
  return get_objects($obj_type, $filters, $sort, $order, $start, $limit, $selected_fields);
}

// returns first object that matches filters;
function find_object($obj_type, $searchArray, $field='', $sort=0, $order=0) {
  $filters = search2filters($searchArray);
  //if($obj_type == 'org') {dump($searchArray);dump($filters);die();}
  $result = get_objects($obj_type, $filters, $sort, $order, 0, 1, $field);
  $first = is_array($result) ? $result[0] : $result; // might return just one value if $field is singular: todo: check for multiple fields
  return $first;
}

// converts from textual operator (ne, eq, lt etc) to SQL operator
// used by jqGrid's advanced search
function operator_text2sql($field, $op, $data) {
  switch($op) {
    case 'eq': // equal ( = )                            
      return "$field = '$data'";
    case 'ne': // not equal ( <> )                       
      return "$field <> '$data'";
    case 'lt': // less than ( < )                        
      return "$field < '$data'";
    case 'le': // less than or equal to ( <= )           
      return "$field <= '$data'";
    case 'gt': // greater than ( > )                     
      return "$field > '$data'";
    case 'ge': // greater than or equal to ( >= )        
      return "$field >= '$data'";
    case 'bw': // begins with ( LIKE val% )              
      return "$field LIKE '".$data."%'";
    case 'ew': // ends with (LIKE %val )                 
      return "$field LIKE '%".$data."'";
    case 'cn': // contain (LIKE %val% )                  
      return "$field LIKE '%".$data."%'";
    default:
      return "";
  }
}

// alias
function seaarch2sql($search) {
  return search2where($search);
}

function search2where($search) {
  $filters = search2filters($search);
  return is_array($filters) ? implode(" AND ", $filters) : '';  
}

// converts associate array of search terms to array of sql filters
function search2filters($array, $noquotes=false) {
  if(!$array) return;
  global $mysqli;
  // $array = array_filter($array); // remove empty elements if any
  $filters = array();
  $operators = get_operators();
  //if(is_object($array)) $array = array2obj($array);
  if(is_object($array)) $array = (array) $array;

  if(!is_array($array) && $_SESSION['dev']) {
    echo("Search2filters: arg not array");
    dump($array);
    $array = (array) $array;
  }
  foreach($array as $k => $v) {    
    // if($k == DB_LOGICAL_AND) {
    //   echo("k='AND'"); dump($v);
    // }
    $filter = $filter2 = '';
    if($k == DB_LOGICAL_OR && is_array($v) && count($v) >= 2) { 
      // can only be used once, and only for different keys like this - see below for use for same key
      // $search[DB_LOGICAL_OR] = array('city_id' => 1000, 'site_id' => 10); 
      $terms = search2filters($v);
      if(count($terms) >= 2) $filter= '('.implode(' OR ', $terms).')';
    } elseif($k == DB_LOGICAL_AND && is_array($v) && count($v) >= 2) {      
      $terms = search2filters($v);
      // dump($v);
      //dump($terms);
      //echo('got here');
      if(count($terms) >= 2) $filter= '('.implode(' AND ', $terms).')';
    } elseif(is_array($v) && count($v) > 1) {
      $operator = $v[0];
      $val1 = is_array($v[1]) ? $v[1] : mysqli_real_escape_string($mysqli, $v[1]);     
      $val2 = is_array($v[2]) ? $v[2] : mysqli_real_escape_string($mysqli, $v[2]);     
      //if($k=='address.first_name') echo("k=$k v=$val1 v2=$val2 operator=$operator<br>");
      //if($k=='lang' && $operator=='en') dump($array);

      if(is_array($val1)) {
        // usage: $search['city'] = array(DB_LOGICAL_OR, array("*$city_id*", 0, ATT_DEFAULT_NULL, array('>', 1000)));
        if(($operator == DB_LOGICAL_OR || $operator == DB_LOGICAL_AND) && is_array($val1) && count($val1) >= 2) {
          $sep = $operator == DB_LOGICAL_OR ? " OR " : " AND ";
          $t = array();
          foreach($val1 as $v1) {
            $tf = search2filters(array($k => $v1), $noquotes);
            $t[] = count($tf) > 1 ? '('.implode(' AND ', $tf).')' : $tf[0];
          }
          $filter = '('.implode($sep, $t).')';
        } elseif($operator == '=') {
          $filter= "$k IN ('".implode("','", $val1)."')";    
        } elseif($operator == '!=' || $operator == '<>') {
          $filter= "$k NOT IN ('".implode("','", $val1)."')";    
        }
      } elseif($operator == '=' && $val1 === ATT_DEFAULT_NULL) {
        $filter= "$k IS NULL";
        //echo("v=$v ATT_DEFAULT_NULL='".ATT_DEFAULT_NULL."'");dump($array);dump($filters);die();
      } elseif($operator == '!=' && $val1 === ATT_DEFAULT_NULL) {
        $filter= "$k IS NOT NULL";
      } elseif($operator == '><' && strlen($val2)) {
        $filter= "$k >= '$val1'";
        $filter2= "$k <= '$val2'";
      } elseif($operator == DB_CONTAINS_OPERATOR) {
        $filter = "$k LIKE '%$val1%'";
      } elseif($operator == DB_BEGINS_WITH_OPERATOR) {
        $filter = "$k LIKE '$val1%'";
      } elseif($operator == DB_ENDS_WITH_OPERATOR) {
        $filter = "$k LIKE '%$val1'";
      } elseif(in_array($operator, $operators)) {
        $filter= "$k $operator '$val1'";
      } else { // operator not found, assume "IN"
        $filter= "$k IN ('".implode("','", $v)."')";    
      }
    } else {
      if(is_array($v)) $v = $v[0]; // array with only one element
      $val1 = mysqli_real_escape_string($mysqli, $v);
      // if($k=='address.first_name') echo("k=$k v=$val1 operator=$operator<br>");
      if(strpos($val1, '*') !== FALSE) { // allow wild cards (textual begins with, ends with, contains)
        $filter = "$k LIKE '".str_replace('*', '%', $val1)."'";
      } elseif($val1 === ATT_DEFAULT_NULL) {
        $filter= "$k IS NULL";
      } else {
        $filter= "$k = '$val1'";
      }
    }  
  
    $filters[] = $noquotes ? str_replace("'", '', $filter) : $filter; 
    if($filter2) $filters[] = $noquotes ? str_replace("'", '', $filter2) : $filter2; 
  }         
  return $filters;
}

function search2qs($searchArray) { 
  $qs=array();
  foreach($searchArray as $var => $search) $qs[]= "_search_$var=".search2text($search);
  return implode('&', $qs);
}

// converts associative array of search terms to text used in GET or POST field to search recordset
function search2text($search) { 
  $operators = get_operators();
  if(!is_array($search)) return $search;
  $operator = array_shift($search);
  if(in_array($operator, $operators)) return $operator.implode(',', $search);
  return "??";
}

// converts text from GET or POST field to associative array of search terms
function text2search($searchVal) {
   // numeric operators
  if(strpos($searchVal, '<=') === 0) {
    return array('<=', trim(substr($searchVal,2)));
  } elseif(strpos($searchVal, '>=') === 0) {
    return array('>=', trim(substr($searchVal,2)));
  } elseif(strpos($searchVal, '<>') === 0 || strpos($searchVal, '!=') === 0) {
    return array('<>', trim(substr($searchVal,2)));
  } elseif(strpos($searchVal, '><') === 0) { // in between
    return array_merge(array('><'), split(',', trim(substr($searchVal,2))));
  } elseif(strpos($searchVal, '!') === 0) {
    return array('<>', trim(substr($searchVal,1)));
  } elseif(strpos($searchVal, '<') === 0) { 
    return array('<', trim(substr($searchVal,1)));
  } elseif(strpos($searchVal, '>') === 0) { 
    return array('>', trim(substr($searchVal,1)));
  } elseif(strpos($searchVal, '=') === 0) { 
    return trim(substr($searchVal,1));
  } elseif(strpos($searchVal, '*') !== FALSE) { // allow wild cards (textual begins with, ends with, contains)
    return $searchVal;
  } else {
    //return $searchVal; // "Equal" is default operator
    return $searchVal."*"; // textual "Begins with" is default operator
  }
}

// converts comma separated list to sql filter string
//function list2filters($list) {
//  if(!$list) return;
//  $array = explode(',', $list);
//  foreach($array as $item) {
//    list($k, $v) = explode('=', $item);
//    $filters[]= "$k = '$v'";
//  }
//  return $filters;
//}

// same as add or update, but id passed explicitly
function save_object($obj_type, $data, $id=0) {    
  if(!$obj_type) die("Cannot save object - missing object type");
  if($id) return update_object($obj_type, $data, $id);
  //echo("adding object $obj_type");dump($data);die();
  return add_object($obj_type, $data);
}

// same as save, but id passed implicitly in data
function add_or_update_object($obj_type, $data, $parent_id=0) {    
  if($id=get_object_id($obj_type, $data)) return update_object($obj_type, $data, $id, $parent_id);
  return add_object($obj_type, $data, $parent_id);
}

function get_object_id($obj_type, $data) {
  $key = get_object_key($obj_type);
  return is_object($data) ? $data->$key : $data[$key];
}


// returns array of fields that have changed (optionally including details of what changed)
// optionally logs changes to table changlog
// todo implement test for relations (one2one, one2many, etc)
function compare_objects($obj_type, $orgObj, $newObj, $show_details=false, $log_changes=false, $get_relations=false) {
  $class_def = get_class_def($obj_type, $get_relations);

  $fields = $class_def->fields;
  $key = $class_def->key;
  $id = $orgObj->$key;
  $changes = array();
  foreach($fields as $field => $attributes) {
    $from = $to = $change_id = $change_str = '';
    
    $field_name = $attributes[ATT_NAME];
    $att_type = $attributes[ATT_TYPE];
    $att_flags = $attributes[ATT_FLAGS];
    $att_options = $attributes[ATT_RELATION_TYPE];
    $child_field = false;
    // only use db field name w/o parent. (so address.first_name => first_name) 
    if($get_relations && ($p=strrpos($field, '.'))) {
      $field = substr($field, $p+1);
      $child_field = true;
    }
    
    $from = $orgObj->$field;
    $to = $newObj->$field;
        
    if($att_type == 'dummy') {
      continue;
    } elseif($att_type == 'one2one') {
      continue;
    } elseif($att_type == 'one2many') {
      continue;
    } elseif($att_type == 'many2one') {
      $from_str = get_select_value2($att_options, $from);
      $to_str   = get_select_value2($att_options, $to);
    } else {
      $from_str = $from;
      $to_str = $to;
    }
    $changed = $from != $to;
    $change_str = "$field_name: '$from_str' => '$to_str'";
    if($changed) {
      if($log_changes && !$child_field && ($attributes[ATT_FLAGS] & AF_LOG)) {
        $changeArray['obj_type'] = $obj_type;
        $changeArray['parent_id'] = $id;
        $changeArray['field'] = $field;
        $changeArray['from_value'] = $from;
        $changeArray['to_value'] = $to;
        $changeArray['action'] = $change_str;
        list($change_id, $change_errors) = add_object('changelog', $changeArray);
      }
    
      if($show_details) {
        $changes[$field]['old'] = $from;
        $changes[$field]['new'] = $to;
        $changes[$field]['str'] = $change_str;
        $changes[$field]['id']  = $change_id;
      } else {
        $changes[] = $field;
      }
    }
  }
  return $changes;
}

// copies any object fields from $source to $dest if they are in class definition
// if overwrite = false, the value of destination will be preserved if set
function copy_object_vars($obj_type, $source, $dest=NULL, $overwrite=true) { 
  if(is_array($source)) $source = array2obj($source);
  if(is_array($dest)) $dest = array2obj($dest);
  $class_fields = get_object_attributes($obj_type, true);
  foreach($class_fields as $full_key => $val) {
    $key = ($pos = strpos($full_key, '.')) ? substr($full_key, $pos+1) : $full_key; // composite field, use last only
    $val = trim($source->$key);
    if(isset($source->$key) && ($overwrite || !isset($dest->$key))) $dest->$key = $val; // exists, not already set, copy
  }
  return $dest;
} 

// performs shallow copy (no relations)
function copy_object($obj_type, $src_id, $dest_id=0) {
	$src_obj = get_object($obj_type, $src_id);
  $key = get_object_key($obj_type);
	unset($src_obj->$key);
	if($dest_id) {
	  //echo("copy_object: updating $dest_id<br>");
	  list($new_id, $errors) = update_object($obj_type, obj2array($src_obj), $dest_id);
	} else {
	  //echo("copy_object: fresh copy<br>");
	  list($new_id, $errors) = add_object($obj_type, obj2array($src_obj));
	}
	return array($new_id, $errors);		
}

function get_object($obj_type, $id, $selected_fields='', $ignore_filters=false) {
  global $db;
  if(!$id) {
    print_debug("get_object $obj_type: missing id");
    return NULL;
  }
  
  if($selected_fields) {
    $fields = is_array($selected_fields) ? $selected_fields : explode(',', $selected_fields);
    $field_count = count($fields);
  }
  
  $qs = get_object_query($obj_type, $id, $fields, $ignore_filters);
  //if($obj_type == 'news') echo($qs);
  $result = $field_count == 1 ? $db->getOne($qs) : $db->getRow($qs);
  check_db_result($result);    
  return $result;
}

// returns value of field from object with id
// IMPORTANT NOTE: This does not fetch child fields (one2one). Use get_object_value for this.
function get_object_field($obj_type, $id, $field) {
  if(!$field) return '';

  global $db;
  $key = get_object_key($obj_type);
  $table = get_object_table($obj_type);
  $qs = "SELECT $field FROM $table WHERE $key='$id'";
  return $db->getOne($qs);
}

// returns column of field from objects in id_list (array or comma separated);
function get_objects_field($obj_type, $id_list, $field) {
  global $db;
  if(is_array($id_list)) $id_list = implode(',', $id_list); // handle array
  $key = get_object_key($obj_type);
  $table = get_object_table($obj_type);
  $qs = "SELECT $field FROM $table WHERE $key in ($id_list)";
  return $db->getCol($qs);
}

function get_object_value($obj_type, $desc_fields, $id) {
  global $db;

  if(!$obj_type) mydie ("get_object_value: missing obj_type or desc_fields");
  if(!$desc_fields) mydie ("get_object_value: missing desc_fields");
  if($id == '') mydie ("get_object_value: missing id");
  
  $target_fields = explode(',', $desc_fields);
  
  //$target_fields = parse_descriptor_string($desc_fields);
  //$target_fields = strpos($desc_fields, ',') ? "" : $desc_fields;
  
  $query = get_object_value_query($obj_type, $target_fields, "", "", $id);
  // echo("gov: fields=$desc_fields q=$query<br>");
  $count = count($target_fields);
  if($obj_type == 'owner') {
    // dump($target_fields);
    // echo($desc_fields.html_break().$query.html_break());
  }
  $row = $count>0 ? $db->getRow($query, NULL, NULL, NULL, MDB2_FETCHMODE_ORDERED) : $db->getOne($query);
  return $row;
}

function get_objects($obj_type, $filters='', $sort=0, $order=0, $start=0, $limit=0, $selected_fields='') {
  global $db;
  if(!$obj_type) {dump($filters); mydie("get_objects: missing type.");};
  $query_str = get_object_query($obj_type, '__none', $selected_fields);
  if($filter_str = is_array($filters) ? implode(" AND ", $filters) : $filters) $query_str .= strpos($query_str, ' WHERE ') ? " AND ($filter_str)" : " WHERE $filter_str";
  if(!$sort) $sort = get_object_sort_clause($obj_type);
  $explicit_order = strpos(strtolower($sort), ' desc') || strpos(strtolower($sort), ' asc'); // sort direction already specifiect in $sort var.    
  $query_str = $query_str.($sort ? " ORDER BY $sort":"").(($sort && $order && !$explicit_order) ? " DESC" : "");
  if($start || $limit) {
    if($start && $limit) { // start and limit
      $query_str = $query_str." LIMIT $start, $limit";
    } elseif($limit) { // limit only
      $query_str = $query_str." LIMIT $limit";
    } else { // start only
      $query_str = $query_str." LIMIT $start, 18446744073709551615";
    }
  }

  //if($obj_type=='site') {echo("<br>$query_str<hr>");dump($filters);};
  // if($obj_type == 'server') {echo("<br>$query_str<hr>");dump($filters);}    
  // todo - check for comma list
  //if($selected_fields && !is_array($selected_fields) && strpos($selected_fields, ',') === FALSE) { // just one field
  //  $result = $db->getOne($query_str);
  //} else
  
  if(!$selected_fields || is_array($selected_fields) || strpos($selected_fields, ',')) { // 2 or more fields
    //echo("get all<br>");
    $result = $db->getAll($query_str);
  } else {
    //echo("get col<br>");
    $result = $db->getCol($query_str); // just one field
  }  
  $count = count($result);
  // if($obj_type == 'news') echo("<br>count=$count dbname=$db->database_name<br>");
  //if($obj_type=='product') {echo("<br>$query_str<hr>");dump($filters);dump($result);}

  check_db_result($result);    
  
  return $result;
}

function delete_object($obj_type, $id, $check_relations=true) {
  global $db;
  // die("delete_object $obj_type $id - ");
  print_debug("delete_object $obj_type $id - ");
  $data = get_object($obj_type, $id);
  print_debug("deleting type $obj_type with ID=$id<br>");
  $table = get_object_table($obj_type);
  $key = get_object_key($obj_type);
  $obj = get_object($obj_type, $id);
	if($check_relations) {
	  print_debug(" ... checking dependents");
	  $fields = get_object_attributes($obj_type, 0);
	  foreach($fields as $field=>$attributes) {
	    $att_type = $attributes[ATT_TYPE];
	    $att_flags = $attributes[ATT_FLAGS];
	    $att_options = $attributes[ATT_RELATION_TYPE];
	    $att_args = $attributes[ATT_ARGS];
	    $att_args2 = $attributes[ATT_ARGS2];

	    if($att_type == 'dummy' || $att_flags & AF_DUMMY) continue;
	    if($att_type == 'one2one' && (($att_flags & AF_CASCADE_DELETE) || ($att_flags & AF_OBLIGATORY))) {
	      $child_table = get_object_table($att_options);
	      $child_id = $db->getOne("SELECT $field FROM $table WHERE $key='$id'");
	      if($child_id) {
	        print_debug("type $obj_type has one2one $field of type $att_options, id=$child_id with Cascade Delete - deleting $att_options id=$child_id<br>");
	        delete_object($att_options, $child_id);
	      } else {
	        print_debug("type $obj_type has one2one $field of type $att_options, id=$child_id with Cascade Delete - ID is NULL, not deleting $att_options id=$child_id<br>");
	      }
	    }
	    if($att_type == 'one2many' && ($att_flags & AF_CASCADE_DELETE)) {
        $child_type = parse_filter($att_options, $obj);
	      $child_table = get_object_table($child_type);
	      $child_key = get_object_key($child_type);
	      list($parent_type, $parent_key) = get_object_parent($child_type);
        $child_filter = "";
        if($parent_key) {
          $child_filter = "$parent_key='$id'";
  	      print_debug("type $obj_type ($id) has one2many $field of type $child_type, ids=($child_id_list) with Cascade Delete - deleting<br>");
	      } else { // e.g. log, many parents, use filter from class_defs
  	      print_debug("no parent_key, using att_args2 = '$att_args2'<br>");
  	      if(!($att_args && $att_args2)) continue; //print_debug("delete_object: did not find parent_key or filter for child of type $att_options");
  	      $child_filter = "$att_args2 AND $att_args=$id";
        }
	      $child_qs = "SELECT $child_key FROM $child_table WHERE $child_filter";
	      $child_ids = $db->getCol($child_qs) ?: array();
	      if(is_array($child_ids) && count($child_ids)) {
	        $child_id_list = implode(',',$child_ids);
          print_debug("Child QS: $child_qs<br>");
          foreach($child_ids as $child_id) {
            delete_object($att_options, $child_id);
          }
        }
	    }
	  }
	} else {
	  print_debug(" ... ignoring dependents");
	}
  if(!$id) die ("delete_object: couldn't delete $obj_type, missing id");
  if(!$table) die ("delete_object: couldn't delete $obj_type id $id, no table found for $obj_type.");
  $qs = "DELETE from $table WHERE $key='$id'";

	pre_delete($obj_type, $data);
	// dump($data);
	$result = db_query($qs);
  print_debug("qs: $qs<br>");
	post_delete($obj_type, $data);

	// loggin
  if(get_object_flags($obj_type) & NF_LOG && $id && !$errors) add_object('changelog', array('obj_type' => $obj_type, 'parent_id' => $id, 'action' => "Delete $obj_type $id"));

	return $result;
}

function is_object_set($obj_type, $data) {
  $child_fields = get_object_attributes($obj_type, 0);
  foreach($child_fields as $child_field=>$child_class) {
    if(isset($data[$child_field])) return true;
  }
  return false;
}

function get_objects_count($obj_type, $filters='', $id=0) {
  global $db;
  $query_str = get_object_query($obj_type);
  $key = get_object_key($obj_type);
  $table = get_object_table($obj_type);
  if($id) $filters[] ="$table.$key = '$id'";
  if(is_array($filters)) {
    //dump($filters);
    $filter_str = implode(" AND ", $filters);
  } else {
    $filter_str = $filters;
  }
  if($filter_str) {
    if(strpos($query_str, " WHERE ")) {
      $query_str.=" AND $filter_str";
    } else {
      $query_str.=" WHERE $filter_str";
    }
  }
  $pos1 = strpos($query_str, ' ');
  $pos2 = strpos($query_str, ',');
  $pos3 = strpos($query_str, ' FROM ');
  $first_field =  substr($query_str, $pos1+1, $pos2-$pos1-1);
  $rest = substr($query_str, $pos3);
  $query_str = "SELECT count(".$first_field.") ". $rest;

  //$qs2 = substr($query_str, $pos2, $);
  $count = $db->getOne($query_str);
  check_db_result($count);    
  //if($obj_type=='site') echo("obj_count=$count<br><b>".$query_str."</b><br>");
  return $count;
}

function get_object_query($obj_type, $id='__none', $selected_fields='', $ignore_filters=false) {
  //echo("get_object_query: type=$obj_type id=$id<br>");

  $table = get_object_table($obj_type);
  $key = $table.".".get_object_key($obj_type);
  $get_relations = $id != '__none';
  $classVars = get_object_attributes($obj_type, 1);
  //dump($classVars);
  $fields = array();
  $tables = array();
  $where = array();
  $tables[] = $table;

  foreach($classVars as $field=>$class) {
    $att_type = $class[ATT_TYPE];
    $att_flags= $class[ATT_FLAGS];

    //echo("get_object_query: type='$obj_type' id=$id - processing $field ($att_type) dummy = ".AF_DUMMY." dummy set=".($att_flags & AF_DUMMY ? "true" : "false")." <br>");

    if($att_type == 'one2many') continue;
    if($att_type == 'dummy' || $att_flags & AF_DUMMY) continue;
    if(!is_array($class)) continue;
    $elements = explode(".", $field);
    $level = sizeof($elements);
    if($elements[$level-1]=='0') continue;
    if($level>1) {
      //dump($elements);
      //echo("get_object_query: calling get_object_table with ".$elements[$level-2]."<br>");
      $db_field = get_object_table($elements[$level-2]).".".$elements[$level-1];
    } else {
      $db_field = $table.".".$field;
    }

    // special MySQL access functions
    if($att_type == 'ip') {
      $db_field= "INET_NTOA($db_field) AS $field";
    } elseif($att_type == 'crypt' || $att_flags & AF_ENCRYPT) {
      $db_field = "AES_DECRYPT($db_field, '$_SESSION[sqlgarbage]') AS $field";
    }
    
    $fields[] = $db_field;
    // get one2one fields only for individual records - not list
    if($att_type == 'one2one' && (($att_flags & AF_ONE2ONE_INTEGRATE) || ($att_flags & AF_OBLIGATORY))) {
      //$subclassVars = get_object_attributes($class[ATT_RELATION_TYPE], 0);
      $att_table = get_object_table($class[ATT_RELATION_TYPE]);
      $att_key = get_object_key($class[ATT_RELATION_TYPE]);
      $tables[$att_table] = $att_table;
      $where[] = "($db_field = $att_table.$att_key)";
    } else { // just show id as link
    }
  }
  
  if($selected_fields) {
    $fields = $selected_fields;  // limit query to one or more fields
  }
  $fields_str = is_array($fields) ? implode(', ', $fields) : $fields;   
  $tables = implode(',', $tables);

  // if($selected_fields && $obj_type == 'reservation') echo("goq sf=$selected_fields str=$fields_str<br>");

  //if($selected_fields) echo("<b>fields_str = $fields_str</b><br>");
  
  // add mandatory class filters
  if(!$ignore_filters) {
    if($search_filters = class_filters($obj_type)) $where = array_merge($where, $search_filters);
  }
  // dump($id);
  
  if($id != '__none') $where[] = "$key='$id'";
  $where = implode(" AND ", $where);
  if($where) $where = "WHERE $where";
  $qs = "SELECT $fields_str FROM $tables $where";

  return $qs;
}


function get_object_descriptor_string($obj_type, $id) {
  $descriptor = get_object_descriptor($obj_type);
  // if($obj_type == 'cc') echo("get_object_descriptor_string($obj_type, $id)=$descriptor<br>").dump($descriptor);
  $value = get_object_value($obj_type, $descriptor, $id);
  //if($obj_type=='owner') echo("get_object_value($obj_type, $descriptor, $id)=<br>").dump($value);
  return $value;
}

function get_object_descriptor_list($obj_type, $filters="", $sort="") {
  $descriptor = get_object_descriptor($obj_type);
  //dump($filters);
  return get_object_value_list($obj_type, $descriptor, $filters, $sort);
}

function get_object_value_list($obj_type, $desc_fields, $filters="", $sort="") {
  global $db;
  if(!$obj_type) die ("get_object_value_list: missing obj_type or desc_fields");
  if(!$desc_fields) die ("get_object_value_list: missing desc_fields");
  $target_fields = parse_descriptor_string($desc_fields);
  $query = get_object_value_query($obj_type, $target_fields, $filters, $sort);
  //if($obj_type == 'org') echo("query is $query, sort=$sort target_fields=".dump($target_fields)."<br>");
  //  if($filters) echo("<br>query filters = '$filters'<br>");
  //}
  $rows = $db->getAll($query, NULL, NULL, NULL, MDB2_FETCHMODE_ORDERED);
  //dump($rows);
  return $rows;
}


// takes an object and returns it's description, typically $obj->name
function get_object_description($obj_type, $obj) {
  $descriptor = get_object_descriptor($obj_type);
  $fields = parse_descriptor_string($descriptor);
//  dump($fields);
  foreach($fields as $table_field) {    
    $field = array_pop(explode('.', $table_field)); // use only field name, not table. dot notation
    $description .= $obj->$field." ";
  }
  return trim($description);
}

function parse_descriptor_string($fields) {
  // todo: use reg_ex to allow for characters other than space
  return explode(",", $fields);
}

// takes and array of fields in dot.notation and returns the result
// if id is set, returns only row where key=id

function get_object_value_query($obj_type, $target_fields, $filters="", $sort="", $id='__none') {
  if(!is_array($target_fields)) $target_fields = array($target_fields);

  //dump($target_fields);
  $table = get_object_table($obj_type);
  $key = $table.".".get_object_key($obj_type);
  $classVars = get_object_attributes($obj_type, 1);
  $fields = array();
  $tables = array();
  $where = array();
  //if($filters) $where = is_array($filters) ? search2filters($filters) : explode(',', $filters); // can be comma separated list or searchArray
  if($filters) $where = is_array($filters) ? search2filters($filters) : array($filters); // can be comma separated list or searchArray
  $tables[] = $table;
  //if($obj_type=='owner') {dump($classVars);die();}
  foreach($classVars as $field => $class) {
    $elements = explode(".", $field);
    $level = sizeof($elements);
    if($elements[$level-1]=='0') continue;
    if($level>1) {
      $db_field = get_object_table($elements[$level-2]).".".$elements[$level-1];
    } else {
      $db_field = $table.".".$field;
    }

    $att_type = $class[ATT_TYPE];
    $att_flags= $class[ATT_FLAGS];

    if(in_array($field, $target_fields) || in_array($db_field, $target_fields)) {
      $fields[] = $db_field;
    }
    if($att_type == 'dummy') continue;
    if($att_type == 'one2one' && (($att_flags & AF_ONE2ONE_INTEGRATE) || ($att_flags & AF_OBLIGATORY))) {
    //if($id > -1 && $att_type == 'one2one') {
      $att_table = get_object_table($class[ATT_RELATION_TYPE]);
      $att_key = get_object_key($class[ATT_RELATION_TYPE]);
      $tables[$att_table] = $att_table;
      $where[] = "$db_field = $att_table.$att_key";
    }
  }
  $fields = implode(',', $fields);
  if(!sizeof($fields)) {
    $tf = implode(", ", $target_fields);
    die ("get_object_value_query: none of the target_fields $tf where found in the definition of $obj_type");
  }
  $tables = implode(',', $tables);
  if($id!='__none') $where[] = "$key='$id'";
  
  if(count($where)) $where_str = "WHERE ".implode(" AND ", $where);
    
  //echo("sort for $obj_type preset to '$sort' - ");
  $sort_clause = $sort ? $sort : get_object_sort_clause($obj_type);
  //echo("now '$sort_clause'<br>");

  $sort = $sort_clause ? "ORDER BY $sort_clause": "";
  //echo("fields='$fields'<br>");
  $qs = $fields ? "SELECT $key, $fields FROM $tables $where_str $sort" : "SELECT $key FROM $tables $where_str $sort";
  //$qs = $fields ? "SELECT $fields FROM $tables $where $sort" : "SELECT $key FROM $tables $where $sort";
  //$qs = "SELECT $fields FROM $tables $where";
  print_debug("get_object: $qs<br>");
  return $qs;
}


function save_object_query($obj_type, $data, $id=0, $parent_id=0, $preset_id=0, $parent_type='') {
  if($_SESSION['readonly']) return array(0, "System is in readonly mode.");
  if(!$obj_type) {
    if($_SESSION['dev']) {
      mydie("Soq: missing object type");
    } else {
      $errors[] = "Save Object: missing object type";
      return array($id, $errors, $messages);
    }
  }
  // if($obj_type == 'shortstay') echo("soq - $obj_type id= $id<br>");
	//print_debug("save_object_query($obj_type, $data, $id, $parent_id");
  global $mysqli;
  
  $orgObj = $id ? get_object($obj_type, $id) : NULL;
  //dump($orgObj);
  $new = $id ? false : true;

  if(is_object($data)) $data = obj2array($data);
  if($id && strpos($id, ',')) {
    $id_list = str_replace(' ', '', $id); // update multiple
    $ids = explode(',', $id_list);
  }

  $fields = get_object_attributes($obj_type, 0);
  $obj_keys = array_keys($fields);
  $data_keys = array_keys($data);
  
  //if($id) {
  //  echo("ot=$obj_type obj-keys:");
  //  dump($obj_keys);
  //  dump($data_keys);
  //  die();
  //}


	// generic handlers  
  if($new) {
		list($data, $errors) = pre_add($obj_type, $data);
	} elseif(!$id_list) {
		list($data, $errors) = pre_edit($obj_type, $data, $orgObj);
	}

  //if($obj_type == 'reservation') dump($data);  

  //if($obj_type=='reservation') {dump($data);mydie();}

	//if($obj_type == 'longstay_enquiry' ) {
	//  echo("save_object_query($obj_type, $data, $id, $parent_id<br>");
	//  dump($data);
	//  dump($errors);
	//}


  if($errors) return array($id, $errors); // pre add or pre edit failed
    
  global $db;
  $table = get_object_table($obj_type);
  $flags = get_object_flags($obj_type);
  $obj_name = get_object_name($obj_type);
  $errors = array();
  $children = array();
  $terms = array();
  $flds = array();
  $vals = array();
  //dump($class);
  //dump($data);
  //dump($fields);
  // dump($fields);
  
	//echo("soq $obj_type").dump($data);die();

  foreach($fields as $field => $class) {

    $att_options = $class[ATT_LENGTH];
    $att_default = $class[ATT_DEFAULT];
    $att_name = $class[ATT_NAME];
    $att_type = $class[ATT_TYPE];
    $att_flags = $class[ATT_FLAGS];
    $att_args = $class[ATT_ARGS];

    if($att_type == 'many2many') continue;
    if($att_type == 'one2many') continue;
    //echo("save_object_query: type='$obj_type' id=$id - processing $field ($att_type) dummy = ".AF_DUMMY." dummy set=".($att_flags & AF_DUMMY ? "true" : "false")." <br>");

    if($att_type == 'dummy' || $att_flags & AF_DUMMY) continue;
    //if(!$id && $att_type == 'one2one') continue; // skip children for new objects, as these have been processed above
    
    if($id) { // this is an update
      if($att_type == 'one2one') { // child add/update
        $child_type = $att_options;
        //if($child_id = $data[$field]) {
        //  //echo("data: child id ($field) of $obj_type $id = $child_id<br>");
        //} else {
        //  $child_id = get_object_field($obj_type, $id, $field); // it might not be passed in data
        //  //echo("obj: child id ($field) of $obj_type $id = $child_id<br>");
        //}
        
        $child_id = $data[$field] ?: get_object_field($obj_type, $id, $field); // it might not be passed in data
        
        
        $child_data = $data; // copy
        $child_data['parent_type'] = $obj_type; 
        $child_data['parent_id'] = $id; // is this always ok ?
        list($new_child_id, $child_errors) = save_object($child_type, $child_data, $child_id); // delegate to child (add or update)
        //echo("Called update child of $obj_type $id: child=$child_type ($child_id) new id=$new_child_id<br>");
        //dump($child_data);
        if($child_errors) $errors = $child_errors;
        $data[$field] = $new_child_id; // a child was added, update parent
      } else if(!in_array($field, $data_keys)) {
        continue; // for updates, we only care about the data actually passed 
      }
    }
    
    $key = get_object_key($obj_type);
    
    $enclose = true; // by default, enclose values in single quotes
    $escape = true; // by default, enclose values in single quotes
    // echo("$obj_type: field=$field type=$att_type val=$att_val<br>");

    // for new object, use default if field is not defined
    if($new) {
      $att_val = isset($data[$field]) ? $data[$field] : get_field_default($att_default);
      
    } else {
      if(!isset($data[$field]) && $att_type != 'one2one') continue; // skip field on update if not defined
      $att_val = $data[$field];
    }

    //if($obj_type == 'cc') echo("att_type = $att_type field=$field key=$key<br>");

    if($field==$key) continue; // do not process id for new objects
    if($field=='0') continue;

    if($parent_id && $att_type == 'parent_id' && !$att_val) $att_val = $parent_id; // set parent to passed value $parent_id
    if($parent_id && $att_type == 'parent_type' && !$att_val) $att_val = $parent_type; // set parent to passed value $parent_id
    if($att_type == 'color') $att_val = ltrim($att_val, '#');
    if($att_type == 'bool' && $att_val === 'on') $att_val = 1; // so if "on", sets to 1, otherwise 0
              
    // special MySQL access functions
    if($att_type == 'ip') {
      $att_val = "INET_ATON('$att_val')";
      $enclose = false;
    } elseif($att_type == 'password') {
      $att_val = generateHash($att_val);
    } elseif($att_type == 'image') {
      $att_val = str_replace(' ', '+', $att_val); 
    } elseif($att_type == 'crypt' || $att_flags & AF_ENCRYPT) {
      $att_val = "AES_ENCRYPT('$att_val', '$_SESSION[sqlgarbage]')";
      $escape = false;
      $enclose = false;
    } 

    // check obligatory    
    if($required = $att_flags & AF_OBLIGATORY) {
      // if($att_type == 'datetime') echo("Datetime: $att_name is required, value = '$att_val'<br>");
      // if(in_array($att_type, array()) && ) 

      // booleans: allow 0 or 1
      if($att_type == 'bool') {
        if(!isset($att_val)) $errors[] = "$att_name: ".phrase('required', CAPITALIZE);
      } elseif($att_type == 'one2one') { // supress error (assume message is triggered by other error (which is shown)
      } else { // others: must be value other than '' or 0
        //echo("fld=$field att_val = '$att_val'<br>");
        if(!$att_val) $errors[] = "$att_name: ".phrase('required', CAPITALIZE);
      }
    }
    
    // check uniqueness
    if($att_val && ($att_flags & AF_UNIQUE) && exists($table, $field, $att_val, $key, $id)) {
      $errors[] = "$att_name: '$att_val' already exists and must be unique - please choose another $att_name";
    }

    // other checks
    if($error = object_attribute_validate($field, $att_type, $att_val, $required)) $errors[] = $error;
    
    if(is_object($att_val)) {dump($att_val);mydie("$field is object");}
    if(is_array($att_val)) {dump($att_val);mydie("$field is array");}
    //if(!is_string($att_val)) {dump($att_val);die("$field is not string att_val='$att_val'");}
    if($att_val=='' && $att_default === ATT_DEFAULT_NULL) { // value is blank and default is null
      if(!$id) {
        continue;  // new - don't add to query
      } else {     // edit - use NULL value
        $att_val = "NULL";
        $enclose = false;      
      }
    }

    // escape text strings
    if($escape && in_array($att_type, array('str', 'text', 'html', 'password', 'mail_subject', 'mail_body'))) {
      if(get_magic_quotes_gpc()) $att_val = stripslashes($att_val); // we don't know if data was posted, so we risk stripping twice
      $att_val = mysqli_real_escape_string($mysqli, $att_val);
    }        		

    if($id) { // update query
      $terms[] = $enclose ? "`$field` = '$att_val'" : "`$field` = $att_val";
      // print_debug("adding field $field='$att_val' to fields<br>");
    } else { // insert query
      $flds[] = '`'.$field.'`';
      $vals[] = $enclose ? "'$att_val'" : $att_val;
    }
  }

//      if($att_val=='' && $att_default === ATT_DEFAULT_NULL) {
        // field is blank, do not default - let db handle it, so don't add to query
        //echo("$field is empty and default is NULL, so skip. att_default = '$att_default' NULL='".ATT_DEFAULT_NULL."'<br>");
        
        //$vals[] = "NULL";
//      } elseif($att_val==ATT_DEFAULT_BLANK) {
//        echo("save_object_query: value of $field is BLANK<br>");
//        $vals[] = '';
//      } elseif($att_val==ATT_DEFAULT_ZERO) {
//        echo("save_object_query: value of $field is 0<br>");
//        $vals[] = '0';
//      } else {
//      }

  // dump($flds);

  // class specific error testing (validators)  
  $class_errors = object_validators($obj_type, $data, $id);
  if(count($class_errors)) $errors = array_merge($errors, $class_errors);
  $error_count = sizeof($errors);
  if($error_count) {
    //dump($errors);
  } else { // no errors
    if(!$id) { // insert query

      if($preset_id) {
        $id = $preset_id;
      } else {
        $id = nextId($table);
      }
      $flds[] = '`'.$key.'`';
      $vals[] = "'$id'";

      $num_fields = count($flds);
      $num_vals   = count($vals);
      if(!$num_fields) {
        $errors[] = "Add Object $obj_type: Invalid query, no fields";
        return array(0, $errors);
      }
      //echo("There are $num_fields fields and $num_vals values in query for add $obj_type<br>");
      
      $flds_string = implode(",", $flds);
      $vals_string = implode(",", $vals);

      $query_str = "INSERT INTO $table
                    ($flds_string)
                    VALUES ($vals_string)";
    } else { // update query
      $num_terms = sizeof($terms);
      if(!$num_terms)   return array($id, $errors);
      //echo("There are $num_terms terms in query for update $obj_type $id<br>");
      
      $terms_string = implode(",", $terms);
      //echo("id=$id id_list=$id_list<br>");
      $query_str = "UPDATE $table
                    SET $terms_string
                    WHERE ".($id_list ? "$key IN ($id_list)" : "$key='$id'");
      //if($id_list) echo($query_str);                    
    }

    //if($obj_type == 'class') echo($query_str);

    $res = db_query($query_str);
    //check_db_result($result);    
    
    if (MDB2::isError($res)) {
      global $u_level;
      $message = "$obj_name: ".$res->getMessage();
  		if($_SESSION['dev'] || $u_level == USER_LEVEL_SYSTEM) $message .= "<br/><b>Details:</b>".$res->getUserinfo();
      $errors[] = $message;
      //echo("Failed save_object_query for $obj_type: $query_str");

    } else {
    
			// generic handlers  
		  if($new) {
				$errors = post_add($obj_type, $id);
		  } else {
        if(count($ids)) {
  				foreach($ids as $this_id) {
  				  if($this_errors = post_edit($obj_type, $this_id, $orgObj)) $errors = array_merge($errors, $this_errors);
  				}
        } else {
  				$errors = post_edit($obj_type, $id, $orgObj);
  			}
		  }
      // end generic handlers

    }
  }
  
  //if($obj_type == 'site_layout') {dump($data);dump($errors);dump($mysqli);die("save_object_query($obj_type, $data, $id, $parent_id<br>qs=$query_str<br.");}

  //dump($data);  
  //dump($errors);
  //if($obj_type=='user') {dump($data);echo("save_object_query: obj_type=$obj_type<br>query='$query_str'<br>");}
  //if($obj_type == 'weblog') echo("save_object_query: obj_type=$obj_type<br>query='$query_str'");
  //if($obj_type=='res_exception') {
  //  dump($_POST);
  //  echo("save_object_query: obj_type=$obj_type<br>query='$query_str'<br>");
  //}
  if($errors) {
    //foreach($errors as &$error) $error = "<li>$error</li>";
    $action = $id ? 'Update' : 'Add';
    if($_SESSION['dev']) array_unshift($errors, "[dev] $action $obj_type errors:");
  }
  return array($id, $errors, $messages);

}

    
// function save_child($child_type, $child_data, $child_id, $att_flags = NULL) {
//   $child_required = $att_flags & AF_OBLIGATORY;
// 
//   if($id) { // update
//     $child_id = $data[$field];
//     echo("FOUND child of $obj_type $id of type $att_options child_id=$child_id<br>");
//     //dump($data);
//     if($child_id) {
//       if($child_set = is_object_set($child_type, $data)) {
//         list($child_id, $child_errors) = update_object($child_type, $child_data, $child_id);
//         echo("updating child of $obj_type: $child_type with id $child_id<br>");
//       }
// 
// //        } elseif($child_required || $child_set) {
// //          list($child_id, $child_errors) = add_object($child_type, $data, 0, $child_id);
// //          print_debug("added child $child_id of $obj_type: $att_options, because required or NOT blank<br>");
// 
//     } else {
//       print_debug("NOT updating or adding child of $obj_type: $att_options, because not required AND blank<br>");
//       continue;
//       $child_id = NULL;
//     }
//   } else { // add object
// 
//     if($att_val) {
//       print_debug("soq: one2one, id=0 (add), but one2one id=$att_val, so assuming child already exists<br>");
//       $child_id = $att_val;
//     } else {
//       // if all fields are empty and child is not required, don't add_object, but use 0;
//       $child_set = is_object_set($child_type, $data);
//       if($child_required || $child_set) {
//         list($child_id, $child_errors) = add_object($att_options, $child_data);
//         $child_type = $att_options;
//         print_debug("adding child of $obj_type: $att_options<br>".print_r($child_data, true));
//       } else {
//         $child_id = NULL;
//         print_debug("NOT adding child of $obj_type: $att_options, because not required AND blank<br>");
//       }
//       //$children = array_push(
//     }
//   }
// 
//   if(sizeof($child_errors)) {
//     //$child_errors_str = implode(" ", $child_errors);
//     print_debug("type $obj_type has one2one $field of type $att_options, - couldn't add or update child due to errors $child_errors<br>");
//     $errors = array_merge($errors, $child_errors);
//   } else {
//     if($child_required && !$child_id) mydie("type $obj_type has one2one $field of type $att_options, - no child ID received<br>");
//     print_debug("type $obj_type has one2one $field of type $att_options with id='$child_id', - adding $att_options: $field id=$child_id<br>");
// 
//     $att_val = $child_id;
// 
//   }
//   //continue; // just removed this too - how could it have worked before??
//   return array($child_id, $child_errors);
// }
//echo("att val for $field = $child_id<br>");

// defaulters run prior to rendering form, so shows up in form
// cannot depend on input values
function defaulter($obj_type, $data) {
	$fn_name = "defaulter_".$obj_type;
	if(function_exists($fn_name)) return call_user_func($fn_name, $obj_type, $data);
	return $data;
}

// pre add and edit ran after submit, but before DB update
// can depend on input values
function pre_add($obj_type, $data) {
	$fn_name = "pre_add_".$obj_type;
	if(function_exists($fn_name)) return call_user_func($fn_name, $obj_type, $data);
  return array($data, $errors);
}

function pre_edit($obj_type, $data, $orgObj) {
	$fn_name = "pre_edit_".$obj_type;
	if(function_exists($fn_name)) return call_user_func($fn_name, $obj_type, $data, $orgObj);
  return array($data, $errors);
}

function pre_delete($obj_type, $data) {
	$fn_name = "pre_delete_".$obj_type;
	if(function_exists($fn_name)) return call_user_func($fn_name, $data);
	return $data;
}

function post_add($obj_type, $id) {
	$fn_name = "post_add_".$obj_type;
	if(function_exists($fn_name)) return call_user_func($fn_name, $id);
}

function post_edit($obj_type, $id, $orgObj) {
	$obj = get_object($obj_type, $id); // gets newly saved object
  $changes = compare_objects($obj_type, $orgObj, $obj, true, true, true); // compare, return changes, log changes, include  relations  
	$fn_name = "post_edit_".$obj_type;
  if(function_exists($fn_name)) return call_user_func($fn_name, $id, $changes);
}

function post_delete($obj_type, $data) {
	$fn_name = "post_delete_".$obj_type;
	if(function_exists($fn_name)) return call_user_func($fn_name, $obj_type, $data);
}

// returns array of links or buttons with custom actions for this object in given context (record, recordset, etc)
function class_actions($obj_type, $data, $context='recordset', $ref_name='', $ref_link='') {
	$fn_name = "class_actions_".$obj_type;
	if(function_exists($fn_name)) return call_user_func($fn_name, $obj_type, $data, $context, $ref_name, $ref_link);  
}
					
function object_validators($obj_type, $data, $id=0) {
	$fn_name = "validator_".$obj_type;
	if(function_exists($fn_name)) return call_user_func($fn_name, $obj_type, $data, $id);
}


function action_button($action, $obj_type, $parent_type, $parent_id) {
	$fn_name = "button_".$action."_".$obj_type;
	if(function_exists($fn_name)) return call_user_func($fn_name, $obj_type, $parent_type, $parent_id);
  return '';
}  


// new recordset based on jqGrid
function jqGrid($obj_type) {
  $table_id = 'jqGrid_table_'.$obj_type;
  $pager_id = 'jqGrid_div_'.$obj_type;

  $flds = array();
  $errors='';
  $classFlags = get_object_flags($obj_type);
  $expanded_listing = $classFlags & NF_COMPACT_LIST ? 0 : 1;
  $classVars = get_object_attributes($obj_type, $expanded_listing);

  // node actions
  $class_def        = get_class_def($obj_type, true);
  $key              = $class_def->key;
  $descriptor_field = $class_def->descriptor;
  $table            = $class_def->table;
  $class_flags      = $class_def->flags;
  $this_type        = $class_def->name;
  $show_rowbuttons  = !($classFlags & NF_NO_ACTIONS);
  $show_custom      = false;

  $col_names    = array();
  $fields       = array();
  $attributes   = array();

  // class level auth
  $can_edit = 'true'; // todo: implement
  $can_add  = 'true';
  $can_del  = 'true';
  $can_view = 'true';
  //$caption = "$this_type records $first_record - $last_record of $count";  
  //$caption = "$this_type records ($count)";
  $caption = "$this_type records";
  $select_types = array();  
  $show_total = false;
  foreach($classVars as $k => $class) {
    if(!is_array($class)) continue;    
    $att_flags = $class[ATT_FLAGS];
    if($att_flags & AF_HIDE) continue; // this field is hidden or hidden in list view
    $hidden = $att_flags & AF_HIDE_LIST;

    list($fld, $sql_fld) = parse_field($table, $k); // converts class.class.class.field to array(field, table.field)
    $fld_name = $class[ATT_NAME];
    $fld_type = $class[ATT_TYPE];
    $rel_type = $class[ATT_RELATION_TYPE];

    if(in_array($fld_type, array('one2one', 'one2many'))) continue;
		$no_search = $att_flags & AF_NO_SEARCH; // todo: implement (searchable by default)
		$no_sort = $att_flags & AF_NO_SORT;
		$no_edit = $att_flags & AF_READONLY || $att_flags & AF_READONLY_EDIT || $att_flags & AF_HIDE_EDIT || $fld == $key;
		$no_add  = $att_flags & AF_READONLY || $att_flags & AF_READONLY_ADD || $att_flags & AF_HIDE_ADD || $fld == $key;
    $required = $att_flags & AF_OBLIGATORY;
		if($att_flags & AF_TOTAL) $show_total = true;
    
    //$searchable = $att_flags & AF_SEARCAHBLE;
    $searchable = true;

    $fields[] = $fld;
    $col_names[] = "'$fld_name'";

    // Col Model: field options
    $options = array();
    $options['name']  = "'$fld'";
    $options['index'] = "'$sql_fld'";
    $options['sortable'] = $no_sort ? 'false' : 'true';

    if($fld_type == 'id') $options['key'] = 'true';
    if($hidden) {
      $options['hidden'] = 'true';
      $edit_rules['edithidden'] = 'true';
    }
    if($can_edit && !$no_edit) $options['editable'] = 'true';

    $options = jqGrid_field_options($options, $obj_type, $class);

    if(!$searchable) unset($options['searchoptions']); //= "searchoptions:{sopt:[$search_options]}";

    $attributes[] = jquery_options($options);
    
    // load select box data using Ajax if editoptions are not already set (will be added to JS run after load)
    if($options['edittype'] == "'select'" && !$options['editoptions']) {
      $load_complete .= "$(\"#".$table_id."\").setColProp('".$fld."', { editoptions: { value: jqGrid_select_".$rel_type."} });\n";
      $select_types[$rel_type] = array($class[ATT_FILTERS], $class[ATT_SORT]);
    }
  }
   
  $col_model = implode(",\n", $attributes);

  $sort_field = $fields[0];  
  $limit = 50;

  // Build Javascript
  //$app_link = get_page_link(PAGE_ADMIN) ?: '/admin/app.php';
  $app_link = get_page_link(PAGE_ADMIN);
  $edit_url = $url = "$app_link?obj_type=$obj_type";
  $script = '';
  if(count($select_types)) foreach($select_types as $select_type => $sel_options) {
    $script .= jqGrid_select($select_type, $sel_options[0], $sel_options[1]);
  }
  
  $script .= "
  var lastsel;
  function pickdates(id) { 
    jQuery('#'+id+'_sdate','#".$table_id."').datepicker({dateFormat:'yy-mm-dd'});
  } 

  function passwordcheck(value, colname) {
    if (value.length < 6) return [false, 'Please enter at least 6 characters'];
    return [true,''];
  }

  function colorFormatter(cellValue, options, rowObject) {
  	var brightness = color_brightness(cellValue);
  	var fg = brightness < 0.5 ? '#FFFFFF' : '#000000';
    return \"<div class='colorpicker_input' style='background-color:#\" + cellValue + \";color:\" + fg + \";width:75px'>\" + cellValue + \"</div>\";
  }

  function unFormatter(cellValue, options, cellObject) {
    return cellValue;
  }
  
  function color_picker(value, options) {
  	var brightness = color_brightness(value);
  	var fg = brightness < 0.5 ? '#FFFFFF' : '#000000';
  	var output = \"#<input class='colorpicker_input' type='text' maxlength='6' value='\" + value + \"' style='color:\" + fg + \";background-color:#\" + value + \";width:75px;' />\";
  	return output;
  }
  
  function color_value(value) {
  	return value.val();
  	return colorFormatter(value.val());
  }

  jQuery.extend($.fn.fmatter , {
      currencyFmatter : function(cellvalue, options, rowdata) {
      return '€'+cellvalue;
  }
  });
  jQuery.extend($.fn.fmatter.currencyFmatter , {
      unformat : function(cellvalue, options) {
      return cellvalue.replace('€','');
  }
  });


  jQuery(\"#".$table_id."\").jqGrid({     
    url: '".$url."', 
    datatype: 'json',
    mtype: 'GET',
    colNames: [".implode(',', $col_names)."], 
    colModel: [".$col_model."],
    rowNum: ".$limit.", 
    rowList: [10,25,50,100,500], 
    pager: '#".$pager_id."', 
    viewrecords: true, 
    caption: '".$caption."',
    sortName: '".$sort_field."', 
    sortOrder: 'desc', 
    sortable: true, 
    autowidth: true, 
    rownumbers: true, 
    width:800, 
    height:300,
    forceFit: true, 
    cellEdit: ".$can_edit.", 
    cellurl: '".$edit_url."', 
    editurl: '".$edit_url."', 
	  altRows: true,";

  if($show_total) $script .= "
    footerrow: true,
	  userDataOnFooter: true,";

  $script .= "
	onSelectRow: function(id){
		if(id && id!==lastsel){
			jQuery(\"#".$table_id."\").jqGrid('restoreRow',lastsel);
			jQuery(\"#".$table_id."\").jqGrid('editRow',id,true);
			lastsel=id;
		}
	},";
	
  $script .= "
    loadComplete: function() {
      //alert('loaded');
      ".$load_complete."  
    },
  });
  
  jQuery(\"#".$table_id."\").jqGrid('navGrid',\"#".$pager_id."\",
  {
    edit:".$can_edit.",add:".$can_add.",del:".$can_del.",view:".$can_view.",search:true,refresh:true
  },
    {}, // edit options 
    {}, // add options 
    {}, // del options 
    {closeOnEscape: true, multipleSearch: true, closeAfterSearch: true} // search options     
  );   
  jQuery(\"#".$table_id."\").jqGrid('gridResize',{minWidth:350,maxWidth:1920,minHeight:80, maxHeight:1000});
  jQuery(\"#".$table_id."\").jqGrid('sortableRows');
  jQuery(\"#".$table_id."\").jqGrid('filterToolbar'); 
  jQuery(\"#".$table_id."\").jqGrid('navButtonAdd',\"#".$pager_id."\",{ caption: \"Columns\", title: \"Reorder Columns\", 
    onClickButton : function () {
      jQuery(\"#".$table_id."\").jqGrid('setColumns'); 
      //jQuery(\"#".$pager_id."\").jqGrid('columnChooser'); 
    } 
  }); 

  jQuery(\"#".$table_id."\").jqGrid('navButtonAdd',\"#".$pager_id."\",{caption:\"Toggle\",title:\"Toggle Search Toolbar\", buttonicon :'ui-icon-pin-s', 
    onClickButton:function() { 
      //jQuery(\"#".$table_id."\").toggleToolbar() 
    } 
  }); 
  jQuery(\"#".$table_id."\").jqGrid('navButtonAdd',\"#".$pager_id."\",{caption:\"Clear\",title:\"Clear Search\",buttonicon :'ui-icon-refresh', 
    onClickButton:function() { 
      //jQuery(\"#".$table_id."\").clearSearch() 
    } 
  }); 
  ";

  // begin output  
  $output .=  "<table id='$table_id'></table>\n";   
  $output .= "<div id='$pager_id'></div>\n";   
  $output .= html_script_inline($script);
  return $output;
}

function jqGrid_select($obj_type, $filters='', $sort='') {
  $select_url = "/admin/app_data.php?obj_type=$obj_type&format=jq_select";
  if($filters) $select_url .= "&select_filters=".urlencode(seaarch2sql($filters));
  if($sort) $select_url .= "&select_sort=".urlencode($sort);
  $script = "
    //get all $obj_type
    var jqGrid_select_".$obj_type." = $.ajax({url: '".$select_url."', async: false, success: function(data, result) {
      // alert(data);
      if (!result) alert('Failure to retrieve $obj_type data.');}}).responseText;
  ";
  return $script;
}

/*
http://www.secondpersonplural.ca/jqgriddocs/index.htm
The predefined types are
    *  integer
    * number
    * currency
    * date (uses formats compatable with php function date. For more info visit www.php.net)
    * checkbox
    * mail
    * link
    * showlink
    * select (this is not a real select but a special case for editing modules. See note below)
*/

function jqGrid_field_options($field_options, $obj_type, $class) {
  $fld_type = $class[ATT_TYPE];
  $rel_type = $fld_options = $class[ATT_RELATION_TYPE];
  //dump($class);die();
  
  // field options
  switch($fld_type) {
    case 'email':
      $field_options['formatter'] = "'mail'"; 
      $search_options = "'eq','ne'";
      $edit_rules = "email:true";
      $field_options['width'] = 50;
      $field_options['sorttype'] = "'text'";
      break;
    case 'dummy':
      $field_options['width'] = 50;
      break;
    case 'date':
      $field_options['formatter'] = "'date'"; 
      $format_options = "srcformat:'Y-m-d',newformat:'d-M-Y'";
      $search_options = "'eq','ne','lt','le','gt','ge'";
      $field_options['sorttype'] = "'date'";
      $field_options['width'] = 50;
      $edit_options = "size: 10, maxlengh: 10,
      dataInit: function(element) {
        $(element).datepicker({dateFormat: 'yy-mm-dd'})
      }";
      break;
    case 'datetime':
      $field_options['formatter'] = "'date'"; 
      $format_options = "srcformat:'Y-m-d H:i:s',newformat:'d-M-Y H:i'";
      $search_options = "'eq','ne','lt','le','gt','ge'";
      $field_options['sorttype'] = "'date'";
      $field_options['width'] = 70;
      $edit_options = "size: 10, maxlengh: 10,
      dataInit: function(element) {
        $(element).datepicker({dateFormat: 'yy-mm-dd'})
      }";
      break;

    case 'autocomplete':
      $search_options = "'eq','ne'";
      $field_options['width'] = 60;
      $field_options['edittype'] = "'text'";

      $handler = 'http://dev.apartments-for-rent.com/home/ajax/searchJSON.php';
      $search_field = 'name';
      $value_field  = 'id';
      $filters = '';      
      $script = '';


      $edit_options = "dataInit: function (elem) {
        setTimeout(function() {
          alert(1);
          $(elem).autocomplete({
              source: ['c++', 'java', 'php', 'coldfusion', 'javascript', 'asp', 'ruby']
          });
        },200);
      }";

    //$output .= html_style_inline('UL {z-index: 1001} {z-index: 1001} .ui-autocomplete-loading { background: url(/images/icons/spinning_wheel.gif) no-repeat right; }');
      break;

    case 'color':
      $field_options['formatter'] = 'colorFormatter'; 
      $field_options['unformat'] = 'unFormatter';
      //$field_options['edittype'] = "'custom'";
      //$edit_options .= "custom_element:color_picker,custom_value:color_value";
      $edit_options .= "size: 10, maxlengh: 6, dataInit: function(element) {
        $(element).ColorPicker({
          onSubmit: function(hsb, hex, rgb) {
          	$(element).val(hex);
        		$(element).ColorPickerHide();
          },
          onBeforeShow: function () {
          	$(this).ColorPickerSetColor(this.value);
          },
        	onChange: function (hsb, hex, rgb) {
        		$(element).val(hex);
        		$(element).css('background-color', '#' + hex);
          	var brightness = color_brightness(hex);
          	var fg = brightness < 0.5 ? '#FFFFFF' : '#000000';
        		$(element).css('color', fg);
        	},
        	eventName: 'focus'

        }).bind('keyup', function(){
	        $(this).ColorPickerSetColor(this.value);
        });
    		// $(element).ColorPickerShow();
        }";

      break;
    case 'bool':
      $field_options['edittype'] = "'checkbox'";
      $field_options['formatter'] = "'checkbox'"; 
      $search_options = "'eq','ne'";
      $field_options['width'] = 20;
      break;
    case 'money':
      $field_options['align'] = "'right'"; 
      $field_options['formatter'] = "'currencyFmatter'"; 
      //$format_options = "prefix:'&euro;'"; // todo: allow other currencies
      $search_options = "'eq','ne','lt','le','gt','ge'";
      $edit_rules = "number:true";
      $field_options['width'] = 60;
      $field_options['sorttype'] = "'currency'";
      break;
    case 'float':
      $field_options['align'] = "'right'"; 
      $field_options['formatter'] = "'number'"; 
      $search_options = "'eq','ne','lt','le','gt','ge'";
      $edit_rules = "number:true";
      $field_options['width'] = 25;
      $field_options['sorttype'] = "'float'";
      break;
    case 'int':
      $field_options['align'] = "'right'"; 
      $field_options['formatter'] = "'integer'"; 
      $search_options = "'eq','ne','lt','le','gt','ge'";
      $edit_rules = "integer:true";
      $field_options['width'] = 25;
      $field_options['sorttype'] = "'int'";
      break;
    case 'id':
      $search_options = "'eq','ne','lt','le','gt','ge'";
      $field_options['width'] = 30;
      //$field_options['sorttype'] = "'int'";
      // $field_options['formatter'] = 'integer'; 
      // $edit_rules = "number:true";

      break;
    case 'url':
      $field_options['formatter'] = "'link'"; 
      $search_options = "'eq','ne','lt','le','gt','ge'";
      $field_options['width'] = 60;
      break;
    case 'link':
      $field_options['edittype'] = "'select'";
      $field_options['formatter'] = "'showlink'"; 
      $search_options = "'eq','ne'";
      $field_options['width'] = 40;
      //$app_link = get_page_link(PAGE_ADMIN) ?: '/admin/app.php';
      $app_link = get_page_link(PAGE_ADMIN);
      $format_options = "baseLinkUrl:'$app_link', addParam: '&obj_type=$rel_type&action=view'"; // todo: allow other currencies
//       formatter:'showlink', 
//       formatoptions:{baseLinkUrl:'someurl.php', addParam: '&action=edit'}
             
      break;
    case 'many2one':
      $sel_filters = $class[ATT_FILTERS];
      if($options['editable'] == 'false') { // just show value
        // do nothing
      } else {
        $field_options['edittype'] = "'select'";
        // editoption: { value: "FE:FedEx; IN:InTime; TN:TNT" }
      }
      $search_options = "'eq','ne'";
      $field_options['width'] = 60;
      break;
    case 'valSelect':
      $field_options['edittype'] = "'select'";
      $eos = array();
      foreach($rel_type as $k => $v) $eos[] = "$k:$v";
      $edit_options = 'value: "'.implode(';', $eos).'"';
      $field_options['width'] = 60;
      break;
    case 'intSelect':
      $field_options['edittype'] = "'select'";
      $ar = num_array($fld_options[0], $fld_options[1], $fld_options[2], $fld_options[3]);
      $eos = array();
      foreach($ar as $a) $eos[] = "$a[0]:$a[1]";
      $edit_options = 'value: "'.implode(';', $eos).'"';
      $field_options['width'] = 30;
      break;
    case 'str':
      // $field_options['formatter'] = ''; 
      $search_options = "'bw','ew','cn'";
      $field_options['width'] = 60;
      $field_options['sorttype'] = "'text'";
      break;
    case 'text':
      //$field_options['formatter'] = ''; 
      $field_options['edittype'] = "'textarea'";
      $search_options = "'bw','ew','cn'";
      $edit_options = "rows:'3',cols:'35'";
      $field_options['width'] = 150;
      $field_options['sorttype'] = "'text'";
      break;
    case 'phone':
      $search_options = "'bw','ew','cn'";
      $field_options['width'] = 50;
      $field_options['sorttype'] = "'text'";
      break;
    case 'password':
      $search_options = "'bw','ew','cn'";
      $field_options['width'] = 50;
      $edit_options = "custom:true, custom_func:passwordcheck";
      break;
    case 'html':
      //$field_options['formatter'] = ''; 
      $field_options['edittype'] = "'textarea'";
      $search_options = "'bw','ew','cn'";
      $edit_options = "rows:'3',cols:'35'";
      $field_options['width'] = 150;
      break;
    case 'ip':
      $field_options['width'] = 50;
      break;
    case 'discount':
      $field_options['width'] = 50;
      break;
    case 'commission':
      $field_options['width'] = 50;
      break;
    case 'surcharge':
      $field_options['width'] = 50;
      break;
    case 'yesno':
      $field_options['width'] = 40;
      break;
    case 'msel':
      break;
    case 'image':
      break;
    case 'map':
      break;

    default:
      echo("Field type $fld_type not implemented yet<br>");
      break;
  }

  if($format_options) $field_options['formatoptions'] = "{".$format_options."}";
  if($edit_options)   $field_options['editoptions']   = "{".$edit_options."}";
  if($edit_rules)     $field_options['editrules']     = "{".$edit_rules."}";
  if($search_options) $field_options['searchoptions'] = "{"."sopt:[".$search_options."]}";

  return $field_options;
}

// returns a printable value for a given field of a given object
// can override field type to avoid redunancy
// use in app_data.php
function get_attribute_value_string($obj_type, $obj, $fld, $class, $fld_type='') {
  if(!$fld_type) $fld_type  = $class[ATT_TYPE];
  $att_flags = $class[ATT_FLAGS];
  $rel_type  = $class[ATT_RELATION_TYPE];    
  $fld_val = $obj->$fld;
 //if($fld_type=='valSelect') {dump($rel_type); die();}
  switch($fld_type) {
    case 'dummy':
		  $val_str = get_dummy_value($obj, $rel_type);
      break;
//    case 'color':
//		  $val_str = show_color($fld_val);
//      break;
    case 'many2one':
      if($rel_type && $fld_val) {
        // $descriptor_field = get_object_descriptor($rel_type);
        // $val_str = get_object($rel_type, $val, $descriptor_field);
        $val_str = get_select_value2($rel_type, $fld_val);         
      } else {
        $val_str = $fld_val ? $fld_val : '';
      }
      break;        
    case 'many2many':
      return get_attribute_value_string($obj_type, $obj, $fld, $class, 'many2one');
      break;
    case 'link':
      return get_attribute_value_string($obj_type, $obj, $fld, $class, 'many2one');
      break;
    default:
      $val_str = $fld_val;
      break;
  }
  return $val_str;
}


// a recordset is a table with one row for each record
function recordset($obj_type, $rows, $count, $parent_id='', $parent_type='', $parent_action='', $messages='') {
  global $getfilters;
  global $db;
  global $u_level;
  global $xhtml;
  $st = $xhtml ? "/" : '';
  
  check_db_result($rows);    
	
  $lc = count($rows);

  if(!$messages) $messages = $_SESSION['app_messages'][$obj_type]; // cheesy hack - use globals, due to redirect (otherwise must use query_str)
  $recordset_str .= $messages;

  $flds = array();
  $errors='';
  $classFlags = get_object_flags($obj_type);
  $expanded_listing = $classFlags & NF_COMPACT_LIST ? 0 : 1;
  $classVars = get_object_attributes($obj_type, $expanded_listing);

  // node actions
  $class_def        = get_class_def($obj_type, true);
  $key              = $class_def->key;
  $descriptor_field = $class_def->descriptor;
  $table            = $class_def->table;
  $class_flags      = $class_def->flags;
  $this_type        = $class_def->name;
  $show_rowbuttons  = !($classFlags & NF_NO_ACTIONS);
  $show_custom      = false;

  $auth_add = auth_action($obj_type, 'add');

  $buttons = array();
  
  if($parent_id) { // this is a child recordset
    $buttonrow_h = 30;
    list($pt_junk, $parent_id_key) = get_object_parent($obj_type);
    if(!$auth_add) { // no add link if NF_NO_ADD or user not auth
      $add_link = "";
    } elseif($parent_id_action=='add') {
      $add_link = "To add $this_type: First save and close $parent_type.";
    } elseif($parent_id_action=='edit') {
      $add_link = "To add $this_type: First save and close $parent_type.";
    }
    
    if($add_button = action_button('add', $obj_type, $parent_type, $parent_id)) { // custom add button
	    $buttons[] = $add_button;
	  } else { // standard add button
    	$buttons[]= html_image_link(get_object_link($obj_type, '', 'add', $parent_id, $parent_type), "/images/icons/add_small.gif", phrase('add', CAPITALIZE)." $this_type");
    }

  } else {  // main recordset (no parent)
    obj_stack_push($obj_type);
    $buttonrow_h = 50;
  	$buttons[] = html_image_link(get_object_link(), "/images/icons/home.gif", phrase('home', CAPITALIZE));
  	$buttons[] = back_button($ref_link, $ref_name);

    if($auth_add) $buttons[] = html_image_link(get_object_link($obj_type, '', 'add'), "/images/icons/add.gif", phrase('add', CAPITALIZE)." $this_type");    
    $buttons[] = html_image_link(get_object_link($obj_type)."&amp;_show_search=1", "/images/icons/search.gif", phrase('advanced_search', CAPITALIZE));

  	// deal with first/last prev/next buttons + records per page	
  	$first = $_GET['start'];
  	$limit = $_SESSION['records_per_page_admin'];
  	$uri = $_SERVER['QUERY_STRING'] ? $_SERVER['REQUEST_URI'] : get_object_link($obj_type);
  
  	$first_record = $first+1;
  	$last_record = $first+$limit > $count ? $count : $first+$limit;
  
    $buttons[] = $first >= $limit*2 ? // first button
      html_image_link(replace_uri_var($uri,"start", 0), "/images/icons/first.gif", phrase('first', CAPITALIZE)) :
      html_image("/images/icons/first_disabled.gif"); 
  
    $buttons[] = $first ? // prev button
      html_image_link(replace_uri_var($uri,"start", ($first-$limit >= 0 ? $first-$limit : 0)), "/images/icons/previous.gif", phrase('previous', CAPITALIZE)) :
      html_image("/images/icons/previous_disabled.gif"); 
  
    $buttons[] = $last_record < $count ? // next button
      html_image_link(replace_uri_var($uri,"start", $first+$limit), "/images/icons/next.gif", phrase('next', CAPITALIZE)) :
      html_image("/images/icons/next_disabled.gif"); 
  
    $buttons[] = $last_record + $limit < $count ? // last button
      html_image_link(replace_uri_var($uri,"start", $count-$limit), "/images/icons/last.gif", phrase('last', CAPITALIZE)) :
      html_image("/images/icons/last_disabled.gif"); 

  }

	$buttons_str = implode('', $buttons);
  if(!($class_flags & NF_NO_ADD)) $buttons[] = $add_link; // add add-link
  if(!($class_flags & NF_NO_EXTENDED_SEARCH)) $buttons[] = $search_link; // add search link

  // empty child recordset
  if($parent_id && !count($rows) && !$recordset_str) return "<b>No $this_type records</b>".implode('', $buttons);
	
	// special handlers - action buttons  - todo: move to class_defs generic handlers
	if($obj_type=='media') $show_custom = true;

  //dump($_SESSION['recordset'][$obj_type]['columns']);
  
  $colcount=0;
	// header row with sort / hide buttons + count columns
  foreach($classVars as $k => $class) {
    if(!is_array($class)) continue;    
    list($fld, $sql_fld) = parse_field($table, $k); // converts class.class.class.field to array(field, table.field)

    $att_flags = $class[ATT_FLAGS];
    $fld_name = $class[ATT_NAME];
    $fld_type= $class[ATT_TYPE];
		$no_sort = $att_flags & AF_NO_SORT;
    if($att_flags & AF_HIDE) continue; // this field is hidden or hidden in list view

    if($_SESSION['recordset'][$obj_type]['columns'][$sql_fld] ==1 || $_SESSION['recordset'][$obj_type]['columns'][$sql_fld] >= 0 && $att_flags & AF_HIDE_LIST) {
      $_SESSION['recordset'][$obj_type]['columns'][$sql_fld] = 1; // hidden 
      continue; // this field is hidden or hidden in list view
    }
    //if($fld_type=='dummy') continue;
    //if($fld_type=='one2one' || $fld_type=='one2many') continue; // don't show ID of children
		
		$up="&uarr;";
		$down="&darr;";
	  $arrow = ($_GET['srt'] == $sql_fld ? ($_GET['rev'] ? $up : $down) : "");
    
    //$hide_field = array_pop(explode('.', $k));
    
    if(!$parent_id) { // don't show sort + show/hide for child recordsets
      $hide_url = replace_uri_var($uri, "__hide", $sql_fld);    
      $hide_url = remove_uri_var($hide_url, "__show");    
      $hide_link = html_image_link($hide_url, "/images/icons/delete_tiny.gif", phrase('hide', CAPITALIZE)." ".$fld_name);
    }
            
    if($no_sort || $parent_id) {
      $sort_row.=("<th>".$class[0]." $hide_link</th>\n");
    } else {
    	$sort_link = replace_uri_var($uri,"srt", $sql_fld);
    	if($arrow==$up) {
	    	$sort_link = remove_uri_var($uri,"rev");
    	} elseif($arrow==$down) {
	    	$sort_link = replace_uri_var($uri,"rev",1);
    	}
    	$sort_link = htmlspecialchars($sort_link, ENT_COMPAT, 'UTF-8', false); // replace ampersands
      $sort_row.=("<th>".html_link($sort_link, $fld_name)."$arrow $hide_link</th>\n");
    }    
    $colcount++;
  }
	
  $header_row .= "<tr>"; // Header row with sort links
	if($show_custom) {
	  $header_row.= "<th>&nbsp;</th>"; // custom column
    $colcount++;
  }
  
  $header_row .= $sort_row;

  if($show_rowbuttons) {
    $colcount++; // for last column of action buttons
    $header_row.= $parent_id ? "<th>&nbsp;</th>" : "<th>".show_hide_recordset_columns($obj_type, $classVars)."</th>";
  }
  
  $header_row.=("</tr>");

	$rpp_chooser = $parent_id ? "" : rpp_chooser($limit);
	$button_row = "<tr><td style='height:".$buttonrow_h."px' colspan='".($colcount-1)."'>$buttons_str</td><td>$rpp_chooser</td></tr>\n";
  
  if(!$parent_id && !($class_flags & NF_NO_SEARCH)) { // only show search bar for non-child recordsets
    // search bar (filters)
    $type = $_GET['obj_type'];
    $show_search = true;
	  // search boxes
    $search_set = false;
    $var_count = count($classVars);
    $i=0;
	  foreach($classVars as $k => $class) {
	    if(!is_array($class)) continue;
	    $att_flags = $class[ATT_FLAGS];
	    $fld_type= $class[ATT_TYPE];
      list($fld, $sql_fld) = parse_field($table, $k); // converts class.class.class.field to array(field, table.field)	
      if(($att_flags & AF_HIDE) || $_SESSION['recordset'][$obj_type]['columns'][$sql_fld] == 1 || $_SESSION['recordset'][$obj_type]['columns'][$sql_fld] >= 0 && $att_flags & AF_HIDE_LIST) continue;
	    $searchbar_str.= "<td>";
	    //if(!$i) $searchbar_str.= "$var_count vars<form action='get' id='".$obj_type."_searchbarform'><div>";
	    if($att_flags & AF_SEARCHABLE || $fld_type=='id') { // print search box
	      $search_name = '_search_'.$sql_fld;
	      if($search_val = urldecode($_GET[$search_name])) $search_set = true; // we're showing a limited recordset - search is set	      
        $searchbar_str.= search_box($search_name, $search_val, $class); // this prints the search input box
	    } else {
	      $searchbar_str.=("&nbsp;");
	    }
	    $searchbar_str.=("</td>\n");
      $i++;
	  }

    $search_button = form_input('search', 'submit', phrase('search', CAPITALIZE), 0, 0, "id='search_button'");
    $link_name = $search_set ? phrase('clear', CAPITALIZE)." ".phrase('search', CAPITALIZE) : phrase('reload', CAPITALIZE);
    $search_button .= " ".html_link(get_object_link($obj_type) , $link_name);

    $searchbar_str.= "<td>$search_button<input type='hidden' name='obj_type' value='$obj_type' $st></td>";

    //$recordset_str.= html_form($searchbar_row, $obj_type."_searchbarform", $_SERVER["PHP_SELF"], 'get', 'onsubmit="cleanSearch(this);"'); 
    $searchbar_row =("\n<tr>$searchbar_str</tr>\n");  
   }

  //if(!$parent_id) $recordset_str .= "<form id='".$obj_type."_searchbarform' action='' onsubmit='cleanSearch(this);' method='get'><div\n>";

  if(!$parent_id) $recordset_str .= "<form id='".$obj_type."_searchbarform' action='' onsubmit='cleanSearch(this);' method='get'><div>\n";
  $recordset_str.=("<a name='$obj_type'></a>
                    <table summary='$obj_type recordset - $lc items' class='coffee'>
  										<caption>$this_type records $first_record - $last_record of $count</caption>
                      <thead>
                      $button_row
                     	$header_row
                     	$searchbar_row
                     	</thead>
                    ");

  $recordset_str.=('<tbody>');

  if(!$count) $recordset_str.= "<tr ><td colspan='$colcount' align='center'>".html_b('No records matched your request')."</td></tr>";

  $realcount = count($rows);
    
  for($i=0; $i < $realcount; $i++) {
    $row = $rows[$i];
  	$rowclass = $i%2 ? "class='odd'" : "";
    $recordset_str.=("<tr $rowclass>");
    $this_id = $row->$key;

    $this_name = get_object_description($obj_type, $row);

    $actions = recordset_buttons($obj_type, $row, $parent_id, $parent_type, $ref_name, $ref_link);
        
  	// special handlers - action buttons  - todo: move to class_defs generic handlers
  	if($show_custom) {
    	if($obj_type=='media') {
    	  $thumb_src = get_media_src($row, 'thumb');
    	  $big_src = get_media_src($row, 'big');
    	  $big_file = get_media_file($row, 'big');
    	  list($big_w, $big_h, $image_type) = getimagesize($big_file);
    	  $js = "onclick='popUp(event, \"".$big_src."\",\"outside\",\"width=".$big_w.",height=".$big_h."\")'";
    	  $thumb = html_image($thumb_src."?fn=".urlencode($row->filename), "", $js);
        $recordset_str.= "<td>$thumb</td>";
    	}
    }

    //if($show_rowbuttons && $colcount > 10) $recordset_str.= "<td>$actions</td>";    

    foreach($classVars as $k=>$class) {
      $align='left';
      if(!is_array($class)) continue;
      list($fld, $sql_fld) = parse_field($table, $k); // converts class.class.class.field to array(field, table.field)

      $v = $row->$fld;
      $att_flags = $class[ATT_FLAGS];
      $fld_val = trim($v);
      $fld_name = $class[ATT_NAME];
      $fld_type = $class[ATT_TYPE];
      $fld_edit = $class[ATT_LISTNAME];
      $fld_flags = $class[ATT_FLAGS];
      $fld_options = $class[ATT_LENGTH];
      $fld_args = $class[ATT_ARGS];

      if(($att_flags & AF_HIDE) || $_SESSION['recordset'][$obj_type]['columns'][$sql_fld] == 1 || $_SESSION['recordset'][$obj_type]['columns'][$sql_fld] >= 0 && $att_flags & AF_HIDE_LIST) continue;

      //if($fld_type=='one2one' || $fld_type=='one2many') continue; // don't show ID of children

	    //if($fld_type=='dummy') continue;

      if($k) {
        if($fld_type=='id' && !($classFlags & NF_NO_VIEW)) { 
          //echo("ot=$obj_type fld=$fld fldtype = $id val = $fld_val<br>");dump($row);die();
          $val=auth_action($obj_type, 'view') ? html_link(get_object_link($obj_type, $fld_val), $fld_val) : $fld_val;
        } elseif($fld_type=='link') {
          $target_description = $fld_val ? get_select_value2($fld_options, $fld_val) : "";         
          // $target_description = $fld_val;
          // if($fld_options == 'cc') echo("val=$fld_val");
          $val= $fld_val && auth_action($fld_options, 'view', $fld_val) ? html_link(get_object_link($fld_options, $fld_val, false, $target_description), $fld_val) : $fld_val;
        } elseif($fld_type=='many2one' || $fld_type=='many2many') {	
          $target_description = $fld_val ? get_select_value2($fld_options, $fld_val) : "";         
          $descriptor = get_select_value2($fld_options, $fld_val);
          $val = $fld_val && auth_action($fld_options, 'view', $fld_val) ? 
            html_link(get_object_link($fld_options, $fld_val), $descriptor, false, $target_description) : $descriptor;
  		  } elseif($fld_type == 'mail_subject' && !strlen($row->subject)) { // parse from headers
  				$val = parse_mail_subject($row->headers);
        } elseif($fld_type=='dummy') {
					$val = get_dummy_value($row, $fld_options);
        } elseif($fld_type=='msel') { // comman separated list of ids into given table
          $val = db_id2name(get_object_table($fld_options), $fld_val, true, true, false, get_object_descriptor($fld_options), get_object_key($fld_options));
        } elseif($fld_type=='img') {
          $val= "<a href='$fld_val' target='image'>$fld_val</a>";
//        } elseif($fld_type=='map') {
//          $val=$fld_args === NULL ? call_user_func($fld_options, $fld_val) : call_user_func($fld_options, $fld_val, $fld_args);
        } elseif($fld_type=='file') {
          $val = file_list($fld_val, $fld);
          //$val= "<a href='$fld_val' target='file'>$fld_val</a>";
        } elseif($fld_type=='bool') {
          $val = $fld_val ? "Yes" : "No";
        } elseif($fld_type=='yesno') {
          $val = strlen($fld_val) ? ($fld_val ? "Yes" : "No") : '?';
    		} elseif($fld_type == 'color' && is_color($fld_val)) {
    		  $val = show_color($fld_val);
        } elseif($fld_type=='one2one' || $fld_type=='one2many') {
          $child_type = parse_filter($fld_options, $row);          
          $val = auth_action($child_type, 'view') ? html_link(get_object_link($child_type, $fld_val), $fld_val) : $fld_val;
				} elseif($fld_type == 'cc') {
					$val = $fld_val ? "xxxx-xxxx-xxxx-".substr($fld_val,12) : "";
					if($fld_val) {
						include_once("cc_check.inc");
						$cardname = get_select_value2('cc_type', $row->cc_type);
						$valid = checkCreditCard($fld_val, $cardname, &$errornumber, &$errortext);				
						$val .=	$valid ? " &#10004; " : " &#10008; ";
					}

        } elseif($fld_type=='float') {
          $align='right';
          $val = number_format($fld_val, $fld_options);
        } elseif($fld_type=='money') {
          $align='right';
          //$val = number_format($fld_val, 2);
          $currency = $fld_options ? $row->$fld_options : $row->currency;
          $cur_sym =  $currency ? get_currency_symbol($currency, true) : "";
          $val = formatFloat($fld_val, 1, $cur_sym);
        } elseif($fld_type=='date' || $fld_type=='datetime') {
		      if(!strlen($fld_val)) {
		        $val = '';
		      } else {
		        $val = sql2human($fld_val);
  		      $time = substr($fld_val, 11);
  		      if($time != "00:00:00") $val .= " $time";
          }
        } else {
        	$val=$fld_val;
        }


      }
      if($val=='') $val = '&nbsp;';
      $recordset_str.= "<td align='$align'>$val</td>";

    }
    if($show_rowbuttons) $recordset_str.= "<td>$actions</td>";
    $recordset_str.=("</tr>");
  }
  $recordset_str.= '</tbody>';
  $recordset_str.= "</table>";
  //$recordset_str.= "</div>";

  if(!$parent_id) $recordset_str.= "</div></form>";

  return $recordset_str;
  
  //if(!$parent_id) $recordset_str .= "<form id='".$obj_type."_searchbarform' action='' onsubmit='cleanSearch(this);' method='get'><div\n>";
  // "</form>";
  //dump($_SESSION['recordset'][$obj_type]['columns']); 
  //return $recordset_str;
}

// saves last object type/id/action to stac
function obj_stack_push($obj_type, $id='', $action='') {
  if(!$_SESSION['stack']) $_SESSION['stack'] = array();
  list($lo, $lid, $lac) = $_SESSION['stack'][0];
  if($lo == $obj_type && $lid == $id && $lac == $action) return; // reload or save w/o close
  //echo("'$lo' == '$obj_type' , '$lid' == '$id' , '$lac' == '$action'<br>");
  array_unshift($_SESSION['stack'], array($obj_type, $id, $action)); // add to top of stack
}

// saves last object type/id/action to stac
function obj_stack_pop() {
  $stack = $_SESSION['stack'];
  if(!is_array($stack)) return;
  return array_shift($_SESSION['stack']);
}

// a record is used to view, add, or edit one row in the database
// if used for inline adding (dialog), id of parent many2one selector must be passed in inline_pid
function record($obj_type, $row, $action='view', $parent_id='', $parent_type='', $messages='', $inline_pid='') {
  $table_rows = array();
  if($action=='add') $row = defaulter($obj_type, $row); // defaulter: pre-populates form with calculated defaults 

  $class_def  = get_class_def($obj_type, true);
  $key        = $class_def->key;
  $this_id    = $row->$key;
  $this_type  = $node_name = get_object_name($obj_type);

  if(!$inline_pid) obj_stack_push($obj_type, $this_id, $action); // saves action to stack

  if($ref_link = $_GET['ref_link'] ?: $_POST['ref_link']) { // get_or_post('ref_link')) { 
    $ref_name = get_or_post('ref_name');
	} elseif($parent_id && $parent_type) {
	  $parent_name = get_object_name($parent_type);  
    $ref_name = "$parent_name $parent_id";
    $ref_link = get_object_link($parent_type, $parent_id, '', '', '', $obj_type);
	} 

  $parent_str = $parent_id ? " (Child of $parent_name $parent_id)" : "";
  $action_str = ucfirst($action);

  $edit = ($action=='edit' || $action=='add' || $action=='copy') ? true : false;
    
  if($edit) { // EDIT => form, submit buttons
    // form, hidden fields
    $fields['obj_type']       = $obj_type;
    $fields['action']         = $action;
    $fields['ref_link']       = $ref_link;
    $fields['ref_name']       = $ref_name;
    $fields['save']           = 1; // this allows us to save using CKEditor's save button
    if($parent_id) {
      $fields['__parent_id']    = $parent_id;
      $fields['__parent_type']  = $parent_type;
      $fields['sc']             = $obj_type;
    }

  } else  { // VIEW => big buttons on top
    if(!$inline_pid) $buttons = record_buttons($obj_type, $row, $action, $this_id, $parent_id, $parent_type, $ref_name, $ref_link);
  }
              
  //begin output
  if($inline_pid) { 
    global $u;
    $public = $u ? 0 : 1;
    $js = "onclick='save_object_dialog(\"$inline_pid\", \"$obj_type\", \"record\", $public);return false;'";
    $save_link = html_link('', phrase('save_and_close', CAPITALIZE), true, phrase('save', CAPITALIZE).' '.get_object_name($obj_type), $js, 'arrow_link');
    $output .= html_div('', 'message', "id='new_object_dialog_messages'");
    $output .= html_div('', 'error',   "id='new_object_dialog_errors'");
    $footer .= html_break().$save_link; // header row - column names
    $footer .= html_break(2)."(To cancel, click the 'X' at the top right of the dialog.)"; // header row - column names
  } else {
    if($edit) {
      $buttons[] = form_input('save', 'submit', 'Save', 0, 0, "id='save_button'");
      $buttons[] = form_input('saveclose',  'submit', 'Save/Close');
      $buttons[] = form_input('cancel',     'submit', 'Cancel');      
    }  
    if(count($buttons)) $table_rows[] = implode('', $buttons); // header row - buttons
    $table_rows[] = array('Field', 'Value'); // header row - column names
  }
  $header_rows = count($table_rows);
  $record_fields  = record_fields($class_def, $row, $this_id, $action, $parent_id, $parent_type, $messages); // fetch the fields
  foreach($record_fields as $k => $v) $table_rows[] = array($k, $v); // add rows with fields to table
  $caption = $inline_pid ? '' : "$action_str $node_name $this_id $parent_str";
  $table = $messages.html_table($table_rows, $caption, 'coffee', $header_rows);  
  $output .= $edit ? html_form(array2form($fields).$table, 'record') : $table; 
  return $output.$footer;
}

// returns advanced search comparison operator + form field (chooser or text input)
//  if(in_array($fld_type,array('int','float','money', 'id','link','date','time'))) {
//    $options=$int_ops; // use numeric operators
//  } elseif($fld_type == 'dummy') {
//  	continue;
//  } elseif (in_array($fld_type,array('str','text','url','email','phone','password'))) {
//    $options=$str_ops; // use textual operators
//  } elseif ($fld_type=='bool') {
//    $options=$bool_ops; // use on/off operator
//  } elseif (in_array($fld_type,array('many2one', 'valSelect', 'intSelect'))) {
//    $options=$pick_ops; // use boolean operators
//  } else {
//    $options=0;
//  }
//  $int_ops = array(''=>'', '=' => '=', '>' => '>', '>=' => '>=', '<' => '<', '<=' => '<=', '><' => 'Between', '!=' => 'Not equals');
//  $str_ops = array(''=>'','=' => 'Equals', 'begin' => 'Begins with', 'contain' => 'Contains', '!=' => 'Not equals');
//  $bool_ops = array(''=>'','on' => 'Set (on)', 'off' => 'Not set');
//  $pick_ops = array(''=>'','=' => 'Equals', '!=' => 'Not equals');


function advanced_search_form($obj_type) {
  $operators = get_operators();
  $classVars = get_object_attributes($obj_type, 1);
  $recordset_obj = $_SESSION['recordset'][$obj_type];
  $search  = $recordset_obj['search'];
  $columns = $recordset_obj['columns'];
  $hits    = $recordset_obj['count'];
  $rows = array();  
  $table = get_object_table($obj_type);
  $rows[] = array('Field', 'Operator', 'Value1', 'Value2', 'Remove?');  
  foreach($search as $var => $val) {    
    if(!is_array($val)) $val = array('=', $val);
    $count = count($val);    
    if($count == 2 || $count == 3) {
      $operator = $val[0];
      if(in_array($operator, $operators)) $rows[]= advanced_search_row($obj_type, $columns, $var, $val); // rows for existing search fields
    }
  }
  $rows[]= advanced_search_row($obj_type, $columns); // row for adding new search field
  $rows[]= array('&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;', form_input('search', 'submit', phrase('done', CAPITALIZE), 0, 0, "id='adv_search'"));  
  $form = html_table($rows, "", 'coffee', 1, 0, 1);
  //$form .= form_input('action', 'hidden', 'search');
  $form .= form_input('obj_type', 'hidden', $obj_type, 0, 0, "id='adv_search_obj_type'");
  return html_form($form, 'advanced_search_form', '', 'get', '', "onsubmit='search_submit();'");
}


function advanced_search_row($obj_type, $columns, $var=0, $val=0) {
  $classVars = get_object_attributes($obj_type, 1);
  $table = get_object_table($obj_type);
  if($var) { // attribute and value already set
    list($fld, $sql_fld) = parse_field($table, $var);
    //echo("fld=$fld sf=$sql_fld table=$table var=$var<br>");
    $class = $classVars[$var];
    $search_text = search2text($val);
    $fld_name = $class[ATT_NAME];
    $operator = $val[0];
    $value1 = $val[1];      
    $value2 = $val[2];
    $hide_url = remove_uri_var($_SERVER['REQUEST_URI'],"_search_".$sql_fld);
    $button   = html_image_link(replace_uri_var($hide_url,'_show_search','Del'), "/images/icons/delete_tiny.gif", phrase('remove', CAPITALIZE)." ".$fld_name);
    $sel_fld = $sql_fld;
    $disabled2 = $operator == '><' ? "" : "disabled='disabled'";
  } else {  // new
    $sql_fld = '_new_';
    $disabled1 = $disabled2 = "disabled='disabled'";
    $button = form_input('_show_search', 'submit', phrase('add', CAPITALIZE), 0, 0, $disabled." id='adv_search_add'");
  }
  
  $onchange = "search2text(\"".$sql_fld."\")";
  $js = "onchange='$onchange'";

  // the 5 columns in the row...  
  $field_chooser = search_field_chooser($obj_type, $sql_fld, $sel_fld);
  $operator_chooser = search_operator_chooser($sql_fld, $operator);  

  $field1 = search_box('_val1_'.$sql_fld, $value1, $class, "$js $disabled1"); // this prints the search input box
  $field2 = search_box('_val2_'.$sql_fld, $value2, $class, "$js $disabled2"); // this prints the search input box
  $result = form_input('_adv_search_'.$sql_fld, 'text', $search_text);

  return array($field_chooser, $operator_chooser, $field1, $field2, $button.$result);
}

function get_operators() {
  return array('>','>=','<','<=','<>','!=','=', '><');
}

function search_operator_chooser($sql_fld, $operator='') {
  $onchange = "search2text(\"".$sql_fld."\")";
  $disabled = $sql_fld == '_new_' ? "disabled='disabled'" : "";
  $operators1 = array(''   => 'Pick operator...',
                      '='  => 'Equal',
                      '<>' => 'Not equal',
                      '>'  => 'Greater than',
                      '>=' => 'Greater than or equal to',
                      '<'  => 'Less than', 
                      '<=' => 'Less than or equal to', 
                      '><' => 'Between',
                      );

  return select_from_array('_op_'.$sql_fld, $operators1, $operator, "", $disabled, $onchange);
}


function search_field_chooser($obj_type, $name, $selected_field='') {
  $classVars = get_object_attributes($obj_type, 1);
  $table = get_object_table($obj_type);
  $onchange = "search2text(\"".$name."\")";
  $cols[''] = "Pick field...";
  foreach($classVars as $k => $class) {
    list($fld, $sql_fld) = parse_field($table, $k); // converts class.class.class.field to array(field, table.field)
    $att_flags = $class[ATT_FLAGS];
    if($att_flags & AF_HIDE) continue; // this field is hidden or hidden in list view
    $cols[$sql_fld] = $class[ATT_NAME];
  }
  return select_from_array('_select_'.$name, $cols, $selected_field, "", "", $onchange);
}

function get_siblings($obj_type, $parent_id, $parent_type) {
	global $db;
	$key = get_object_key($obj_type);	
  $table = get_object_table($obj_type);
  if($parent_id && $parent_type) { // record is part of child recordset
  	$parent_key = get_object_parent_key($obj_type);
    echo("get_siblings: child recordset obj_type=$obj_type parent_id=$parent_id parent_type=$parent_type parent_key = $parent_key<br>");
  	//if($parent_key) echo("found $parent_key for $obj_type<br>");
  	if(!$parent_key ) list($pt, $parent_key) = get_object_parent($obj_type);
  	return $db->getCol("SELECT $key FROM $table WHERE $parent_key=$parent_id");
  } else { // record is main recordset - fetch filters, sort, order, first, limit from app
    //echo("get_siblings: main recordset<br>");
    $filters=$_SESSION['recordset'][$obj_type]['filters'];
    $srt=    $_SESSION['recordset'][$obj_type]['sort'];
    $rev=    $_SESSION['recordset'][$obj_type]['order'];
    $first=  $_SESSION['recordset'][$obj_type]['first'];
    $limit=  $_SESSION['recordset'][$obj_type]['limit'];
    return get_objects($obj_type, $filters, $srt, $rev, 0, 0, "$table.$key"); // use generic get_objs function
  }
}

function back_button($ref_link, $ref_name) {
  if($ref_link) {
    $back_link = $ref_link; $back_name = $ref_name;
  } elseif(count($_SESSION['stack']) > 1) {
    list($lobj, $lid, $laction) = $_SESSION['stack'][1];
		$back_link  = get_object_link($lobj, $lid, $laction)."&amp;__ps";
    $back_name = "$laction ".get_object_name($lobj).($lid=='' ? " list" : " $lid");
  } else { // no referer set, stack is empty, use http referer
		$back_link  = $_SERVER['HTTP_REFERER'];
    $back_name = phrase('previous_page');
		$back_link  = '';
  }		
	return $back_link ? 
	  html_image_link($back_link, "/images/icons/back.gif", phrase('back_to', CAPITALIZE)." ".$back_name) : // add back button
    html_image("/images/icons/previous_disabled.gif"); // disabled button
}

function recordset_buttons($obj_type, $row, $parent_id='', $parent_type='', $ref_name='', $ref_link='') {
  $actions = array();
  $key = get_object_key($obj_type);
  $this_name = $obj_type; // todo: fix
  $action = ''; 

  $actions = default_class_actions($obj_type, $row->$key, $this_name, $action, $parent_id, $parent_type, $ref_name, $ref_link, 'recordset'); // standard buttons or links
  if($custom_actions = class_actions($obj_type, $row, 'recordset', $ref_name, $ref_link)) $actions = array_merge($actions, $custom_actions); // add custom buttons or links  
  return count($actions) ? implode(' ', $actions) : '';
}

// these are the standard add/delete/edit/copy buttons for records and recordsets
function default_class_actions($obj_type, $id, $name, $action, $parent_id='', $parent_type='', $ref_name='', $ref_link='', $context='recordset') {
  //echo("parent_type = $parent_type<br>");
	$dim = $context == 'recordset' ? 16 : 48;
  $obj_name = get_object_name($obj_type);

  $actions = array();
//  $name = $id; // todo, use descriptor
  if($action != 'view' && auth_action($obj_type, 'view', $id)) {
    $url = get_object_link($obj_type, $id, 'view', $parent_id, $parent_type, '', $ref_name, $ref_link);
  	$image = $context == 'recordset' ? "/images/icons/view_tiny.gif" : "/images/icons/view.gif";
    $link = html_image_link($url, $image, phrase('view', CAPITALIZE)." $obj_name", false, '', '', $dim, $dim);
  	$actions[] = $link; // add view-link
  }
  
  if($action != 'edit' && auth_action($obj_type, 'edit', $id)) {
    $url = get_object_link($obj_type, $id, 'edit', $parent_id, $parent_type, '', $ref_name, $ref_link);
  	$image = $context == 'recordset' ? "/images/icons/edit_tiny.gif" : "/images/icons/edit.gif";
    $link = html_image_link($url, $image, phrase('edit', CAPITALIZE)." $obj_name", false, '', '', $dim, $dim);
  	$actions[] = $link; // add edit-link
  }
  
  if($action != 'del' && auth_action($obj_type, 'del', $id)) {
    $url = get_object_link($obj_type, $id, 'del', $parent_id, $parent_type, '', $ref_name, $ref_link);
  	$image = $context == 'recordset' ? "/images/icons/delete_tiny.gif" : "/images/icons/delete.gif";

		$confirm_text = "Are you sure you want to delete $obj_name $id";
		$desc = get_object_descriptor_string($obj_type, $id);
		if (MDB2::isError($desc) && $_SESSION['dev']) {
		  dump($desc);
		} else {
      if($desc) $confirm_text .= " ($desc[1])";
		}
		$js = "onclick = 'if(!confirm(\"$confirm_text ?\")) return false;'";
		$link = html_image_link($url, $image, phrase('delete', CAPITALIZE)." $obj_name", false, '', $js, $dim, $dim);

//    if($repeat_id = get_object($obj_type, $id, 'repeat_id')) {
//      $url .= "&repeat_id=$repeat_id";
//  		$confirm_text = "Do you want to delete the entire sequence or just $obj_name $id";
//  		if($name) $confirm_text .= " ($name)";
//  		$js = "onclick = 'if(!confirm(\"$confirm_text ?\")) return false;'";
//	  } else {
//  		$confirm_text = "Are you sure you want to delete $obj_name $id";
//  		if($name) $confirm_text .= " ($name)";
//  		$js = "onclick = 'if(!confirm(\"$confirm_text ?\")) return false;'";
//		}

  	$actions[] = $link; // add delete-link
  }

  // if($action != 'copy' && auth_action($obj_type, 'copy', $id)) {
  //   $url = get_object_link($obj_type, $id, 'copy', $parent_id, $parent_type, '', $ref_name, $ref_link);
  // 	$image = $context == 'recordset' ? "/images/icons/copy_tiny.gif" : "/images/icons/copy.gif";
	// 	$link = html_image_link($url, $image, phrase('copy', CAPITALIZE)." $name");
  // 	$actions[] = $link; // add copyete-link
  // }

  return $actions;
}

function record_buttons($obj_type, $row, $action, $id, $parent_id, $parent_type, $ref_name, $ref_link) {
	$actions = array();						
	$dim = 48;
	$actions[] = html_image_link(get_object_link(), "/images/icons/home.gif", phrase('home', CAPITALIZE), false, '', '', $dim, $dim);  // always home button
	$actions[] = back_button($ref_link, $ref_name);
    
  $this_name = get_object_description($obj_type, $row);

  // add list button (recordset)
  if($search = $_SESSION['recordset'][$obj_type]['search']) $qs = "&".search2qs($search);
  $up_link = $parent_id ? get_object_link($parent_type, $parent_id) : get_object_link($obj_type, 0, 'list').$qs;
	if(auth_action($obj_type, 'list') && (!($classFlags & NF_NO_LIST))) $actions[] = html_image_link($up_link, "/images/icons/up.gif", $node_name." ".phrase('list', CAPITALIZE), false, '', '', $dim, $dim); // list button

	$set = get_siblings($obj_type, $parent_id, $parent_type);
	if(count($set)) { // add navigation (first, prev, next, last)
	  //dump($set);
    $si = array_search($id, $set); // index of this id in the recordset
    $count = sizeof($set);
  
    $actions[] = $si > 1 ? // first button
      html_image_link(get_object_link($obj_type, $set[0], 'view', $parent_id, $parent_type), "/images/icons/first.gif", phrase('first', CAPITALIZE), false, '', '', $dim, $dim) :
      html_image("/images/icons/first_disabled.gif", '', '', '', $dim, $dim); 
  
    $actions[] = $si > 0 ? // prev button
      html_image_link(get_object_link($obj_type, $set[$si-1], 'view', $parent_id, $parent_type), "/images/icons/previous.gif", phrase('previous', CAPITALIZE)) :
      html_image("/images/icons/previous_disabled.gif", '', '', '', $dim, $dim); 
  
    $actions[] = $si+1 < $count ? // next button
      html_image_link(get_object_link($obj_type, $set[$si+1], 'view', $parent_id, $parent_type), "/images/icons/next.gif", phrase('next', CAPITALIZE)) :
      html_image("/images/icons/next_disabled.gif", '', '', '', $dim, $dim); 
  
    $actions[] = $si+2 < $count ? // last button
      html_image_link(get_object_link($obj_type, $set[$count-1], 'view', $parent_id, $parent_type), "/images/icons/last.gif", phrase('last', CAPITALIZE)) :
      html_image("/images/icons/last_disabled.gif", '', '', '', $dim, $dim); 
  }
  		
	// add standard buttons or links for all classes
  $actions = array_merge($actions, default_class_actions($obj_type, $id, $this_name, $action, $parent_id, $parent_type, $ref_name, $ref_link, 'record'));

	// add custom buttons or links for this class
  if($custom_actions = class_actions($obj_type, $row, 'record', $ref_name, $ref_link)) $actions = array_merge($actions, $custom_actions);

  return $actions;
}

// returns the security level from security
// if NF_NO_SECURITY, check this before calling this function

function check_security_level($node, $action, $user_level) {
  global $db;
  if(!$user_level) return false; // must be logged in for back in access - 
  $req_level = $db->getOne("SELECT user_level FROM security WHERE node='$node' AND action='$action'");
  // echo("req level for $action-$node = $req_level. This user = $user_level<br>");
  return $user_level >= $req_level;
}

function auth_action($node, $action='view', $id=0, $user_level=0) {
  global $db;
  global $u_id;
  global $u_level;
  global $u;
  global $u_property_types;
  global $propertyTypeArray;
  global $eventTypes;
  //if(!$action) $action = 'list';

  if($eventTypes[$obj_type]) return auth_action('event', $action, $id, $user_level);
  
  $actions = array('view', 'list', 'add', 'edit', 'del', 'copy');
  if(!in_array($action, $actions)) {
    echo("Action '$action' not in ".implode(",", $actions));
    return false; // not valid action
  }
  if(!$user_level) $user_level=$u_level;

  // check if object allows this action
  $flags = get_object_flags($node);
  if($flags & NF_NO_SECURITY) return true; // check if object allows all actions by all users (no security)
  if($action=='search') $action='list'; // allow search if list is allowed
  if($action=='copy') $action = 'edit'; // same permissions for add and copy for now  
  if($action=='add' && ($flags & NF_NO_ADD)) return false;
  if($action=='del' && ($flags & NF_NO_DELETE)) return false;
  if($action=='list' && ($flags & NF_NO_LIST)) return false;
  if($action=='view' && ($flags & NF_NO_VIEW)) return false;
  if($action=='edit' && ($flags & NF_NO_EDIT)) return false;
  if($action=='copy' && ($flags & NF_NO_COPY)) return false;


  if($user_level == USER_LEVEL_SYSTEM) return true; // allow all for "The Man"
  if(!$user_level) return false;
 
  // if this is a property type and this user has property type filters, check if allowed  
//  if($propertyTypeArray[$node] && $u_property_types && !in_array($node, $u_property_types)) return false;
  if($propertyTypeArray[$node] && $u_property_types && !in_array($node, $u_property_types)) return false;
  

	// this should be in class_handlers (custom auth)
  if($id) { // if id of object is given, check if this particular user can $action this object
    if($node=='reservation') return auth_action_reservation($action, $id, $user_level);
    if($node=='chat') return auth_action_chat($action, $id, $user_level);     
  }
  if(!check_security_level($node, $action, $user_level)) return false;  // check if action is allowed for this type by this user level (security table)
  
  if($id) { // if id of object is given, check if this particular user can $action this object
    $filters = get_object_filters($node, $user_level, $u_id);
    //if($node == 'site') echo("Action = $action, still ok<br>");dump($filters);
    if(!get_objects_count($node, $filters, $id)) return false;

  }

  return true;
}

// checks if input is ID, object, or array
// returns object
// function param2object($type, $input) {
//   if(is_object($input)) $obj = $input;                               // $input is object
//   else if(is_numeric($input)) $obj = get_object($type, $input);      // $input is ID
//   else if(is_array($input)) $obj = array2obj($input);                // $input is array
//   else mydie("param2object: invalid input  '$input'");
//   return $obj;
// }

function any2obj($obj_type, $array_obj_or_id) {
  if(is_object($array_obj_or_id)) return $array_obj_or_id;
  if(is_array($array_obj_or_id)) return array2obj($array_obj_or_id); // array is passed
  if($obj_type && $array_obj_or_id) return get_object($obj_type, $array_obj_or_id);
  return NULL;
}

// sorts array of objects according to specified key

function group_cmp ($a, $b) {
  if($a->group == $b->group) return 0;
  return ($a->group < $b->group) ? -1 : 1;
}

function group_sort($array) {
  return usort($array, 'group_cmp');
}

// return name of field which refers to the id of the object's parent (typically 'parent_id')
// if parent_type is set, also looks for a link or many2one to this type
function get_object_parent_key($type, $parent_type='') {
  if(!$type) die ("get_object_key: missing type");
  $attributes = get_object_attributes($type, 0);
  foreach($attributes as $key=>$att) {
    if($att[ATT_TYPE] == 'parent_id') return $key;  // this is primary id
    if($parent_type && ($att[ATT_TYPE] == 'link' || $att[ATT_TYPE] == 'many2one') && $att[ATT_RELATION_TYPE] == $parent_type) return $key;  
  }
  return '';
}

function get_select_box($field, $type, $selected_key=0) {
  global $db;
  list($table, $key, $val) = get_select_def($type);
    return select_from_db($field, $table, $selected_key, $key, $val, $first="Select $type");
}


function yes_no_chooser($name, $selected_key=0, $first="", $disabled="", $onchange="") {
  $y = phrase('yes', CAPITALIZE);
  $n = phrase('no', CAPITALIZE);
  $yn = "$y/$n";
  $rows = array('' => $yn, DB_YES => $y, DB_NO => $n);
  return select_from_array($name, $rows, $selected_key, $first, $disabled, $onchange);
}

function yes_no_required_array() {
  $y = phrase('yes', CAPITALIZE);
  $n = phrase('no', CAPITALIZE);
  $r = phrase('required', CAPITALIZE);
  $ynr = "$y/$n/$r";
  $rows = array('' => $ynr, DB_YES => $y, DB_NO => $n, DB_REQUIRED => $r);
  return $rows;
}

function yes_no_required_chooser($name, $selected_key=0, $first="", $disabled="", $onchange="") {
  return select_from_array($name, yes_no_required_array(), $selected_key, $first, $disabled, $onchange);
}


// function get_select_box2($name, $obj_type, $selected_key=0, $onchange="", $filters="", $sort="", $js="", $size=30, $noajax=0) {
// alias for the old get_select_box2
function object_select($name, $obj_type, $options = NULL) {
  $search = $options['search'];
  if($search && !$options['filters']) $options['filters'] = $search;
  return get_select_box2($name, $obj_type, $options['value'] ?: $_REQUEST[$name], $options['onchange'], $options['filters'], $options['sort'], $options['js'], ($options['size'] ?: 30), $options['noajax'], $options['id']);
}

// returns either drop down select box for an object (used for many2one relation)
// ajax chooser for an object (used for many2one relation) 
function get_select_box2($name, $obj_type, $selected_key=0, $onchange="", $filters="", $sort="", $js="", $size=30, $noajax=0, $id='') {
  global $db;
  global $select_max_options;
  //dump($filters);
  //echo("id of $name=$id<br>");
  if(!$noajax) {
    $max_options = pick_first($select_max_options, 300); // maximum number of options to show in a drop down menu (otherwise show AJAX chooser)
    $count = get_objects_count($obj_type, search2filters($filters));
    check_db_result($count); 
    if($count > $max_options) return form_ajax_chooser($name, $selected_key, $obj_type, $filters, $size, 'generic_chooser', $onchange, $js, $id);
  }
  $sort = $sort ?: get_object_sort($obj_type);
  $rows = get_object_descriptor_list($obj_type, $filters, $sort);
  $obj_name = get_object_name($obj_type);
  return select_from_array($name, $rows, $selected_key, "-- ".phrase('select', LOWERCASE)." --", $onchange, $js, $titles, $id);
}

// function select_from_array($name, $rows, $selected_key=0, $first="", $onchange="", $js="", $titles='') {

function get_select_value($type, $selected_key) {
  global $db;
  list($table, $key, $descriptor) = get_select_def($type);
  return $db->getOne("SELECT $descriptor FROM $table WHERE $key='$selected_key'");
}

function get_select_value2($obj_type, $selected_key) {
  if(!$selected_key) return "";
  $row = get_object_descriptor_string($obj_type, $selected_key);
  // if($obj_type == 'cc') {
  //   echo("descriptor for cc $selected_key:");
  //   dump($row);
  // }
    
  //dump($row);
  //$key = get_object_key($obj_type);
  
  $id = $row[0];
  unset($row[0]);
  $result = is_array($row) ? implode(" ", $row) : $row;
  $result = trim($result);
  if(!$result) return $selected_key;
  return $result;
}

function get_select_def($type) {

  $table = get_object_table($type);
  $key = get_object_key($type);
  $descriptor = get_object_descriptor($type);
  return array($table, $key, $descriptor);
}

function select_from_db($name, $table, $selected_key=0, $key='id', $val='name', $first="") {
  global $db;
  if(!$first) $first = phrase('please select...', CAPITALIZE);
  $rows = $db->getAll("SELECT $key, $val from $table");
  $select_box .= "<select name='$name'>";
  if($first) $select_box .= "<option value='0'>$first</option>";
  foreach($rows as $row) {
    $id = $row->$key;
    //$value = $row->$val;
    $value = phrase($row->$val, CAPITALIZE);
    $selected = $selected_key == $id || $_GET[$name] == $id || $_POST[$name] == $id ? "selected='selected'" : "";
    $select_box .= "<option value='$id' $selected>$value</option>";
  }
  $select_box .= "</select>";
  return $select_box;
}


function get_class_def($type, $get_relations=0) {

  $class->type = $type;
  $class->name = get_object_name($type);
  $class->table = get_object_table($type);
  $class->key = get_object_key($type);

  $class->fields = get_object_attributes($type, $get_relations);
  $class->descriptors = get_object_descriptor($type);
  $class->flags = get_object_flags($type);
  return $class;
}

// returns link to object of given type/id
// if id is 0/null/'', returns link to list
// if admin is set, it returns admin link (app.php)
// otherwise, it returns public link (if exists)

function get_object_link($type='', $id=0, $action='', $parent_id='', $parent_type='', $section='',$ref_name='', $ref_link='') {
  $host = $_SERVER['HTTP_HOST'];
  //$app_link = get_page_link(PAGE_ADMIN) ?: '/admin/app.php';
  $app_link = get_page_link(PAGE_ADMIN);
	$link = "http://$host".$app_link;
	if(!$type) return $link;
  $fn_name = 'object_'.$action.'_link_'.$type;
  if(function_exists($fn_name)) {
    // echo("<br>$fn_name exists, calling $fn_name($id)<br>");
    $link = call_user_func($fn_name, $id); // custom link
  } else {	// generic link
  	$link .= "?obj_type=$type";
  	if($id) $link .= "&amp;id=$id";
  	if($action && $action!='view') $link .= "&amp;ac=$action";
  	if($parent_id && $parent_type) { // todo: doesn't work if id is zero
  		if(!$parent_type) echo("get_object_link: type=$type id=$id action=$action pid='$parent_id' pt='$parent_type'; parent_id set but not type<br>");
  		$link .= "&amp;__parent_id=$parent_id";
  		$link .= "&amp;__parent_type=$parent_type";
  		$last = "&amp;sc=$type#$type"; // hash must come last
  	} elseif($section) {
  		$link .= "&amp;sc=$section#$section"; // expand child recordset and go there
  	}
  }
	if($ref_name && $ref_link) $link .= "&amp;ref_name=$ref_name&amp;ref_link=$ref_link";
	  
	return $link.$last;
}

function get_link($type, $id=0, $admin=1, $html=0) {
  global $propertyTypeArray;
  if($admin) {
    $link = get_object_link($type, $id);
  } else if($id && $propertyTypeArray[$type]) {   
    $link = property_link(get_object($type, $id));
  }
  return $html ? "<a href='$link'>$link</a>" : $link;
}

function get_field_default($fld_default) {
  // special handler for default values
  switch($fld_default) {
    case ATT_DEFAULT_NULL:        return NULL; break;
    case ATT_DEFAULT_ZERO:        return 0; break;
    case ATT_DEFAULT_BLANK:       return ''; break;
    case ATT_DEFAULT_NOW:         return date("Y-m-d H:i:s"); break;
    case ATT_DEFAULT_NOW_SHORT:   return date("YmdHis"); break;
    case ATT_DEFAULT_TODAY:       return date("Y-m-d"); break;
    case ATT_DEFAULT_SESS_ID:     return session_id(); break;
    case ATT_DEFAULT_CLIENT_IP:   return $_SERVER['REMOTE_ADDR']; break;
//    case ATT_DEFAULT_CLIENT_IPL:  return ip2int($_SERVER['REMOTE_ADDR']); break;
    case ATT_DEFAULT_LANG:        return $_SESSION['language'];break;
    case ATT_DEFAULT_LANGUAGE:     return $_SESSION['language']; break;
    case ATT_DEFAULT_COUNTRY:     return $_SESSION['country_code']; break;
    case ATT_DEFAULT_GEO_ID:      return $_SESSION['geo_id']; break;
    case ATT_DEFAULT_CITY_ID:     return $_SESSION['city_id']; break;
    case ATT_DEFAULT_CITY_NAME:   return $_SESSION['city_name']; break;
    case ATT_DEFAULT_USER_ID:     return $_SESSION['user_id']; break;
    case ATT_DEFAULT_USER_LEVEL:  return $_SESSION['user_level'] ? $_SESSION['user_level'] : $_SESSION['anon_user_level']; break;
    case ATT_DEFAULT_GUEST_ID:    return $_SESSION['guest_id']; break;
    case ATT_DEFAULT_ORG_ID:      return $_SESSION['org_id']; break;
    case ATT_DEFAULT_OWNER_ID:      return $_SESSION['owner_id']; break;
    case ATT_DEFAULT_STAFF_ID:      return $_SESSION['staff_id']; break;
    case ATT_DEFAULT_ADMIN_ID:      return $_SESSION['admin_id']; break;
    case ATT_DEFAULT_AGENT_ID:      return $_SESSION['agent_id']; break;
    case ATT_DEFAULT_AFF_ID:      return $_SESSION['aff_id']; break;
    case ATT_DEFAULT_PAGE_ID:     return $_SESSION['page_id']; break;
    case ATT_DEFAULT_SITE_ID:     return $_SESSION['site_id']; break;
    case ATT_DEFAULT_CLIENT_CC:   return $_SESSION['country_code']; break;
    case ATT_DEFAULT_PROPERTY_ID: return $_SESSION['property_id']; break;
    case ATT_DEFAULT_PROPERTY_TYPE: return $_SESSION['property_type']; break;
    case ATT_DEFAULT_CLIENT_ID:     return $_SESSION['client_id']; break;
    case ATT_DEFAULT_LEGAL_ID:     return $_SESSION['legal_entity_id']; break;
    case ATT_DEFAULT_SERVER:        return SYSTEM_SERVER_ID; break;
    default: return $fld_default;
  }  
}

function get_dummy_value($row, $fld_options) {
	$display_val_array = array();
	$dummy_fields = explode(' ', $fld_options);
	foreach($dummy_fields as $dummy_field) {
		$display_val_array[]= $row->$dummy_field;
	}
	$display_val = implode(' ', $display_val_array);
	//dump($row); echo($fld_options);echo("res=$display_val");
	return $display_val;
}	



// for one record (class + id)
// returns assoc. array of Name + Field Value (input, search, or print, depending on action)
// optionally, pass in associate array $fields where key=field name, optional value=attribute overrides
function record_fields($class_def, $row, $this_id, $action, $parent_id=0, $parent_type='', $messages='', $fields=NULL) {
  global $db;
  global $xhtml;
  $st = $xhtml ? "/" : '';
  $recordArray = array();
  $edit = ($action=='edit' || $action=='search' || $action=='add' || $action=='copy') ? true : false;
  $search= $action=='search';
  if(is_array($row)) $row = array2obj($row);

  // $this_id    = $row->$key; // can't we use this instead of passing this_id ?
  $this_type  = $class_def->name;
  $classVars  = $class_def->fields;
  $obj_type   = $class_def->type;
  $classTable = $class_def->table;
  $key        = $class_def->key;
  
	$hidden_fields = "";
  if(count($fields)) { // pick out the fields we care about in the same order as the $fields argument
    //dump($fields);
    foreach($fields as $field => $overrides) {
      //echo("field = $field
      $newClassVars[$field] = $classVars[$field];
      if(is_array($overrides)) {
        //dump($overrides);
        foreach($overrides as $k=>$v) $newClassVars[$field][$k] = $v; // overwrite
      }        
    }
    $classVars = $newClassVars;
  }
  //dump($fields);dump($classVars);die();
  //dump($classVars);
  
  
  foreach($classVars as $fld =>$class) {
    if($action == 'copy' && $fld == $key) continue; // copy is basically same as edit, but w/o the key, results in add with prefilled data

  	$record_str = "";
    $fld_default = 0;

    $level=0; $prefix='';
    if($pos=strrpos($fld, '.')) {
      $full_fld = str_replace('.', '-', $fld); // periods (.) don't work in POST, so use hat (-)
      $level = substr_count($fld, '.');
      $fld = substr($fld, $pos+1);
      //$prefix = str_repeat("&nbsp;&nbsp;", $level);
    } else {
      $full_fld = $classTable."-".$fld;
    }

    $v = $row->$fld;
    $fld_val = $val = trim($v);
       
    $fld_name = $class[ATT_NAME];
    $fld_default = $class[ATT_DEFAULT];
    $fld_flags= $att_flags = $class[ATT_FLAGS];
    $fld_type = $class[ATT_TYPE];
    $fld_options = $fld_len = $class[ATT_LENGTH];
    $fld_args = $class[ATT_ARGS];
    $fld_sort =  $class[ATT_SORT];
    $fld_args2 = $class[ATT_ARGS2];

    $fld_id_js = "id='$full_fld'"; // used by form_input 


    if($parent_id && $fld_type == 'parent_id' && !$att_val) {
      $fld_default = $parent_id; // set default to passed value $parent_id
    } elseif($parent_id && $fld_type == 'parent_type' && !$att_val) {
      $fld_default = $parent_type; // set default to passed value $parent_type
    } elseif(!$att_val && $passed_default = pick_first($_GET['__default_'.$fld], $_POST['__default_'.$fld])) {
      $fld_default = $passed_default;
    } else {
      $fld_default = get_field_default($fld_default); // get default value
    }
    

    if($edit && $fld_type=='one2many' && $att_flags & AF_READONLY_EDIT) continue; // don't show lists in edit mode if readonly flag is set

  	
  	// locked, readonly, hide 
    $locked = $att_flags & AF_LOCKED ? "readonly = 'readonly'" : "";
    $readonly = $att_flags & AF_READONLY
            || ($action=='edit' && $att_flags & AF_PRIMARY)
            || ($action=='edit' && $att_flags & AF_READONLY_EDIT);
    $hide = $att_flags & AF_HIDE
            || ($action=='add' && $att_flags & AF_PRIMARY)
            || $fld_type=='one2one'
            || ($action=='edit' && $att_flags & AF_HIDE_EDIT)
            || ($action=='view' && $att_flags & AF_HIDE_VIEW)
            || ($action=='add' && $att_flags & AF_HIDE_ADD);
    
    if(!is_array($class)) {
      $i++;
      continue; // subheading
    }

    if(!$fld_name) $fld_name = phrase($fld);
    $fld_name = $prefix.$fld_name;
    
    //if($edit && ($fld_flags & AF_OBLIGATORY)) $fld_name = "<b>$fld_name (*)</b>";
		  
    $fld_edit=$edit;

    $search_len = 30;

		// value to display 
    if($fld_type=='date' || $fld_type=='datetime') {							
      $display_val = date_convert_sql2human($fld_val, $_SESSION['month_names']);
      $time = substr($fld_val, 11);
      if($time != "00:00:00") $display_val .= " $time";
		} elseif($fld_type == 'one2one' || $fld_type == 'many2one') {
			$display_val = get_select_value2($fld_options, $val);
		} elseif($fld_type == 'dummy') {
			$display_val = get_dummy_value($row, $fld_options);
		} elseif($fld_type == 'password') {
			$display_val = "*****";
		} elseif($fld_type == 'color' && is_color($val)) {
		  $display_val = show_color($val);
		} elseif($fld_type == 'crypt') {
		  global $crypt_file;
		  $pwd = read_file($crypt_file);
		} elseif($fld_type == 'cc') {
		  global $crypt_file;
		  $pwd = read_file($crypt_file);

			$display_val = $val ? "xxxx-xxxx-xxxx-".substr($val,12) : "";
			if($val) {
				include_once("cc_check.inc");
				$cardname = get_select_value2('cc_type', $row->cc_type);
				$valid = checkCreditCard($val, $cardname, &$errornumber, &$errortext);				
				$display_val .=	$valid ? " &#10004; " : " &#10008; ";
			}
		} else {
			$display_val = $val;
		}
			
    if($fld_edit) { // edit or add
			$max_input_len = 40;
			// echo("$fld ($fld_type) len=$len<br>");			
			
			// blank and adding - try to set default value
      if($action=='add' && !$val) { 
      	if($fld_type=='parent' && $parent_id) { // use parent id
      		$val = $parent_id;
      	} else {
	      	$val = $fld_default ? $fld_default : ""; // use default value when adding
	      	$display_val = $val;

	      	// special handler for default values
	      	$user_type_array = $_SESSION['user_type_array'];
	      	if($fld=='user_level' && ($ul_def = $user_type_array[ucfirst($obj_type)])) {
	      		$val = $ul_def;	
	      		$display_val = 	ucfirst($obj_type);
	      	}
	      }
	    }

      if($fld_type=='one2many') {        
        if($action == 'add') continue; // don't show child record sets in add mode
        $child_type = parse_filter($fld_options, $row);
        $childRows = get_object_children($child_type, $row, $this_id, $fld_options, $fld_args, $fld_args2);
        foreach($childRows as $childObj) {
          $child_key = get_object_key($child_type);
          $child_id = $childObj->$child_key;
          $record_str .= edit_object_inline($child_type, $child_id, $child_fields, $options);
        }
        
      } elseif($hide) {
        //echo("$fld = hidden<br>");
        $record_str.= "<input name='$fld' id='$full_fld' type='hidden' value='$val'$st>";
      } elseif($readonly) {
        //echo("$fld = readonly<br>");
        $record_str.= "<input name='$fld' id='$full_fld' type='hidden' value='$val'$st>$display_val";
      } elseif($fld_type=='many2one' || $fld_type=='many2many') {
        //$filters = parse_filter($fld_args, $row);
        // echo("fld=$fld fld_args=$fld_args filters=$filters<br>");
        // dump($fld_args);
        // dump($fld_options);
        $select_options['value']   = $val;
        $select_options['filters'] = $fld_args;
        $select_options['sort']    = $fld_sort;
        $select_options['id']      = $full_fld;
        if($att_flags & AF_FORCE_SELECT) $select_options['noajax'] = true; 
        $record_str.= $att_flags & AF_LARGE ? 
          //form_ajax_chooser($fld, $val, $fld_options, $fld_args) : 
          form_ajax_chooser($fld, $val, $fld_options, $fld_args, 0, 'generic_chooser', '', '', $options['id']) :
          object_select($fld, $fld_options, $select_options);
          
          // get_select_box2($fld, $fld_options, $val, '', $fld_args, $fld_sort);

        if($att_flags & AF_INLINE_ADD) {
          $title = 'New '.get_object_name($fld_options);
          $js = "onclick='new_object_dialog(\"$fld\", \"$fld_options\", \"$title\"); return false;'";
//     show_dialog('Loading... (Edit ' + obj_type + ' ' + obj_id + ')');
//     ajax_url = "/home/ajax/calfilter.php?ac=load_dialog&obj_type=" + obj_type + "&id=" + obj_id;
// 
//     $dialog.load(ajax_url, function (responseText) {
//       $('#dialog').dialog('option', 'title', dialog_title(document.forms.overlay_form));
//       $('#overlay_content').show();
//       update_pickup(); // update airport pickup checkbox
//       update_pickup_fee();
//     });                                    

          
          $record_str .= ' '.html_link('/link/to/new/dialog/if/js/is/off/', phrase('new', CAPITALIZE).' '.get_object_name($fld_options), true, $title, $js, 'arrow_link');
        }
      } elseif($fld_type=='intSelect') {
        $min = $fld_options[0];
        $max = $fld_options[1];
        $step = $fld_options[2];
        $postfix = $fld_options[3];

        $record_str.=  select_from_array($fld, num_array($min, $max, $step, $postfix), $val);
		  } elseif($fld_type == 'dummy') {
		  	continue;
		  } elseif($fld_type == 'image') {
        if($val) { // only works for images for now - todo add video
          // $record_str .= html_div(html_image($val, $val), 'float_left pad imgContainer');
          //$record_str .= html_image($val, $val); 
        }
        // $extra_fields = " Caption: ".form_input('comment', 'text', '', 50, 30);
        global $data_dir;
        $val = file_exist_list($data_dir, $val);        
        $max_size = $fld_flags & AF_LARGE ? human2bytes("16MB") : human2bytes("4MB");
        $allowed_extensions = is_array($fld_options) ? $fld_options : file_extensions('image');
        $allow_multiple = $fld_flags & AF_ALLOW_MULTIPLE;
  		  $record_str .= image_uploader($full_fld, $val, array('allowed_extensions' => $allowed_extensions, 'allow_multiple' => $allow_multiple, 'size_limit' => $max_size));
  		  $record_str .= $allow_multiple ? form_text($fld, $val, 4, 80, $fld_id_js) : form_input($fld, 'text', $val, 50, $fld_len, $fld_id_js);
		  } elseif($fld_type == 'file') {
        //if($val) { // only works for images for now - todo add video
        //  $pathinfo = pathinfo($val);
        //  //dump($pathinfo);
        //  $record_str .= "<a href='$val' target='file'>$pathinfo[filename]</a>";
        //  // $record_str .= html_div(html_image($val, $val), 'float_left pad imgContainer');
        //  //$record_str .= html_image($val, $val); 
        //}

        // remove inexistent files from file list
        global $data_dir;
        $val = file_exist_list($data_dir, $val);
        //dump($ex_files);

        $max_size = $fld_flags & AF_LARGE ? human2bytes("200MB") : human2bytes("4MB");
        $allow_multiple = $fld_flags & AF_ALLOW_MULTIPLE;
        $allowed_extensions = is_array($fld_options) ? $fld_options : file_extensions('all');
  		  $record_str .= file_uploader($full_fld, $val, array('allowed_extensions' => $allowed_extensions, 'allow_multiple' => $allow_multiple, 'size_limit' => $max_size));
  		  //$record_str .= form_input($fld, 'text', $val, 50, $fld_len);
  		  $record_str .= $allow_multiple ? form_text($fld, $val, 4, 80, $fld_id_js) : form_input($fld, 'text', $val, 50, $fld_len, $fld_id_js);
  		} elseif($fld_type == 'color') {
  		   $record_str.= show_color($val, $fld);
      //echo("$fld: $fld_type: $display_val<br>");

      } elseif($fld_type=='location_picker') { // widget, no data
        $max = 1; // default len is 20
        $len = 1;
        $lp_fld = "$classTable-locationsearch";
        $search_button = location_search($lp_fld);
        $record_str .= " <input type='text' class='' name='$lp_fld' id='$lp_fld' value='' size='20'  $st>";
        $record_str .= "<div id='searchContainer'>
                          <div id='suggestContainer' class='float_left suggestion_container'></div>
                          <div id='searchMap' class='float_right suggestion_searchmap' ></div>
                          <div class='float_clear'></div>
                        </div>";
        //$record_str .= " $search_button";
      } elseif($fld_type=='map') {
        $max = 2; // default len is 20
        $len = 1;
        // $record_str .= "<input type='text' name='$fld' id='$full_fld' value='$val' maxlength='$max' size='$len' readonly='readonly' $st>";
        $record_str .= "<input type='text' name='$fld' id='$full_fld' value='$val' maxlength='$max' size='$len' $st>";
        $record_str .= " <input type='hidden' name='$classTable-viewport' id='$classTable-viewport' value='$val' size='50' $st>";
        $map_button = location_picker($full_fld, $classTable, $this_id, $row, true);
        //$record_str .= " $map_button";
      } elseif($fld_type=='valSelect') {
        $record_str.= select_from_array($fld, $fld_options, $val);
      } elseif($fld_type=='ssel') {
        $qs = "SELECT id,name FROM $fld_options";
        if($fld_args) $qs.=" WHERE ".implode(' AND ', search2filters($fld_args));
        $record_str.=  select_from_array($fld, $db->getAll($qs, NULL, NULL, NULL, MDB2_FETCHMODE_ORDERED), $val);
      } elseif($fld_type=='flags') { // array of name => value (int): values are logically or'ed into one value if checked
        $msel_str = flags_select($fld, $fld_options, $val, 10);          
        // echo("fldtype == flags mss='$msel_str'<br>"); //dump($fld_options);
        $record_str .= $msel_str; 
      } elseif($fld_type=='msel') { // comman separated list of ids into given table
        global $db;
        $child_type = $fld_options;
        $table      = get_object_table($child_type);
        $key        = get_object_key($child_type);        
        $descriptor = get_object_descriptor($child_type);        
        $qs = "SELECT $key, $descriptor FROM $table";
        if($fld_args) $qs.=" WHERE ".implode(' AND ', search2filters($fld_args));
        $objs = $db->getAll($qs);
        $record_str .= checkbox_select($fld, $objs, $val, 15, $key, $descriptor);          
        
        // $show_child = get_or_post('sc') == $child_type;
        // $div_title = phrase('show', CAPITALIZE). " $fld_name";
        // $record_str .= show_hide_div($fld, $msel_str, $div_title, $show_child);

      } elseif($fld_type=='float') {
        $format = explode('.', $fld_options);
        $mag = $format[0];
        $frac = $format[1];
        $max = $mag + $frac + 1;
        if($max<3) $max=3;
        $len = $search ? $search_len : $max+2;
        $record_str.= "<input type='text' name='$fld' id='$full_fld' value='$val' maxlength='$max' size='$len' $locked $disabled $st>";
      } elseif($fld_type=='yesno') {
        $record_str.= yes_no_chooser($fld, $val);
      } elseif($fld_type=='bool') {
        //if($action == 'add') dump($class);
        //echo("action = $action, def=$fld_default<br>");
        $checked = $val || ($action == 'add' && $fld_default) ? "checked='checked'" : "";
        $record_str.= "<input name='$fld' type='hidden' value='0' $st><input name='$fld' id='$full_fld'  value='1' type='checkbox' $checked $locked $disabled $st>";

      } elseif($fld_type=='html') {
        $fck_h = $fld_len ? $fld_len * 30 : 200;
        $fck_w = 800;        
        $record_str .= form_ckeditor($fld, $val, $fck_h, $fck_w, $fld_id_js);
                
      } elseif($fld_type=='text') {
        $len = $search ? $search_len : $fld_options;
        if($search) {
          $record_str.= "<input type='text' name='$fld' id='$full_fld' value='$val' maxlength='$max' size='$len' $locked $disabled $st>";
        } else {
          if(is_array($fld_args)) {
            list($ta_cols, $ta_rows) = $fld_args;
          } else {
            $ta_cols = $_SESSION['inner_width'] ? round($_SESSION['inner_width'] / 12) : 60;
          }
          $record_str.= form_text($fld, $val, $ta_rows, $ta_cols, "$locked $disabled ".$fld_id_js, $fld_len);          
        }

      } elseif($fld_type=='link') {
        $child_type = $fld_options;
        $target_description = $fld_val ? get_select_value2($child_type, $val) : "";                
        $name = $target_description ? $target_description : $val;
        //$record_str.= html_link(get_object_link($child_type, $fld_val, 'add', $this_id, $obj_type), $name, false, $target_description);
        $record_str.= $val ? html_link(get_object_link($child_type, $fld_val, 'add', $this_id, $obj_type), $name, false, $target_description) : $val;
        //$record_str.= html_link(get_object_link($child_type, $fld_val), $descriptor, false, $target_description);
        $record_str.= "<input type='hidden' name='$fld' id='$full_fld' value='$val' maxlength='$max' size='$len' $locked $disabled $st>";
	    } elseif($fld_type=='date' || $fld_type=='datetime') {
			
        $max = 19; // default len is 20
        $len = $max-3;
        $options = array();
      	$options['init_date'] = "'$fld_val'";
	      if($fld_type=='datetime') {
          $options['duration'] = "''";  
          $options['showTime'] = 'true';  
          $options['constrainInput'] = 'false';  
          $options['stepMinutes'] = 5;  
          $options['stepHours'] = 1;  
          $options['time24h'] = 'true';
	      }
        if($fld_options) $options['dependent_field'] = $fld_options;
				$record_str.= datepicker($fld, $options);
				
				//$calparams->showpast = 1;
				//$calparams->unlimited = 1;
				//$calparams->show_weekday = 0;
				//$calparams->update_hidden = 1;
				//$calparams->onchange = "";				
				//$datepicker = date_picker($fld, obj2array($row), $calparams, false);
				
      } else {
        $input_type = $fld_type == 'password' ? 'password' : 'text';      
        //echo("max for $fld_name $fld_type = $fld_len<br>");
        //echo("fld=$fld len=$len<br>");
        $max = $fld_len ? $fld_len : 20; // default len is 20
        $len = $search ? $search_len : max(round($max/3), 10);
        if($len > $max_input_len) $len = $max_input_len;
        $record_str.= "<input type='$input_type' name='$fld' id='$full_fld' value='$val' maxlength='$max' size='$len' $locked $disabled $st>";
	    }
			

    } else { // view
      if(($att_flags & AF_HIDE) || ($att_flags & AF_HIDE_VIEW)) continue; // this field is hidden or hidden in detail view
      if($fld_type=='one2one') continue; // don't show ID of children
      if($fld_type=='many2one' || $fld_type=='many2many') {
        $child_type = $fld_options;
        $target_description = $fld_val ? get_select_value2($fld_options, $fld_val) : "";         
        $descriptor = get_select_value2($fld_options, $fld_val);
        // echo("auth_action($fld_options, 'view', $fld_val) = ".auth_action($fld_options, 'view', $fld_val));
        $record_val = $fld_val && auth_action($fld_options, 'view', $fld_val) ? 
//          html_link(get_object_link($child_type, $fld_val, 'view', $this_id, $obj_type), $descriptor, false, $target_description) 
          html_link(get_object_link($child_type, $fld_val, 'view'), $descriptor, false, $target_description) 
          : $descriptor;
      } elseif($fld_type=='yesno') {
        $record_val = strlen($val) ? ($val ? "Yes" : "No") : '?';
      } elseif($fld_type=='bool') {
        $record_val = $val ? "Yes" : "No";
		  } elseif($fld_type == 'mail_subject') {
				$record_val = parse_mail_subject($row->headers);
      } elseif($fld_type=='valSelect') {
        $record_val = $fld_options[$val];
		  } elseif($fld_type == 'mail_body') {
				$record_val = parse_mail_body($val);
		  } elseif($fld_type == 'dummy') {
				$record_val = get_dummy_value($row, $fld_options);
      } elseif($fld_type=='file') {
        $record_val = file_list($val, $fld);
      } elseif($fld_type=='link') {
        $child_type = $fld_options;
        $target_description = $fld_val ? get_select_value2($child_type, $fld_val) : "";         
        $name = $target_description ? $target_description : $fld_val;
        
        $record_val = $fld_val && auth_action($child_type, 'view', $fld_val) ? 
//          html_link(get_object_link($child_type, $fld_val, 'view', $this_id, $obj_type), $descriptor, false, $target_description) 
          html_link(get_object_link($child_type, $fld_val, 'view'), $name, false, $target_description) 
          : $name;
  
      } elseif($fld_type=='url') {
        $link = $fld_options ? $fld_options.$fld_val : $fld_val;
        $record_val = "<a href='$link'>$fld_val</a>";
      } elseif($fld_type=='ssel') {
        $record_val = db_id2name(get_object_table($fld_options), $fld_val, true, false, false, get_object_descriptor($fld_options), get_object_key($fld_options));

      } elseif($fld_type=='msel') { // comman separated list of ids into given table
        $record_val = db_id2name(get_object_table($fld_options), $fld_val, true, true, false, get_object_descriptor($fld_options), get_object_key($fld_options));

      } elseif($fld_type=='one2many') {
        $child_type = parse_filter($fld_options, $row);
        $childRows = get_object_children($child_type, $row, $this_id, $fld_options, $fld_args, $fld_args2);
        //echo("View mode: child recordset: fld=$fld count=$child_count<br>");
        //dump($childRows);
        $child_count = sizeof($childRows);
        if(1 || $child_count) {
          $child_recordset = recordset($child_type, $childRows, $child_count, $this_id, $obj_type, $action, $messages[$fld_options]);
          $show_child = get_or_post('sc') == $child_type;
          $record_val = show_hide_div($fld, $child_recordset, phrase('show', CAPITALIZE). " $fld_name", $show_child);
        } else {
          if(auth_action($fld_options, 'add')) {
  				  $add_url = get_object_link($child_type, '', 'add', $this_id, $obj_type);
            $add_text = phrase('add', CAPITALIZE)." $fld_name";
        	  $add_link = html_link($add_url, $add_text);
            $record_val = $add_link;
          } else {
            $record_val = "No $fld_name records";
          }
        }

      } else {
        $record_val = $display_val;
      }
      if(!strlen($record_val)) $record_val = '&nbsp;';
      $record_str .= html_span($record_val);
    //$record_str.=("</td></tr>");
    }
    //$record_str.=($prefix."$val</td></tr>");
    if($hide) {
      $hidden_fields .= $record_str; // add to hidden string
      //echo("<textarea rows='3' cols='60'>Hidden $fld_name: $record_str</textarea><br>");
    } else {
      $recordArray[$fld_name] = $record_str;  // add to output array
      $lastVisible = $fld_name;
    }
  }
  // add hidden fields to last record
  $recordArray[$lastVisible] .= $hidden_fields;
  return $recordArray;
  //return $record_fields;
}


// generic validation of type / value
function object_attribute_validate($field, $att_type, $att_val, $required=false) {    
  // attribute specific error testing
  if($att_val) {
    if($att_type == 'password') {
      if($error = check_password_strength($att_val)) return $error;
    } elseif($att_type == 'email') {
      if(!is_email($att_val)) return  "$att_val is not a valid email address";
    } elseif($att_type == 'date') {
      if(($att_val == '0000-00-00' || !$att_val) && !$required) return ''; // ok with blank date if not req'd
      if(!is_date(strip_time($att_val)))  return  "$field: $att_val is not a valid date (use: yyyy-mm-dd)";
    } elseif($att_type == 'datetime' && strlen($att_val)==10) {
      if(($att_val == '0000-00-00' || !$att_val) && !$required) return ''; // ok with blank date if not req'd
      if(!is_date($att_val)) return  "$field: $att_val is not a valid date (use: yyyy-mm-dd)";
    } elseif($att_type == 'datetime') {
      if(($att_val == '0000-00-00 00:00:00' || !$att_val) && !$required) return ''; // ok with blank date if not req'd
      if(!is_datetime($att_val) && !is_date($att_val)) return  "$att_val is not a valid date/time (use: yyyy-mm-dd hh:mm:ss)";
    } elseif($att_type == 'int' || $att_type == 'intSelect') {
      if(!new_is_signed_integer($att_val)) return  "$att_val is not an integer";
    } elseif($att_type == 'float') {
      if(!new_is_signed_float($att_val)) return  "$att_val is not an number";
    } elseif(($att_type == 'discount' || $att_type == 'surcharge' || $att_type == 'commission') && $att_val) {
      list($abs_discount, $perc_discount) = split_discount($att_val);
      $att_name = ucfirst($att_type);
      if($abs_discount && !is_numeric($abs_discount)) return "$att_name $abs_discount is not numeric.";
      if($perc_discount && !is_numeric($perc_discount)) return "$att_name $perc_discount is not numeric.";
      if($att_type == 'discount') {
        if($abs_discount < 0 || $perc_discount < 0) return "$att_name cannot be negative.";
        if($perc_discount > 100) return "$att_name cannot be greater than 100%";
      } else { // surcharge
        if($abs_discount < 0 || $perc_discount < 0) return "$att_name cannot be negative.";
      }
    }
  }
  return '';
}

// returns children of an object (one2many relation)
function get_object_children($child_type, $row, $this_id, $fld_options, $fld_args, $fld_args2='') {
  $child_table = get_object_table($child_type);
  $child_filters = "$child_table.$fld_args='$this_id'";
  if($fld_args2) $child_filters .= " AND ".implode(' AND ', search2filters($fld_args2)); // add custom filter if any
  $childRows = get_objects($child_type, $child_filters);
  return $childRows;
}

// auto-submitting select box to pick number of records per page
function rpp_chooser($limit) {
	$stepArray = $_SESSION['records_per_page_array'];
  $rpp_form = phrase('records per page', CAPITALIZE).":";
  $rpp_form.= qs2form('', array('limit', '__hide', '__show', 'go'), true, 'rpp_');  
  $rpp_form.= "  <select name='limit' onchange='this.form.submit();'>\n";
  foreach($stepArray as $step) {
    $selected = $limit==$step ? "selected='selected'" : "";
    $rpp_form.= "  <option value='$step' $selected>$step</option>\n";
  }
  $rpp_form.= "</select>\n";
  return html_form($rpp_form, 'rpp', $_SERVER['PHP_SELF'], 'GET');
}

function show_hide_recordset_columns($obj_type, $classVars) {
  $list = $_SESSION['recordset'][$obj_type]['columns'];
  $table = get_object_table($obj_type);
  if(!$list) return;
  $rows[''] = "Show Column...";
  $rows['__default'] = "Reset to default";  
  foreach($classVars as $k => $class) {
    list($fld, $sql_fld) = parse_field($table, $k); // converts class.class.class.field to array(field, table.field)
    if($list[$sql_fld] < 1) continue;
    $name = $class[ATT_NAME];
    $rows[$sql_fld] = $name; 
  }
  $onchange = "document.forms.ccf.submit();";
  $qs = $_SERVER['QUERY_STRING'];
  $form = select_from_array('__show', $rows, $selected_key, "", "", $onchange);
  $form .= qs2form('', array('__show', '__hide'), true, 'show_hide_');  
  return html_form($form, 'ccf');
}

// replace __this->field with actual value (obj->field) if obj set 
function parse_filter($filter, $obj=NULL) {
  if(strpos($filter, '__this->')===false) return $filter; // no parsing needed
  $field = substr($filter, 8);
  //echo("parse_filter: Filter field = $field, returning ".$obj->$field.html_break());
  return $obj->$field;
}
  
// replace __this.field with actual value (obj->field) if obj set 
function parse_filter_old($raw_filters, $obj=NULL) {
  return $raw_filters;
  if(!$raw_filters) return "";
  if(!strpos($raw_filters, '__this')) return $raw_filters; // no parsing needed
  $raw_filters = explode(' AND ', $raw_filters);
  if(!is_array($raw_filters)) $raw_filters = array($raw_filters);  
  
  $pattern = '/__this\[(\w+)\]/';
  $filters = array();
  foreach($raw_filters as &$filter) {
    if($complex) {
      preg_match_all($pattern, $filter, $m);
      $matches = $m[1];
    }
    //echo("processing $filter<br>"); 
    if(count($matches)) {
      foreach($matches as $match) {
        if($obj) $filters[] = str_replace("__this[$match]", $obj->$match, $filter); // remove if object not set
      }
    } else {
      $filters[] = $filter; // no processing needed
    }
  }
  // return $filters;
  
  $filter_str  = implode(' AND ', $filters);
  //echo("filters final - = $filter_str<br>"); 
  return $filter_str;
}  

function parse_field($table, $field) { // converts class.class.class.field to table.field    
  if(!strpos($field, '.')) return array($field, "$table.$field");
  $elements = explode('.', $field);
  $field = array_pop($elements); // the field
  $table = get_object_table(array_pop($elements)); // the table of the parent type
  return array($field, "$table.$field");
}

function search_box($search_name, $search_val, $class, $js='') {
  $fld_type= $class[ATT_TYPE];
  $fld_options = $class[ATT_LENGTH];
  $fld_args= $class[ATT_ARGS];
  $fld_sort= $class[ATT_SORT];
  $fld_name = $class[ATT_NAME];  
  if($fld_type=='many2one' || $fld_type=='many2many') {
    //$filters = parse_filter($fld_args);
    return get_select_box2($search_name, $fld_options, $search_val, false, $filters, $fld_sort, '', 15);
  } elseif($fld_type=='bool') {
    return yes_no_chooser($search_name, $search_val);
  } else {
    if(in_array($fld_type, array('link', 'id'))) $size=4;
    else $size = $fld_options ? $fld_options : 8; // min size = 6
    if($size>8) $size=8; // max size = 8
    return form_input($search_name, 'text', $search_val, $size, 0, $js);
    form_input('_val2_'.$sql_fld, 'text',$value2,0,0,"$js $disabled");
  }
}

// unless user is logged in, takes a list of changes, returns name + role of user responsible if found
function changed_by($changes) {
  // global $u_id;  
  // global $u_type;
  // if($u_id) $user_id = $u_id;
  // if($u_type) $role = $u_type;

  $user_name = $_SESSION['user_name'];
  $user_id   = $_SESSION['user_id'];
  $role      = $_SESSION['user_type'];
  
  $who = "??";
  if(!$user_id) {
    foreach($changes as $change) {
      if($cid = $change['id']) {
        $changeObj = get_object('changelog', $cid);
        break;
      }
    }
    if($changeObj) {    
      $role = $changeObj->user_level ? get_object('user_level', $changeObj->user_level, 'user_type') : '';
      $user_id = $changeObj->user_id;
    }
  }
  if($user_name) {
    return $role ? "$user_name ($role)" : $user_name;
  } elseif($user_id) {
    $userObj = get_object('user', $user_id);
    $who = get_name_string($userObj).($role ? " ($role)" : "");
  } elseif($role) {
    $who = "The $role";
  }
  return $who;
}  

// new Ajax style recordset buttons
function recordset_buttons_inline($obj_type, $id, $fields='', $options=NULL) { 
  //dump($options);
  $options['context'] = 'recordset';
  if(auth_action($obj_type, 'edit', $id)) {
  	$buttons[] = edit_object_inline($obj_type, $id, $fields, $options); // add edit-link
  }
  
  if(auth_action($obj_type, 'del', $id)) {
    $buttons[] = delete_object_inline($obj_type, $id, $fields, $options); // add edit-link
  }
	$output = count($buttons) ? implode(" ", $buttons) : '';
	return $output;
}

function delete_object_inline($obj_type, $id, $fields='', $options=NULL) {    
  //$url = get_object_link($obj_type, $id, 'del', $parent_id, $parent_type, '', $ref_name, $ref_link);
  //$image = $context == 'recordset' ? "/images/icons/delete_tiny.gif" : "/images/icons/delete.gif";
  $image = "/images/icons/delete_tiny.gif";
  $confirm_text = "Are you sure you want to delete $obj_name $id";

  // options
  $handler =  $options['handler'];
  $reload = isset($options['reload']) ? $options['reload'] : 1; // reload is true by default (causes page to reload after successful save) 

  $desc = get_object_descriptor_string($obj_type, $id);
  if (MDB2::isError($desc) && $_SESSION['dev']) {
    dump($desc);
  } else {
    if($desc) $confirm_text .= " ($desc[1])";
  }
  $js = "onclick = 'if(confirm(\"$confirm_text ?\")) delete_object(\"$obj_type\", \"$id\", {\"handler\": \"$handler\", \"reload\": \"$reload\"}); return false;'";
  $button = html_image_link('#', $image, phrase('delete', CAPITALIZE)." $obj_type $id", false, '', $js, $dim, $dim);
  return $button;
}


// todo: only works if add_object_inline is used on same page (needs object_dialog) 
function edit_object_inline($obj_type, $id, $fields='', $options=NULL) {    
  if(!$fields) $fields = array(); 
  $action = $id ? 'edit' : 'add';
  $context = $options['context'];
  $data = $options['data'] = $options['data'] ?: array();
  $fields = $options['fields'] = $fields ?: array();

  if(!isset($options['reload'])) $options['reload'] = 1; // reload by default 
  $options_json = json_encode($options);
  
  //$fields_json = json_encode($fields);
  //$data_json = json_encode($data);
  //$handler =  $options['handler'];
  //$field = $options['field'];
  //$reload = isset($options['reload']) ? $options['reload'] : 1; // reload is true by default (causes page to reload after successful save) 
  
  //$js = "onclick='object_dialog(\"$obj_type\", \"$id\", $fields_json, $data_json, \"$handler\", \"$reload\");return false;'";   
  $js = "onclick='object_dialog(\"$obj_type\", \"$id\", $options_json);return false;'";   
  $image = $options['image'];
  if(!$image) {
    if($id) {
      $image = $context == 'recordset' ? '/images/icons/edit_tiny.gif' : '/images/icons/edit.gif';
    } else {
      $image = $context == 'recordset' ? '/images/icons/add_small.gif' : '/images/icons/add.gif';
    }
  }
  $button = html_image_link('#', $image, phrase($action, CAPITALIZE)." ". ($field ? "$obj_type $field" : $obj_type), false, $class, $js);
  return $button;
}

function add_object_inline($obj_type, $fields='', $options=NULL) {    
  return edit_object_inline($obj_type, 0, $fields, $options);
}

function add_object_link($obj_type, $name='', $ref_name='', $ref_link='', $params='') {
  if(!$name) $name = get_object_name($obj_type);
  $dim = 12;
  $image = '/images/icons/add_small.gif';
  if($params && $params[0] != '&') $params = '&'.$params;
  return html_image_link(get_object_link($obj_type, 0, 'add', '', '', '', $ref_name, $ref_link).$params, $image,  phrase('add', CAPITALIZE)." $name", false, '', '', $dim, $dim);
                        
}

// jquery dialog for adding/editing objects
function object_dialog($obj_type, $obj=NULL, $options=NULL) {
  $options['dialog'] = true;
  $form = object_form($obj_type, $obj, $options);
  return html_div($form, 'hidden', "id='".$obj_type."_dialog'");
}

// returns a form for adding/updating object
// if id is __none, shows add form, otherwise edit form
// pass fields to select which fields to show
// if ajax is set, 
//function object_form($obj_type, $obj, $fields=0, $class='fieldset_top', $ajax=true, $handler='') {
function object_form($obj_type, $obj=NULL, $options=NULL) {
  if(!$obj_type) die("object_form: no type");
  $class_def  = get_class_def($obj_type, true);
  $key = get_object_key($obj_type);  
  if($id = $obj->$key) {
    $action = 'edit';
  } else {
    $action = 'add'; 
  }

  // options
  $show_form = isset($options['show_form']) ? $options['show_form'] : true; // if false, just return fields 
  $ajax = isset($options['ajax']) ? $options['ajax'] : true; // ajax submit true by default - do we want this? 
  $class = $options['class'] ?: 'fieldset_top'; 
  $captcha = $options['captcha']; 

  // js options
  $parent_id = $options['parent_id']; 
  $handler = $options['handler']; 
  $fields = $options['fields'] ?: array(); 
  $reload = $options['dialog'] ? (isset($options['reload']) ? $options['reload'] : 1) : 0; // whether or not to reload  
  
  $form_name = $action.'_'.$obj_type;
  $errors = html_div('', 'error', "id='".$form_name."_errors'");
  $messages = html_div('', 'form_message', "id='".$form_name."_messages'");  

  if($ajax) { // javascript to handle ajax submission, display errors/messages + closing parent dialog
    $on_save = "onclick=\"return save_object('$form_name', '$obj_type', '$action', {'handler': '$handler', 'reload': '$reload', 'parent_id': '$parent_id'});\"";
    $on_cancel = "onclick=\"close_parent_dialog('$form_name');return false;\"";    
  }

  $links = array(); 
  if(count($fields)) {
    $fields_str = implode(',', $fields);
    $attr_fields = attribute_fields($fields);
    if($options['dialog']) {
      $js = "onclick=\"load_dialog('$obj_type', '$id');return false;\"";    
      $links[] = html_link('#', phrase('show_all_fields', CAPITALIZE), false, "Only the most commonly used fields are shown, click here to show all fields $fields_str", $js);
    }
  } else {
    $attr_fields = $class_def->fields;
  }
  $links_str = html_div(implode(' ', $links), 'abs_top_right');
  $record = record_fields($class_def, $obj, $id, $action, 0, '', 'messages', $attr_fields);
  $buttons[] = form_input($action.'_object', 'submit', ' Save ', 0, 0, $on_save); 
  $buttons[]= form_input('cancel_object', 'submit', ' Cancel ', 0, 0, $on_cancel); 
  $hidden_fields = array('obj_type' => $obj_type, 'action' => $action, 'oper' => $action);
  if($id) $hidden_fields['id'] = $id; 
  $fieldset = $errors.$messages.$links_str.html_fieldset($record, '', $class, '', true).array2form($hidden_fields);
  
  if(!$show_form) return $fieldset; // just return the fieldset

  $fieldset = $fieldset.implode(' ', $buttons);
  $form = $captcha ? html_secure_form($fieldset, $form_name) : html_form($fieldset, $form_name);
  return $debug.html_break().$form;   
}

// action buttons

function button_add_media($obj_type, $parent_type, $parent_id, $descriptiontype_id=0, $extra_fields='') {
  
  if(!$descriptiontype_id) $descriptiontype_id = DESC_TYPE_ALBUM; // default is photo album
  
  $parent_action = 'view'; // todo - allow edit, add ?

  // Image upload form (URL + file upload button)
  $max_upload_M=8; // maximum file size server will accept = 8 Megs
  $max_upload_K=$max_upload_M * 1024;
  $max_upload =$max_upload_K * 1024;

  $media->parent_id = $parent_id;
  $media->parent_type = $parent_type;
  $media->descriptiontype_id = $descriptiontype_id; // default is 10: photo album

  $hidden = array('__parent_id' => $parent_id, '__parent_type' => $parent_type, 'obj_type' => $obj_type, 'MAX_FILE_SIZE' => $max_upload);
  $add_button .= array2form($hidden);
  $add_button .= obj2form($media);

  $add_button .= "URL: ".form_input('url', 'text', '', 15); 
  $add_button .= " or File: ".form_input('userfile', 'file', '', 10);   
  $add_button .= $extra_fields;
  $add_button .= " ".form_input('addinline', 'submit', ' Add '); 

  return html_form($add_button, 'upload_media', $_SERVER[PHP_SELF], $method='post', '', "enctype='multipart/form-data'");
}

// menu for logged in users
function admin_menu($level=0) {
  global $u_level;
  $level = $level ?: $u_level;
  if(!$u_level) return '';

  global $u_id;
  global $u_ownerid;
  global $host_sub;
  global $propertyTypeArray;
  global $db;
  $usr = $_SESSION['loggedin'];
  if(!$usr) return;
  //if($_SESSION['site_id'] > 100) return '';
  $usr_name = $usr['username'];
  //$menu[] = array(phrase('log out', CAPITALIZE)." $usr_name", "?act=logout");
  //$menu[] = array(phrase('home', CAPITALIZE), "/");

  //switch($user_level) {
  //  case USER_LEVEL_GUEST;
  //    break;
  //  case USER_LEVEL_ORG;
  //    break;
  //  case USER_LEVEL_OWNER;
  //    break;
  //  case USER_LEVEL_AFFILIATE;
  //    break;
  //  case USER_LEVEL_CONTRACTOR;
  //    break;
  //  case USER_LEVEL_AGENT;
  //    break;
  //  case USER_LEVEL_STAFF;
  //    break;
  //  case USER_LEVEL_ADMIN;
  //    break;
  //  case USER_LEVEL_SYSTEM;
  //    break;
  //}
      
  $menu[] = array(phrase('account', CAPITALIZE), '/admin/account.php');

  //$app_link = get_page_link(PAGE_ADMIN) ?: '/admin/app.php';
  $app_link = get_page_link(PAGE_ADMIN);
  if($level >= USER_LEVEL_STAFF) $menu[] = array(phrase('objects', CAPITALIZE), $app_link);

  // hack for now for Thomas  
  if($u_id == 13329) $menu[] = array(phrase('contacts', CAPITALIZE), get_object_link('contact'));

  if($level == USER_LEVEL_CONTRACTOR) {
    $menu[] = array(phrase('calendar', CAPITALIZE), get_page_link(PAGE_CALENDAR));
    //return html_links(array(phrase('calendar', CAPITALIZE), '/admin/calendar.php'), ' '); // only calendar
  }
    
  if($level == USER_LEVEL_GUEST || $level == USER_LEVEL_ORG) {
    $menu[] = array(phrase('reservations', CAPITALIZE), get_object_link('reservation'));
    $menu[] = array(phrase('invoices', CAPITALIZE), get_object_link('invoice'));
  }
  if($level >= USER_LEVEL_STAFF) {
    $menu[] = array(phrase('translate', CAPITALIZE), '/admin/phrases.php');
    //$menu[] = array(phrase('objects', CAPITALIZE), get_object_link());
    $menu[] = array(phrase('events', CAPITALIZE), '/admin/events.php');
    $menu[] = array(phrase('invoices', CAPITALIZE), '/admin/invoices.php');
  }

  if($level == USER_LEVEL_AFFILIATE) {
    global $u_affiliateid;
    $affObj = get_object('affiliate', $u_affiliateid);
    $types = $affObj->show_types ? explode(',', $affObj->show_types) : array();
    foreach($types as $type) {
      $typeObj = get_object('property_type', $type);
      if($typeObj->bookable) $show_reservations = true;
      else $show_enquiries = true;
      //if($typeObj->calendar) $show_calendar = true;
    }
    if($show_reservations)  $menu[] = array(phrase('reservations', CAPITALIZE), get_object_link('reservation'));
    if($show_enquiries)     $menu[] = array(phrase('enquiries', CAPITALIZE), get_object_link('enquiry'));
  }
  
  if($level == USER_LEVEL_AGENT) {
    global $u_agentid;
    $agentObj = get_object('agent', $u_agentid);
    $types = $agentObj->types ? explode(',', $agentObj->types) : array();
    foreach($types as $type) {
      $typeObj = get_object('property_type', $type);
      if($typeObj->bookable) $show_reservations = true;
      else $show_enquiries = true;
      if($typeObj->calendar) $show_calendar = true;
    }
    if($show_calendar)      $menu[] = array(phrase('calendar', CAPITALIZE), get_page_link(PAGE_CALENDAR));
    if($show_reservations)  $menu[] = array(phrase('reservations', CAPITALIZE), get_object_link('reservation'));
    if($show_enquiries)     $menu[] = array(phrase('enquiries', CAPITALIZE), get_object_link('enquiry'));
  }

  if($level >= USER_LEVEL_OWNER && !in_array($level, array(USER_LEVEL_CONTRACTOR, USER_LEVEL_AGENT))) {
    $menu[] = array(phrase('statistics', CAPITALIZE), get_page_link(PAGE_STATS));
  }

  if($level == USER_LEVEL_OWNER && $u_ownerid) {
    $types = $db->getCol("SELECT distinct type FROM property WHERE owner_id=$u_ownerid");
    foreach($types as $type) $menu[] = array($propertyTypeArray[$type], get_object_link($type));
  }
  
  if($level == USER_LEVEL_OWNER || $level >= USER_LEVEL_STAFF) {
    $menu[] = array(phrase('calendar', CAPITALIZE), get_page_link(PAGE_CALENDAR));
  }
  
  if($level >= USER_LEVEL_ADMIN) {
    $menu[] = array(phrase('withdraw', CAPITALIZE), get_page_link(PAGE_WITHDRAW));
  }
  
  if($level >= USER_LEVEL_SYSTEM) {
    $menu[] = array(phrase('xrate', CAPITALIZE)         , '/admin/xrate.php'               );
    $menu[] = array(phrase('system', CAPITALIZE)        , '/admin/system.php'              );
    $menu[] = array(phrase('scripts', CAPITALIZE)       , '/admin/scripts.php'             );
  }

  if($level >= USER_LEVEL_STAFF) {
    $live_url = replace_uri_var($_SERVER['REQUEST_URI'],"livedb", 1);
    $dev_url = replace_uri_var($_SERVER['REQUEST_URI'],"livedb", 0);
    if($host_sub=='dev') $menu[] = $_SESSION['livedb'] ? array("<b class='red'>Switch to dev DB</b>", $dev_url) : array("Switch to live DB" ,$live_url);
  }
  $menu[] = array(phrase('log_out', CAPITALIZE), "?act=logout");

  if(!$_SESSION['show_header']) $lang_menu = language_menu($_SESSION['pageObj']);
  $menu = html_links($menu, ' ').' '.$lang_menu;

  // if($level >= USER_LEVEL_STAFF) $menu .= print_admin_menu($user_level);
  return $menu;
}


  // global $db;
  // global $host_sub;
  // global $u_id;
  // global $u_level;
  // $menu_items = array();
  // 
  // $site_url = $_SERVER['HTTP_HOST'];
  // 
  // //if($host_sub=='dev') $menu_str.= $_SESSION['livedb'] ? "<a href='?livedb=0'>Switch to dev DB</a><br>" : "<a href='?livedb=1'>Switch to live DB</a><br>";
  // $live_url = replace_uri_var($_SERVER['REQUEST_URI'],"livedb", 1);
  // $dev_url = replace_uri_var($_SERVER['REQUEST_URI'],"livedb", 0);
  // if($host_sub=='dev') $menu_str.= ($_SESSION['livedb'] ? "<a href='$dev_url'>Switch to dev DB</a>" : "<a href='$live_url'>Switch to live DB</a>").html_break();
  // $base = 'admin/app.php';
  // //$user = get_user($uid);
  // 
  // $user_type = get_user_level_name($user_level);
  // 
  // group_sort(&$classes);
  // //dump($classes);
  // $count = count($classes);
  // $group = "";
  // $group_str = "";
  //  
  //  if($class->group != $group) {
  //    
  //    if($group_str) {
  //      $menu_str .= show_hide_div($group, $group_str, "<span class='heading2'>".phrase($group, CAPITALIZE)."</span>");
  //      $group_str = "";
  //    }
  //    $group=$class->group;
  //  }
  //  $actions = "";
  //
  //  // $can_list = true;
  //
  //  if($compact) {
  //    if($can_list) $group_str .= html_link(get_object_link($class->type, 0), $class->name); 
  //  } else {
  //    if(!$can_list) continue;
  //    $can_add  = auth_action($class->type, 'add');
  //    $add_link = $can_add ? html_link(get_object_link($class->type, 0, 'add'), '+', false, phrase('add', CAPITALIZE)." $class->name") : "";
  //    $filters = get_object_filters($class->type, $user_level, $u_id);
  //    //if($class-type=='site') echo("filters for site=$filters");dump($filters);
  //    $count = get_objects_count($class->type, $filters);
  //
  //
  //    $name = html_link(get_object_link($class->type), $class->name);
	//  	$rowclass = $i%2 ? "class='odd'" : "";
  //    $group_str.= " &nbsp; &nbsp; $name ($count) $add_link<br />";
  //    $i++;
  //  }
  //}
  //
  //$menu_str .= show_hide_div($group, $group_str, "<span class='heading2'>".phrase($group, CAPITALIZE)."</span>"); // add last group
  ////if(!$compact) $menu_str.=('</tbody></table>');
  //return $menu_str;
  // }

// takes a simple array (a, b, c ...)
// returns an an associate array (a => array(), b => array(), c => array() ....)
function attribute_fields($fields) {
  $fields = array_flip($fields);
  foreach($fields as $k=>$v) $fields[$k] = array(); // initalize as empty arrays
  return $fields;  
}

function admin_menu_items($user_level) {
  $classes = get_classes();
  foreach($classes as $class) {    
    $table = $class->table;
    $key = $class->key;
    $flags = $class->flags;
    $can_list = auth_action($class->type, 'list', 0, $user_level);

    if($class->flags & NF_NO_LIST || $class->flags & NF_NO_ACTIONS) continue;
    if(!$can_list) continue;

    $menu_items[phrase($class->group, CAPITALIZE)][$class->name] = get_object_link($class->type, 0);
  }         
  //foreach($menu_items as $k=>$v) asort($v);
  return ($menu_items);
}

function print_admin_menu($user_level) {
	$menu_items = admin_menu_items($user_level);	
	return menu($menu_items, phrase('objects', CAPITALIZE), array('flyOut' => 'true'));
}

function get_object_attribute_relations($type, $fields) {
  $child_fields = array();
  $org_fields = $fields;
  $unset = array();
  foreach($fields as $field=>$attributes) {
    $att_type = $attributes[ATT_TYPE];
    $att_flags = $attributes[ATT_FLAGS];
    $att_options = $attributes[ATT_RELATION_TYPE];
    //if($att_type == 'one2one' ) {  
    if($att_type == 'one2one' && ($id > 0 || ($att_flags & AF_ONE2ONE_INTEGRATE)|| ($att_flags & AF_OBLIGATORY))) {
      $child_required = $att_flags & AF_OBLIGATORY ? "(**)" : "";
      $child_fields = get_object_attributes($att_options, 1);
      $child_key = get_object_key($att_options);
      $child_table = get_object_table($att_options);
      $heading = get_object_name($att_options) . $child_required;
      array_push($fields, $heading); // first field is header
      //array_push($fields, get_object_name($att_options)); // first field is header
      foreach($child_fields as $cfield=>$cclass) {
        $cfields[$att_options.".".$cfield] = $child_fields[$cfield];
        //$fields[$child_table.".".$cfield] = $child_fields[$cfield];
      }
      $fields = $att_flags & AF_ONE2ONE_PREPEND ? array_merge($cfields, $fields) : array_merge($fields, $cfields); // which to show first? 
      $child_key_field = $att_options.".".$child_key;
      $unset[] = $child_key_field; 
      //unset($fields[$child_table.".".$child_key]); // don't include id of child
    }
  }
  foreach($unset as $fld) unset($fields[$fld]); // don't include id of child 
  return $fields;
}

// returns true if any of the fields (array) appear in changes
function object_changed($changes, $fields) {
  return array_intersect_key($changes, array_flip($fields));
}

function object_has_attribute($type, $attr) {
  $class_def = get_object_attributes($type, true);
  return $class_def[$attr] ? true : false;
}


// takes an array of objects, return unordered list
// if parent_field is set, will look for children
//function objects2ul($obj_type, $objects, $name_field='name', $parent_field='', $sort='', $class='', $js='') {
function objects2ul($obj_type, $objects, $options=NULL) {
  if(!$objects) return '';
  $depth = ++$options['depth'];
  $indent = str_repeat("  ", $depth);
  $key = get_object_key($obj_type);
  $classes = array();
  $name_field   = $options['name_field'] ?: 'name';
  $parent_field = $options['parent_field'];
  $prefix = $options['prefix'] = $parent_field ? 'tree_' : 'list_';
  foreach($objects as $obj) {
    $list[$obj->$key] = $obj->$name_field;
    //echo("Looking for  $obj_type with $parent_field = ".$obj->$key."<br>");
    $classes[] = $obj->is_folder ? 'folder' : '';
    if($parent_field && ($children = find_objects($obj_type,  array($parent_field => $obj->$key), $options['sort']))) {
      // echo("The following $obj_type have $parent_field = ".$obj->key."<br>");
      // dump($children);die();
      $list[$obj->$key] .= "\n$indent".objects2ul($obj_type, $children, $options);
    }    
    //$output .= html_ul($list, $class, $js);
  }
  //dump($list);
  //dump($classes);
  return html_ul($list, $options['class'], $options['js'], true, $classes);
  // return html_ul($list, $options['class'], $options['js'], $prefix, $classes); // todo: use prefix
}

// recursively update all childeren objects with given data (silently, do not call update_object)
function object_update_children($obj_type, $id, $data, $parent_field = 'parent_id') {
   global $db;
   $key = get_object_key($obj_type);
   $table = get_object_table($obj_type);   
   $child_ids = $db->getCol("SELECT $key FROM $table WHERE $parent_field='$id'");
   if(count($child_ids)) {
     $tuplets = array_tuplets($data);
     $query = "UPDATE $table SET $tuplets WHERE $parent_field='$id'";
     db_query($query);
     echo($query.html_break());
     foreach($child_ids as $child_id) object_update_children($obj_type, $child_id, $data, $parent_field);
   }
}

?>